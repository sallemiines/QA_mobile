"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("./logger"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

const IGNORED_EVENTS = ['Page.defaultAppearanceDidChange', 'Page.domContentEventFired', 'Page.frameStartedLoading', 'Page.frameStoppedLoading', 'Page.frameScheduledNavigation', 'Page.frameClearedScheduledNavigation', 'Page.loadEventFired', 'Console.messagesCleared', 'Debugger.scriptParsed', 'Debugger.globalObjectCleared', 'Runtime.executionContextCreated', 'Heap.garbageCollected'];

class RpcMessageHandler {
  constructor(specialHandlers, isTargetBased = false) {
    this.setHandlers();
    this.errorHandlers = {};
    this.specialHandlers = _lodash.default.clone(specialHandlers);
    this.dataHandlers = {};
    this.isTargetBased = isTargetBased;
  }

  setCommunicationProtocol(isTargetBased) {
    this.isTargetBased = isTargetBased;
  }

  setDataMessageHandler(key, errorHandler, handler) {
    this.errorHandlers[key] = errorHandler;
    this.dataHandlers[key] = handler;
  }

  setSpecialMessageHandler(key, errorHandler, handler) {
    this.errorHandlers[key] = errorHandler;
    this.specialHandlers[key] = handler;
  }

  getSpecialMessageHandler(key) {
    return this.specialHandlers[key];
  }

  setTimelineEventHandler(timelineEventHandler) {
    this.timelineEventHandler = timelineEventHandler;
  }

  setConsoleLogEventHandler(consoleLogEventHandler) {
    this.consoleLogEventHandler = consoleLogEventHandler;
  }

  setNetworkEventHandler(networkLogEventHandler) {
    this.networkLogEventHandler = networkLogEventHandler;
  }

  hasErrorHandler(key) {
    return _lodash.default.has(this.errorHandlers, key);
  }

  hasSpecialMessageHandler(key) {
    return _lodash.default.has(this.specialHandlers, key);
  }

  async handleMessage(plist) {
    const selector = plist.__selector;

    if (!selector) {
      _logger.default.debug('Got an invalid plist');

      return;
    }

    if (_lodash.default.has(this.handlers, selector)) {
      await this.handlers[selector](plist);
    } else {
      _logger.default.debug(`Debugger got a message for '${selector}' and have no ` + `handler, doing nothing.`);
    }
  }

  async handleSpecialMessage(handler, ...args) {
    const fn = this.specialHandlers[handler];

    if (fn) {
      if (handler !== '_rpc_forwardGetListing:' && handler !== '_rpc_applicationDisconnected:' && handler !== '_rpc_applicationConnected:' && handler !== '_rpc_applicationUpdated:' && handler !== '_rpc_reportConnectedDriverList:') {
        this.specialHandlers[handler] = null;
      }

      await fn(...args);
    } else {
      _logger.default.warn(`Tried to access special message handler '${handler}' ` + `but none was found`);
    }
  }

  parseDataKey(plist) {
    try {
      return JSON.parse(plist.__argument.WIRMessageDataKey.toString('utf8'));
    } catch (err) {
      _logger.default.error(`Unparseable message data: ${_lodash.default.truncate(JSON.stringify(plist), {
        length: 100
      })}`);

      throw new Error(`Unable to parse message data: ${err.message}`);
    }
  }

  async dispatchDataMessage(msgId, method, params, result, error) {
    if (!_lodash.default.isEmpty(msgId)) {
      _logger.default.debug(`Handling message (id: '${msgId}')`);
    }

    if (method === 'Profiler.resetProfiles') {
      _logger.default.debug('Device is telling us to reset profiles. Should probably ' + 'do some kind of callback here');
    } else if (method === 'Page.frameNavigated' || method === 'Page.frameStoppedLoading') {
      if (_lodash.default.isFunction(this.specialHandlers['Page.frameNavigated'])) {
        await this.specialHandlers['Page.frameNavigated'](`'${method}' event`);
        this.specialHandlers['Page.frameNavigated'] = null;
      }
    } else if (IGNORED_EVENTS.includes(method)) {} else if (method === 'Page.frameDetached' && _lodash.default.isFunction(this.specialHandlers.frameDetached)) {
      await this.specialHandlers.frameDetached();
    } else if (method === 'Timeline.eventRecorded' && _lodash.default.isFunction(this.timelineEventHandler)) {
      this.timelineEventHandler(params || params.record);
    } else if (method === 'Console.messageAdded' && _lodash.default.isFunction(this.consoleLogEventHandler)) {
      this.consoleLogEventHandler(params.message);
    } else if (method === 'Console.messageRepeatCountUpdated' && _lodash.default.isFunction(this.consoleLogEventHandler)) {
      this.consoleLogEventHandler(params);
    } else if (method && method.startsWith('Network.') && _lodash.default.isFunction(this.networkLogEventHandler)) {
      this.networkLogEventHandler(method, params);
    } else if (_lodash.default.isFunction(this.dataHandlers[msgId])) {
      if (result.result && result.result.value) {
        result = result.result.value;
      }

      this.dataHandlers[msgId](result);
      this.dataHandlers[msgId] = null;
    } else if (this.dataHandlers[msgId] === null) {
      _logger.default.error(`Debugger returned data for message '${msgId}' ` + `but we already ran that callback! WTF??`);
    } else {
      if (msgId || result || error) {
        _logger.default.error(`Debugger returned data for message '${msgId}' ` + `but we were not waiting for that message! ` + `result: '${JSON.stringify(result)}'; ` + `error: '${error}'`);
      }
    }
  }

  async handleDataMessage(plist) {
    const dataKey = this.parseDataKey(plist);
    let msgId = (dataKey.id || '').toString();
    let result = dataKey.result;
    let method = dataKey.method;
    let params;

    if (method === 'Target.targetCreated') {
      const app = plist.__argument.WIRApplicationIdentifierKey;
      const targetInfo = dataKey.params.targetInfo;
      await this.specialHandlers.targetCreated(app, targetInfo);
      return;
    } else if (method === 'Target.targetDestroyed') {
      const app = plist.__argument.WIRApplicationIdentifierKey;
      const targetInfo = dataKey.params.targetInfo || {
        targetId: dataKey.params.targetId
      };
      await this.specialHandlers.targetDestroyed(app, targetInfo);
      return;
    }

    if (!dataKey.error && this.isTargetBased) {
      if (dataKey.method !== 'Target.dispatchMessageFromTarget') {
        return;
      }

      let message;

      try {
        message = JSON.parse(dataKey.params.message);
        msgId = message.id;
        method = message.method;
        result = message.result || message;
        params = result.params;
      } catch (err) {
        _logger.default.error(`Unexpected message format from Web Inspector:`);

        this.warn(_appiumSupport.util.jsonStringify(plist));
        throw err;
      }
    } else {
      params = dataKey.params;
    }

    let error = dataKey.error || null;

    if (result && result.wasThrown) {
      const message = result.result && (result.result.value || result.result.description) ? result.result.value || result.result.description : 'Error occurred in handling data message';
      error = new Error(message);
    }

    if (!error) {
      return await this.dispatchDataMessage(msgId, method, params, result, error);
    }

    if (this.hasErrorHandler(msgId)) {
      this.errorHandlers[msgId](error);
    } else {
      _logger.default.error(`Error occurred in handling data message: ${error}`);

      _logger.default.error('No error handler present, ignoring');
    }
  }

  setHandlers() {
    this.handlers = {
      '_rpc_reportSetup:': async plist => {
        await this.handleSpecialMessage('_rpc_reportIdentifier:', plist.__argument.WIRSimulatorNameKey, plist.__argument.WIRSimulatorBuildKey, plist.__argument.WIRSimulatorProductVersionKey);
      },
      '_rpc_reportConnectedApplicationList:': async plist => {
        await this.handleSpecialMessage('_rpc_reportConnectedApplicationList:', plist.__argument.WIRApplicationDictionaryKey);
      },
      '_rpc_applicationSentListing:': async plist => {
        await this.handleSpecialMessage('_rpc_forwardGetListing:', plist.__argument.WIRApplicationIdentifierKey, plist.__argument.WIRListingKey);
      },
      '_rpc_applicationConnected:': async plist => {
        await this.handleSpecialMessage('_rpc_applicationConnected:', plist.__argument);
      },
      '_rpc_applicationDisconnected:': async plist => {
        await this.handleSpecialMessage('_rpc_applicationDisconnected:', plist.__argument);
      },
      '_rpc_applicationUpdated:': async plist => {
        await this.handleSpecialMessage('_rpc_applicationUpdated:', plist.__argument);
      },
      '_rpc_reportConnectedDriverList:': async plist => {
        await this.handleSpecialMessage('_rpc_reportConnectedDriverList:', plist.__argument);
      },
      '_rpc_applicationSentData:': async plist => {
        await this.handleDataMessage(plist);
      }
    };
  }

}

exports.default = RpcMessageHandler;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
