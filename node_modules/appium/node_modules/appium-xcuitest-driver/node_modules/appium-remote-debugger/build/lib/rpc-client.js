"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _remoteMessages = _interopRequireDefault(require("./remote-messages"));

var _asyncbox = require("asyncbox");

var _logger = _interopRequireDefault(require("./logger"));

var _lodash = _interopRequireDefault(require("lodash"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _uuidJs = _interopRequireDefault(require("uuid-js"));

var _rpcMessageHandler = _interopRequireDefault(require("./rpc-message-handler"));

var _helpers = require("./helpers");

var _appiumSupport = require("appium-support");

const DATA_LOG_LENGTH = {
  length: 200
};
const WAIT_FOR_TARGET_TIMEOUT = 10000;
const WAIT_FOR_TARGET_INTERVAL = 1000;
const MIN_PLATFORM_FOR_TARGET_BASED = '12.2';

function isTargetBased(isSafari, platformVersion) {
  const isHighVersion = _appiumSupport.util.compareVersions(platformVersion, '>=', MIN_PLATFORM_FOR_TARGET_BASED);

  _logger.default.debug(`Checking which communication style to use (${isSafari ? '' : 'non-'}Safari on platform version '${platformVersion}')`);

  _logger.default.debug(`Platform version equal or higher than '${MIN_PLATFORM_FOR_TARGET_BASED}': ${isHighVersion}`);

  return isSafari && isHighVersion;
}

class RpcClient {
  constructor(opts = {}) {
    this._targets = [];
    this._shouldCheckForTarget = !!opts.shouldCheckForTarget;
    const {
      bundleId,
      platformVersion = {},
      isSafari = true,
      specialMessageHandlers = {},
      logAllCommunication = false,
      logAllCommunicationHexDump = false,
      socketChunkSize
    } = opts;
    this.isSafari = isSafari;
    this.connected = false;
    this.connId = _uuidJs.default.create().toString();
    this.senderId = _uuidJs.default.create().toString();
    this.msgId = 0;
    this.logAllCommunication = logAllCommunication;
    this.logAllCommunicationHexDump = logAllCommunicationHexDump;
    this.socketChunkSize = socketChunkSize;
    this.bundleId = bundleId;
    this.platformVersion = platformVersion;
    this.specialMessageHandlers = specialMessageHandlers;
    this.specialMessageHandlers.targetCreated = this.addTarget.bind(this);
    this.specialMessageHandlers.targetDestroyed = this.removeTarget.bind(this), this.setCommunicationProtocol(isTargetBased(isSafari, this.platformVersion));
  }

  setCommunicationProtocol(isTargetBased = false) {
    _logger.default.warn(`Setting communication protocol: using ${isTargetBased ? 'Target-based' : 'full Web Inspector protocol'} communication`);

    this.isTargetBased = isTargetBased;

    if (!this.remoteMessages) {
      this.remoteMessages = new _remoteMessages.default(isTargetBased);
    } else {
      this.remoteMessages.setCommunicationProtocol(isTargetBased);
    }

    if (!this.messageHandler) {
      this.messageHandler = new _rpcMessageHandler.default(this.specialMessageHandlers, isTargetBased);
    } else {
      this.messageHandler.setCommunicationProtocol(isTargetBased);
    }
  }

  needsTarget() {
    return this.shouldCheckForTarget && this.isTargetBased;
  }

  async waitForTarget(appIdKey, pageIdKey) {
    if (!this.needsTarget()) {
      return;
    }

    if (this.getTarget(appIdKey, pageIdKey)) {
      return;
    }

    try {
      await (0, _asyncbox.waitForCondition)(() => !_lodash.default.isEmpty(this.getTarget(appIdKey, pageIdKey)), {
        waitMs: WAIT_FOR_TARGET_TIMEOUT,
        intervalMs: WAIT_FOR_TARGET_INTERVAL,
        error: 'No targets found, unable to communicate with device'
      });
    } catch (err) {
      if (!err.message.includes('Condition unmet')) {
        throw err;
      }

      throw new Error('No targets found, unable to communicate with device');
    }
  }

  async send(command, opts = {}, waitForResponse = true) {
    const startTime = process.hrtime();
    const {
      appIdKey,
      pageIdKey
    } = opts;

    try {
      if (!_lodash.default.isEmpty(appIdKey) && !_lodash.default.isEmpty(pageIdKey)) {
        await this.waitForTarget(appIdKey, pageIdKey);
      }

      return await this.sendToDevice(command, opts, waitForResponse);
    } catch (err) {
      if (err.message.includes(`'Target' domain was not found`)) {
        this.setCommunicationProtocol(false);
        return await this.sendToDevice(command, opts, waitForResponse);
      } else if (err.message.includes(`domain was not found`) || err.message.includes(`Some arguments of method`)) {
        this.setCommunicationProtocol(true);
        await this.waitForTarget(appIdKey, pageIdKey);
        return await this.sendToDevice(command, opts, waitForResponse);
      }

      throw err;
    } finally {
      _logger.default.debug(`Sending to Web Inspector took ${(0, _helpers.getElapsedTime)(startTime)}ms`);
    }
  }

  async sendToDevice(command, opts = {}, waitForResponse = true) {
    return await new _bluebird.default(async (resolve, reject) => {
      const wrapperMsgId = this.msgId++;
      let msgId = wrapperMsgId;

      if (this.isTargetBased) {
        msgId = this.msgId++;
        this.setDataMessageHandler(wrapperMsgId.toString(), reject, _lodash.default.noop);
      }

      const appIdKey = opts.appIdKey;
      const pageIdKey = opts.pageIdKey;
      const targetId = this.getTarget(appIdKey, pageIdKey);

      const fullOpts = _lodash.default.defaults({
        connId: this.connId,
        senderId: this.senderId,
        targetId,
        id: msgId
      }, opts);

      const cmd = this.remoteMessages.getRemoteCommand(command, fullOpts);

      if (cmd.__argument && cmd.__argument.WIRSocketDataKey) {
        if (_lodash.default.isNil(cmd.__argument.WIRSocketDataKey.id)) {
          cmd.__argument.WIRSocketDataKey.id = wrapperMsgId;
        }

        cmd.__argument.WIRSocketDataKey = Buffer.from(JSON.stringify(cmd.__argument.WIRSocketDataKey));
      }

      let messageHandled = true;

      if (!waitForResponse) {
        messageHandled = false;
        this.setDataMessageHandler(msgId.toString(), reject, _lodash.default.noop);
      } else if (this.messageHandler.hasSpecialMessageHandler(cmd.__selector)) {
        const specialMessageHandler = this.getSpecialMessageHandler(cmd.__selector);
        this.setSpecialMessageHandler(cmd.__selector, reject, (...args) => {
          _logger.default.debug(`Received response from send (id: ${msgId}): '${_lodash.default.truncate(JSON.stringify(args), DATA_LOG_LENGTH)}'`);

          specialMessageHandler(...args);

          if (this.messageHandler.hasSpecialMessageHandler(cmd.__selector)) {
            this.setSpecialMessageHandler(cmd.__selector, null, specialMessageHandler);
          }

          resolve(args);
        });
      } else if (cmd.__argument && cmd.__argument.WIRSocketDataKey) {
        const errorHandler = function (err) {
          const msg = `Remote debugger error with code '${err.code}': ${err.message}`;
          reject(new Error(msg));
        };

        this.setDataMessageHandler(msgId.toString(), errorHandler, value => {
          _logger.default.debug(`Received data response from send (id: ${msgId}): '${_lodash.default.truncate(JSON.stringify(value), DATA_LOG_LENGTH)}'`);

          resolve(value);
        });
      } else {
        messageHandled = false;
      }

      const msg = `Sending '${cmd.__selector}' message` + (fullOpts.appIdKey ? ` to app '${fullOpts.appIdKey}'` : '') + (fullOpts.pageIdKey ? `, page '${fullOpts.pageIdKey}'` : '') + (this.needsTarget() ? `, target '${targetId}'` : '') + ` (id: ${msgId})`;

      _logger.default.debug(msg);

      try {
        const res = await this.sendMessage(cmd);

        if (!messageHandled) {
          resolve(res);
        }
      } catch (err) {
        return reject(err);
      }
    });
  }

  async sendMessage() {
    throw new Error(`Sub-classes need to implement a 'sendMessage' function`);
  }

  addTarget(app, targetInfo) {
    if (_lodash.default.isUndefined(targetInfo) || _lodash.default.isUndefined(targetInfo.targetId)) {
      _logger.default.warn(`Received 'targetCreated' event with no target. Skipping`);

      return;
    }

    if (_lodash.default.isEmpty(this.pendingTargetNotification)) {
      _logger.default.warn(`Received 'targetCreated' event with no pending request: ${JSON.stringify(targetInfo)}`);

      return;
    }

    const [appIdKey, pageIdKey] = this.pendingTargetNotification;

    if (_lodash.default.has(targetInfo, 'type')) {
      this.pendingTargetNotification = null;
    }

    _logger.default.debug(`Target created for app '${appIdKey}' and page '${pageIdKey}': ${JSON.stringify(targetInfo)}`);

    if (_lodash.default.has(this.targets[appIdKey], pageIdKey)) {
      _logger.default.debug(`There is already a target for this app and page ('${this.targets[appIdKey][pageIdKey]}'). This might cause problems`);
    }

    this.targets[appIdKey] = this.targets[appIdKey] || {};
    this.targets[appIdKey][pageIdKey] = targetInfo.targetId;
  }

  removeTarget(app, targetInfo) {
    if (_lodash.default.isUndefined(targetInfo) || _lodash.default.isUndefined(targetInfo.targetId)) {
      _logger.default.debug(`Received 'targetDestroyed' event with no target. Skipping`);

      return;
    }

    _logger.default.debug(`Target destroyed: ${JSON.stringify(targetInfo)}`);

    _lodash.default.pull(this.targets, targetInfo.targetId);
  }

  get targets() {
    this._targets = this._targets || {};
    return this._targets;
  }

  getTarget(appIdKey, pageIdKey) {
    return (this.targets[appIdKey] || {})[pageIdKey];
  }

  get shouldCheckForTarget() {
    return this._shouldCheckForTarget;
  }

  set shouldCheckForTarget(shouldCheckForTarget) {
    this._shouldCheckForTarget = !!shouldCheckForTarget;
  }

  async connect() {
    throw new Error(`Sub-classes need to implement a 'connect' function`);
  }

  async disconnect() {
    throw new Error(`Sub-classes need to implement a 'disconnect' function`);
  }

  isConnected() {
    return this.connected;
  }

  setSpecialMessageHandler(key, errorHandler, handler) {
    this.messageHandler.setSpecialMessageHandler(key, errorHandler, handler);
  }

  getSpecialMessageHandler(key) {
    return this.messageHandler.getSpecialMessageHandler(key);
  }

  setDataMessageHandler(key, errorHandler, handler) {
    this.messageHandler.setDataMessageHandler(key, errorHandler, handler);
  }

  async selectPage(appIdKey, pageIdKey) {
    this.pendingTargetNotification = [appIdKey, pageIdKey];
    this.shouldCheckForTarget = false;
    const sendOpts = {
      appIdKey,
      pageIdKey
    };
    await this.send('setSenderKey', sendOpts);

    _logger.default.debug('Sender key set');

    if (this.isTargetBased) {
      await this.send('targetExists', sendOpts, false);
    }

    this.shouldCheckForTarget = true;
    await this.send('enableInspector', sendOpts);
    await this.send('enablePage', sendOpts);
    await this.send('enableRuntime', sendOpts);
    await this.send('enableDebugger', sendOpts);
    await this.send('enableConsole', sendOpts);
    await this.send('inspectorInitialized', sendOpts);
  }

  async selectApp(appIdKey, applicationConnectedHandler) {
    return await new _bluebird.default((resolve, reject) => {
      const onAppChange = dict => {
        let oldAppIdKey = dict.WIRHostApplicationIdentifierKey;
        let correctAppIdKey = dict.WIRApplicationIdentifierKey;

        if (oldAppIdKey && correctAppIdKey !== oldAppIdKey) {
          _logger.default.debug(`We were notified we might have connected to the wrong app. ` + `Using id ${correctAppIdKey} instead of ${oldAppIdKey}`);
        }

        applicationConnectedHandler(dict);
        reject(new Error('New application has connected'));
      };

      this.setSpecialMessageHandler('_rpc_applicationConnected:', reject, onAppChange);
      return (async () => {
        let pageDict, connectedAppIdKey;

        try {
          [connectedAppIdKey, pageDict] = await this.send('connectToApp', {
            appIdKey
          });
        } catch (err) {
          _logger.default.warn(`Unable to connect to app: ${err.message}`);

          reject(err);
        }

        if (_lodash.default.isEmpty(pageDict)) {
          let msg = 'Empty page dictionary received';

          _logger.default.debug(msg);

          reject(new Error(msg));
        } else {
          resolve([connectedAppIdKey, pageDict]);
        }
      })();
    }).finally(() => {
      this.setSpecialMessageHandler('_rpc_applicationConnected:', null, applicationConnectedHandler);
    });
  }

  async receive() {
    throw new Error(`Sub-classes need to implement a 'receive' function`);
  }

  setTimelineEventHandler(timelineEventHandler) {
    this.timelineEventHandler = timelineEventHandler;
    this.messageHandler.setTimelineEventHandler(timelineEventHandler);
  }

  setConsoleLogEventHandler(consoleEventHandler) {
    this.consoleEventHandler = consoleEventHandler;
    this.messageHandler.setConsoleLogEventHandler(consoleEventHandler);
  }

  setNetworkLogEventHandler(networkEventHandler) {
    this.networkEventHandler = networkEventHandler;
    this.messageHandler.setNetworkEventHandler(networkEventHandler);
  }

}

exports.default = RpcClient;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
