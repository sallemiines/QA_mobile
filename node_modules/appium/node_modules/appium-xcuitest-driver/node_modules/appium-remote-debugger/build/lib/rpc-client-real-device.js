"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("./logger"));

var _rpcClient = _interopRequireDefault(require("./rpc-client"));

var _appiumIosDevice = require("appium-ios-device");

class RpcClientRealDevice extends _rpcClient.default {
  constructor(opts = {}) {
    super(Object.assign({
      shouldCheckForTarget: false
    }, opts));
    const {
      udid
    } = opts;
    this.udid = udid;
  }

  async connect() {
    this.service = await _appiumIosDevice.services.startWebInspectorService(this.udid, {
      osVersion: this.platformVersion,
      isSimulator: false,
      verbose: this.logAllCommunication,
      verboseHexDump: this.logAllCommunicationHexDump,
      socketChunkSize: this.socketChunkSize
    });
    this.service.listenMessage(this.receive.bind(this));
    this.connected = true;
  }

  async disconnect() {
    if (this.isConnected()) {
      _logger.default.debug('Disconnecting from remote debugger');

      this.service.close();
    }

    this.connected = false;
  }

  async sendMessage(cmd) {
    this.service.sendMessage(cmd);
  }

  async receive(data) {
    if (!this.isConnected()) {
      return;
    }

    this.messageHandler.handleMessage(data);
  }

}

exports.default = RpcClientRealDevice;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9ycGMtY2xpZW50LXJlYWwtZGV2aWNlLmpzIl0sIm5hbWVzIjpbIlJwY0NsaWVudFJlYWxEZXZpY2UiLCJScGNDbGllbnQiLCJjb25zdHJ1Y3RvciIsIm9wdHMiLCJPYmplY3QiLCJhc3NpZ24iLCJzaG91bGRDaGVja0ZvclRhcmdldCIsInVkaWQiLCJjb25uZWN0Iiwic2VydmljZSIsInNlcnZpY2VzIiwic3RhcnRXZWJJbnNwZWN0b3JTZXJ2aWNlIiwib3NWZXJzaW9uIiwicGxhdGZvcm1WZXJzaW9uIiwiaXNTaW11bGF0b3IiLCJ2ZXJib3NlIiwibG9nQWxsQ29tbXVuaWNhdGlvbiIsInZlcmJvc2VIZXhEdW1wIiwibG9nQWxsQ29tbXVuaWNhdGlvbkhleER1bXAiLCJzb2NrZXRDaHVua1NpemUiLCJsaXN0ZW5NZXNzYWdlIiwicmVjZWl2ZSIsImJpbmQiLCJjb25uZWN0ZWQiLCJkaXNjb25uZWN0IiwiaXNDb25uZWN0ZWQiLCJsb2ciLCJkZWJ1ZyIsImNsb3NlIiwic2VuZE1lc3NhZ2UiLCJjbWQiLCJkYXRhIiwibWVzc2FnZUhhbmRsZXIiLCJoYW5kbGVNZXNzYWdlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUdlLE1BQU1BLG1CQUFOLFNBQWtDQyxrQkFBbEMsQ0FBNEM7QUFDekRDLEVBQUFBLFdBQVcsQ0FBRUMsSUFBSSxHQUFHLEVBQVQsRUFBYTtBQUN0QixVQUFNQyxNQUFNLENBQUNDLE1BQVAsQ0FBYztBQUNsQkMsTUFBQUEsb0JBQW9CLEVBQUU7QUFESixLQUFkLEVBRUhILElBRkcsQ0FBTjtBQUlBLFVBQU07QUFDSkksTUFBQUE7QUFESSxRQUVGSixJQUZKO0FBSUEsU0FBS0ksSUFBTCxHQUFZQSxJQUFaO0FBQ0Q7O0FBRUQsUUFBTUMsT0FBTixHQUFpQjtBQUNmLFNBQUtDLE9BQUwsR0FBZSxNQUFNQywwQkFBU0Msd0JBQVQsQ0FBa0MsS0FBS0osSUFBdkMsRUFBNkM7QUFDaEVLLE1BQUFBLFNBQVMsRUFBRSxLQUFLQyxlQURnRDtBQUVoRUMsTUFBQUEsV0FBVyxFQUFFLEtBRm1EO0FBR2hFQyxNQUFBQSxPQUFPLEVBQUUsS0FBS0MsbUJBSGtEO0FBSWhFQyxNQUFBQSxjQUFjLEVBQUUsS0FBS0MsMEJBSjJDO0FBS2hFQyxNQUFBQSxlQUFlLEVBQUUsS0FBS0E7QUFMMEMsS0FBN0MsQ0FBckI7QUFRQSxTQUFLVixPQUFMLENBQWFXLGFBQWIsQ0FBMkIsS0FBS0MsT0FBTCxDQUFhQyxJQUFiLENBQWtCLElBQWxCLENBQTNCO0FBQ0EsU0FBS0MsU0FBTCxHQUFpQixJQUFqQjtBQUNEOztBQUVELFFBQU1DLFVBQU4sR0FBb0I7QUFDbEIsUUFBSSxLQUFLQyxXQUFMLEVBQUosRUFBd0I7QUFDdEJDLHNCQUFJQyxLQUFKLENBQVUsb0NBQVY7O0FBQ0EsV0FBS2xCLE9BQUwsQ0FBYW1CLEtBQWI7QUFDRDs7QUFDRCxTQUFLTCxTQUFMLEdBQWlCLEtBQWpCO0FBQ0Q7O0FBRUQsUUFBTU0sV0FBTixDQUFtQkMsR0FBbkIsRUFBd0I7QUFDdEIsU0FBS3JCLE9BQUwsQ0FBYW9CLFdBQWIsQ0FBeUJDLEdBQXpCO0FBQ0Q7O0FBRUQsUUFBTVQsT0FBTixDQUFlVSxJQUFmLEVBQXFCO0FBQ25CLFFBQUksQ0FBQyxLQUFLTixXQUFMLEVBQUwsRUFBeUI7QUFDdkI7QUFDRDs7QUFDRCxTQUFLTyxjQUFMLENBQW9CQyxhQUFwQixDQUFrQ0YsSUFBbEM7QUFDRDs7QUEzQ3dEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvZyBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgUnBjQ2xpZW50IGZyb20gJy4vcnBjLWNsaWVudCc7XG5pbXBvcnQgeyBzZXJ2aWNlcyB9IGZyb20gJ2FwcGl1bS1pb3MtZGV2aWNlJztcblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBScGNDbGllbnRSZWFsRGV2aWNlIGV4dGVuZHMgUnBjQ2xpZW50IHtcbiAgY29uc3RydWN0b3IgKG9wdHMgPSB7fSkge1xuICAgIHN1cGVyKE9iamVjdC5hc3NpZ24oe1xuICAgICAgc2hvdWxkQ2hlY2tGb3JUYXJnZXQ6IGZhbHNlLFxuICAgIH0sIG9wdHMpKTtcblxuICAgIGNvbnN0IHtcbiAgICAgIHVkaWQsXG4gICAgfSA9IG9wdHM7XG5cbiAgICB0aGlzLnVkaWQgPSB1ZGlkO1xuICB9XG5cbiAgYXN5bmMgY29ubmVjdCAoKSB7XG4gICAgdGhpcy5zZXJ2aWNlID0gYXdhaXQgc2VydmljZXMuc3RhcnRXZWJJbnNwZWN0b3JTZXJ2aWNlKHRoaXMudWRpZCwge1xuICAgICAgb3NWZXJzaW9uOiB0aGlzLnBsYXRmb3JtVmVyc2lvbixcbiAgICAgIGlzU2ltdWxhdG9yOiBmYWxzZSxcbiAgICAgIHZlcmJvc2U6IHRoaXMubG9nQWxsQ29tbXVuaWNhdGlvbixcbiAgICAgIHZlcmJvc2VIZXhEdW1wOiB0aGlzLmxvZ0FsbENvbW11bmljYXRpb25IZXhEdW1wLFxuICAgICAgc29ja2V0Q2h1bmtTaXplOiB0aGlzLnNvY2tldENodW5rU2l6ZSxcbiAgICB9KTtcblxuICAgIHRoaXMuc2VydmljZS5saXN0ZW5NZXNzYWdlKHRoaXMucmVjZWl2ZS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmNvbm5lY3RlZCA9IHRydWU7XG4gIH1cblxuICBhc3luYyBkaXNjb25uZWN0ICgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWF3YWl0XG4gICAgaWYgKHRoaXMuaXNDb25uZWN0ZWQoKSkge1xuICAgICAgbG9nLmRlYnVnKCdEaXNjb25uZWN0aW5nIGZyb20gcmVtb3RlIGRlYnVnZ2VyJyk7XG4gICAgICB0aGlzLnNlcnZpY2UuY2xvc2UoKTtcbiAgICB9XG4gICAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTtcbiAgfVxuXG4gIGFzeW5jIHNlbmRNZXNzYWdlIChjbWQpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWF3YWl0XG4gICAgdGhpcy5zZXJ2aWNlLnNlbmRNZXNzYWdlKGNtZCk7XG4gIH1cblxuICBhc3luYyByZWNlaXZlIChkYXRhKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1hd2FpdFxuICAgIGlmICghdGhpcy5pc0Nvbm5lY3RlZCgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMubWVzc2FnZUhhbmRsZXIuaGFuZGxlTWVzc2FnZShkYXRhKTtcbiAgfVxufVxuIl0sImZpbGUiOiJsaWIvcnBjLWNsaWVudC1yZWFsLWRldmljZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
