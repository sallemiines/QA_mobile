"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("./logger"));

var _remoteDebugger = require("./remote-debugger");

var _rpcClientRealDevice = _interopRequireDefault(require("./rpc-client-real-device"));

class RemoteDebuggerRealDevice extends _remoteDebugger.RemoteDebugger {
  constructor(opts = {}) {
    super(opts);
    this.udid = opts.udid;
    this.skippedApps = ['lockdownd'];
  }

  async connect() {
    this.setup();
    this.rpcClient = new _rpcClientRealDevice.default({
      bundleId: this.bundleId,
      platformVersion: this.platformVersion,
      isSafari: this.isSafari,
      host: this.host,
      port: this.port,
      socketPath: this.socketPath,
      specialMessageHandlers: this.specialCbs,
      messageProxy: this.remoteDebugProxy,
      logAllCommunication: this.logAllCommunication,
      logAllCommunicationHexDump: this.logAllCommunicationHexDump,
      socketChunkSize: this.socketChunkSize,
      udid: this.udid
    });
    await this.rpcClient.connect();

    try {
      const appInfo = await this.setConnectionKey();

      _logger.default.debug('Connected to application');

      return appInfo;
    } catch (err) {
      await this.disconnect();
      return null;
    }
  }

}

exports.default = RemoteDebuggerRealDevice;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9yZW1vdGUtZGVidWdnZXItcmVhbC1kZXZpY2UuanMiXSwibmFtZXMiOlsiUmVtb3RlRGVidWdnZXJSZWFsRGV2aWNlIiwiUmVtb3RlRGVidWdnZXIiLCJjb25zdHJ1Y3RvciIsIm9wdHMiLCJ1ZGlkIiwic2tpcHBlZEFwcHMiLCJjb25uZWN0Iiwic2V0dXAiLCJycGNDbGllbnQiLCJScGNDbGllbnRSZWFsRGV2aWNlIiwiYnVuZGxlSWQiLCJwbGF0Zm9ybVZlcnNpb24iLCJpc1NhZmFyaSIsImhvc3QiLCJwb3J0Iiwic29ja2V0UGF0aCIsInNwZWNpYWxNZXNzYWdlSGFuZGxlcnMiLCJzcGVjaWFsQ2JzIiwibWVzc2FnZVByb3h5IiwicmVtb3RlRGVidWdQcm94eSIsImxvZ0FsbENvbW11bmljYXRpb24iLCJsb2dBbGxDb21tdW5pY2F0aW9uSGV4RHVtcCIsInNvY2tldENodW5rU2l6ZSIsImFwcEluZm8iLCJzZXRDb25uZWN0aW9uS2V5IiwibG9nIiwiZGVidWciLCJlcnIiLCJkaXNjb25uZWN0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUdlLE1BQU1BLHdCQUFOLFNBQXVDQyw4QkFBdkMsQ0FBc0Q7QUFDbkVDLEVBQUFBLFdBQVcsQ0FBRUMsSUFBSSxHQUFHLEVBQVQsRUFBYTtBQUN0QixVQUFNQSxJQUFOO0FBRUEsU0FBS0MsSUFBTCxHQUFZRCxJQUFJLENBQUNDLElBQWpCO0FBRUEsU0FBS0MsV0FBTCxHQUFtQixDQUFDLFdBQUQsQ0FBbkI7QUFDRDs7QUFFRCxRQUFNQyxPQUFOLEdBQWlCO0FBQ2YsU0FBS0MsS0FBTDtBQUdBLFNBQUtDLFNBQUwsR0FBaUIsSUFBSUMsNEJBQUosQ0FBd0I7QUFDdkNDLE1BQUFBLFFBQVEsRUFBRSxLQUFLQSxRQUR3QjtBQUV2Q0MsTUFBQUEsZUFBZSxFQUFFLEtBQUtBLGVBRmlCO0FBR3ZDQyxNQUFBQSxRQUFRLEVBQUUsS0FBS0EsUUFId0I7QUFJdkNDLE1BQUFBLElBQUksRUFBRSxLQUFLQSxJQUo0QjtBQUt2Q0MsTUFBQUEsSUFBSSxFQUFFLEtBQUtBLElBTDRCO0FBTXZDQyxNQUFBQSxVQUFVLEVBQUUsS0FBS0EsVUFOc0I7QUFPdkNDLE1BQUFBLHNCQUFzQixFQUFFLEtBQUtDLFVBUFU7QUFRdkNDLE1BQUFBLFlBQVksRUFBRSxLQUFLQyxnQkFSb0I7QUFTdkNDLE1BQUFBLG1CQUFtQixFQUFFLEtBQUtBLG1CQVRhO0FBVXZDQyxNQUFBQSwwQkFBMEIsRUFBRSxLQUFLQSwwQkFWTTtBQVd2Q0MsTUFBQUEsZUFBZSxFQUFFLEtBQUtBLGVBWGlCO0FBWXZDbEIsTUFBQUEsSUFBSSxFQUFFLEtBQUtBO0FBWjRCLEtBQXhCLENBQWpCO0FBY0EsVUFBTSxLQUFLSSxTQUFMLENBQWVGLE9BQWYsRUFBTjs7QUFHQSxRQUFJO0FBQ0YsWUFBTWlCLE9BQU8sR0FBRyxNQUFNLEtBQUtDLGdCQUFMLEVBQXRCOztBQUNBQyxzQkFBSUMsS0FBSixDQUFVLDBCQUFWOztBQUNBLGFBQU9ILE9BQVA7QUFDRCxLQUpELENBSUUsT0FBT0ksR0FBUCxFQUFZO0FBQ1osWUFBTSxLQUFLQyxVQUFMLEVBQU47QUFDQSxhQUFPLElBQVA7QUFDRDtBQUNGOztBQXRDa0UiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7IFJlbW90ZURlYnVnZ2VyIH0gZnJvbSAnLi9yZW1vdGUtZGVidWdnZXInO1xuaW1wb3J0IFJwY0NsaWVudFJlYWxEZXZpY2UgZnJvbSAnLi9ycGMtY2xpZW50LXJlYWwtZGV2aWNlJztcblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZW1vdGVEZWJ1Z2dlclJlYWxEZXZpY2UgZXh0ZW5kcyBSZW1vdGVEZWJ1Z2dlciB7XG4gIGNvbnN0cnVjdG9yIChvcHRzID0ge30pIHtcbiAgICBzdXBlcihvcHRzKTtcblxuICAgIHRoaXMudWRpZCA9IG9wdHMudWRpZDtcblxuICAgIHRoaXMuc2tpcHBlZEFwcHMgPSBbJ2xvY2tkb3duZCddO1xuICB9XG5cbiAgYXN5bmMgY29ubmVjdCAoKSB7XG4gICAgdGhpcy5zZXR1cCgpO1xuXG4gICAgLy8gaW5pdGlhbGl6ZSB0aGUgcnBjIGNsaWVudFxuICAgIHRoaXMucnBjQ2xpZW50ID0gbmV3IFJwY0NsaWVudFJlYWxEZXZpY2Uoe1xuICAgICAgYnVuZGxlSWQ6IHRoaXMuYnVuZGxlSWQsXG4gICAgICBwbGF0Zm9ybVZlcnNpb246IHRoaXMucGxhdGZvcm1WZXJzaW9uLFxuICAgICAgaXNTYWZhcmk6IHRoaXMuaXNTYWZhcmksXG4gICAgICBob3N0OiB0aGlzLmhvc3QsXG4gICAgICBwb3J0OiB0aGlzLnBvcnQsXG4gICAgICBzb2NrZXRQYXRoOiB0aGlzLnNvY2tldFBhdGgsXG4gICAgICBzcGVjaWFsTWVzc2FnZUhhbmRsZXJzOiB0aGlzLnNwZWNpYWxDYnMsXG4gICAgICBtZXNzYWdlUHJveHk6IHRoaXMucmVtb3RlRGVidWdQcm94eSxcbiAgICAgIGxvZ0FsbENvbW11bmljYXRpb246IHRoaXMubG9nQWxsQ29tbXVuaWNhdGlvbixcbiAgICAgIGxvZ0FsbENvbW11bmljYXRpb25IZXhEdW1wOiB0aGlzLmxvZ0FsbENvbW11bmljYXRpb25IZXhEdW1wLFxuICAgICAgc29ja2V0Q2h1bmtTaXplOiB0aGlzLnNvY2tldENodW5rU2l6ZSxcbiAgICAgIHVkaWQ6IHRoaXMudWRpZFxuICAgIH0pO1xuICAgIGF3YWl0IHRoaXMucnBjQ2xpZW50LmNvbm5lY3QoKTtcblxuICAgIC8vIGdldCB0aGUgY29ubmVjdGlvbiBpbmZvcm1hdGlvbiBhYm91dCB0aGUgYXBwXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGFwcEluZm8gPSBhd2FpdCB0aGlzLnNldENvbm5lY3Rpb25LZXkoKTtcbiAgICAgIGxvZy5kZWJ1ZygnQ29ubmVjdGVkIHRvIGFwcGxpY2F0aW9uJyk7XG4gICAgICByZXR1cm4gYXBwSW5mbztcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGF3YWl0IHRoaXMuZGlzY29ubmVjdCgpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG59XG4iXSwiZmlsZSI6ImxpYi9yZW1vdGUtZGVidWdnZXItcmVhbC1kZXZpY2UuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
