"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.StreamLogger = void 0;

require("source-map-support/register");

var _stream = _interopRequireDefault(require("stream"));

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("../../logger"));

const MIN_PRINTABLE_CHAR = 32;
const MAX_PRINTABLE_CHAR = 126;
const CHARACTERS_PER_LINE = 19;

class StreamLogger extends _stream.default.Transform {
  constructor(direction, verbose = false) {
    super({
      objectMode: true
    });
    this._direction = direction;
    this._verbose = verbose;
  }

  _transform(data, encoding, callback) {
    if (this._verbose) {
      try {
        this._log(data);
      } catch (err) {
        _logger.default.debug(`Error logging data: ${err.message}`);
      }
    }

    this.push(data);
    callback();
  }

  _log(data) {
    _logger.default.debug(`Data ${this._direction === StreamLogger.SEND ? 'sent' : 'received'}, length: ${data.length}`);

    let i = 0;

    while (i < data.length) {
      let hex = [],
          char = [];

      for (let j = 0; j < CHARACTERS_PER_LINE; j++) {
        if (i >= data.length) {
          hex[j] = '  ';
          continue;
        }

        const charCode = data[i++];
        hex[j] = _lodash.default.padStart(charCode.toString(16).toUpperCase(), 2, '0');
        char[j] = charCode < MIN_PRINTABLE_CHAR || charCode > MAX_PRINTABLE_CHAR ? '.' : String.fromCharCode(charCode);
      }

      _logger.default.debug(`${hex.join(' ')} ${char.join('')}`);
    }
  }

}

exports.StreamLogger = StreamLogger;
StreamLogger.SEND = 0;
StreamLogger.RECEIVE = 1;
var _default = StreamLogger;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi91dGlsL3RyYW5zZm9ybWVyL3N0cmVhbS1sb2dnZXIuanMiXSwibmFtZXMiOlsiTUlOX1BSSU5UQUJMRV9DSEFSIiwiTUFYX1BSSU5UQUJMRV9DSEFSIiwiQ0hBUkFDVEVSU19QRVJfTElORSIsIlN0cmVhbUxvZ2dlciIsIlN0cmVhbSIsIlRyYW5zZm9ybSIsImNvbnN0cnVjdG9yIiwiZGlyZWN0aW9uIiwidmVyYm9zZSIsIm9iamVjdE1vZGUiLCJfZGlyZWN0aW9uIiwiX3ZlcmJvc2UiLCJfdHJhbnNmb3JtIiwiZGF0YSIsImVuY29kaW5nIiwiY2FsbGJhY2siLCJfbG9nIiwiZXJyIiwibG9nIiwiZGVidWciLCJtZXNzYWdlIiwicHVzaCIsIlNFTkQiLCJsZW5ndGgiLCJpIiwiaGV4IiwiY2hhciIsImoiLCJjaGFyQ29kZSIsIl8iLCJwYWRTdGFydCIsInRvU3RyaW5nIiwidG9VcHBlckNhc2UiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJqb2luIiwiUkVDRUlWRSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQSxNQUFNQSxrQkFBa0IsR0FBRyxFQUEzQjtBQUNBLE1BQU1DLGtCQUFrQixHQUFHLEdBQTNCO0FBRUEsTUFBTUMsbUJBQW1CLEdBQUcsRUFBNUI7O0FBRUEsTUFBTUMsWUFBTixTQUEyQkMsZ0JBQU9DLFNBQWxDLENBQTRDO0FBQzFDQyxFQUFBQSxXQUFXLENBQUVDLFNBQUYsRUFBYUMsT0FBTyxHQUFHLEtBQXZCLEVBQThCO0FBQ3ZDLFVBQU07QUFBRUMsTUFBQUEsVUFBVSxFQUFFO0FBQWQsS0FBTjtBQUVBLFNBQUtDLFVBQUwsR0FBa0JILFNBQWxCO0FBQ0EsU0FBS0ksUUFBTCxHQUFnQkgsT0FBaEI7QUFDRDs7QUFFREksRUFBQUEsVUFBVSxDQUFFQyxJQUFGLEVBQVFDLFFBQVIsRUFBa0JDLFFBQWxCLEVBQTRCO0FBQ3BDLFFBQUksS0FBS0osUUFBVCxFQUFtQjtBQUNqQixVQUFJO0FBQ0YsYUFBS0ssSUFBTCxDQUFVSCxJQUFWO0FBQ0QsT0FGRCxDQUVFLE9BQU9JLEdBQVAsRUFBWTtBQUdaQyx3QkFBSUMsS0FBSixDQUFXLHVCQUFzQkYsR0FBRyxDQUFDRyxPQUFRLEVBQTdDO0FBQ0Q7QUFDRjs7QUFFRCxTQUFLQyxJQUFMLENBQVVSLElBQVY7QUFDQUUsSUFBQUEsUUFBUTtBQUNUOztBQUVEQyxFQUFBQSxJQUFJLENBQUVILElBQUYsRUFBUTtBQUNWSyxvQkFBSUMsS0FBSixDQUFXLFFBQU8sS0FBS1QsVUFBTCxLQUFvQlAsWUFBWSxDQUFDbUIsSUFBakMsR0FBd0MsTUFBeEMsR0FBaUQsVUFBVyxhQUFZVCxJQUFJLENBQUNVLE1BQU8sRUFBdEc7O0FBS0EsUUFBSUMsQ0FBQyxHQUFHLENBQVI7O0FBQ0EsV0FBT0EsQ0FBQyxHQUFHWCxJQUFJLENBQUNVLE1BQWhCLEVBQXdCO0FBQ3RCLFVBQUlFLEdBQUcsR0FBRyxFQUFWO0FBQUEsVUFBY0MsSUFBSSxHQUFHLEVBQXJCOztBQUVBLFdBQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR3pCLG1CQUFwQixFQUF5Q3lCLENBQUMsRUFBMUMsRUFBOEM7QUFDNUMsWUFBSUgsQ0FBQyxJQUFJWCxJQUFJLENBQUNVLE1BQWQsRUFBc0I7QUFHcEJFLFVBQUFBLEdBQUcsQ0FBQ0UsQ0FBRCxDQUFILEdBQVMsSUFBVDtBQUNBO0FBQ0Q7O0FBQ0QsY0FBTUMsUUFBUSxHQUFHZixJQUFJLENBQUNXLENBQUMsRUFBRixDQUFyQjtBQUVBQyxRQUFBQSxHQUFHLENBQUNFLENBQUQsQ0FBSCxHQUFTRSxnQkFBRUMsUUFBRixDQUFXRixRQUFRLENBQUNHLFFBQVQsQ0FBa0IsRUFBbEIsRUFBc0JDLFdBQXRCLEVBQVgsRUFBZ0QsQ0FBaEQsRUFBbUQsR0FBbkQsQ0FBVDtBQUVBTixRQUFBQSxJQUFJLENBQUNDLENBQUQsQ0FBSixHQUFVQyxRQUFRLEdBQUc1QixrQkFBWCxJQUFpQzRCLFFBQVEsR0FBRzNCLGtCQUE1QyxHQUNOLEdBRE0sR0FFTmdDLE1BQU0sQ0FBQ0MsWUFBUCxDQUFvQk4sUUFBcEIsQ0FGSjtBQUdEOztBQUNEVixzQkFBSUMsS0FBSixDQUFXLEdBQUVNLEdBQUcsQ0FBQ1UsSUFBSixDQUFTLEdBQVQsQ0FBYyxJQUFHVCxJQUFJLENBQUNTLElBQUwsQ0FBVSxFQUFWLENBQWMsRUFBNUM7QUFDRDtBQUNGOztBQWxEeUM7OztBQXFENUNoQyxZQUFZLENBQUNtQixJQUFiLEdBQW9CLENBQXBCO0FBQ0FuQixZQUFZLENBQUNpQyxPQUFiLEdBQXVCLENBQXZCO2VBR2VqQyxZIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgcHJvbWlzZS9wcmVmZXItYXdhaXQtdG8tY2FsbGJhY2tzICovXG5pbXBvcnQgU3RyZWFtIGZyb20gJ3N0cmVhbSc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IGxvZyBmcm9tICcuLi8uLi9sb2dnZXInO1xuXG5cbmNvbnN0IE1JTl9QUklOVEFCTEVfQ0hBUiA9IDMyO1xuY29uc3QgTUFYX1BSSU5UQUJMRV9DSEFSID0gMTI2O1xuXG5jb25zdCBDSEFSQUNURVJTX1BFUl9MSU5FID0gMTk7XG5cbmNsYXNzIFN0cmVhbUxvZ2dlciBleHRlbmRzIFN0cmVhbS5UcmFuc2Zvcm0ge1xuICBjb25zdHJ1Y3RvciAoZGlyZWN0aW9uLCB2ZXJib3NlID0gZmFsc2UpIHtcbiAgICBzdXBlcih7IG9iamVjdE1vZGU6IHRydWUgfSk7XG5cbiAgICB0aGlzLl9kaXJlY3Rpb24gPSBkaXJlY3Rpb247XG4gICAgdGhpcy5fdmVyYm9zZSA9IHZlcmJvc2U7XG4gIH1cblxuICBfdHJhbnNmb3JtIChkYXRhLCBlbmNvZGluZywgY2FsbGJhY2spIHtcbiAgICBpZiAodGhpcy5fdmVyYm9zZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy5fbG9nKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIC8vIGluIGNhc2Ugc29tZXRoaW5nIGdvZXMgd3JvbmcsIGxvZyBpdCBzbyB3ZSBjYW4gZml4IHRoZSBwYXJzaW5nXG4gICAgICAgIC8vIGFuZCBhbHNvIGFsbG93IGV2ZXJ5dGhpbmcgdG8gY29udGludWUgd2l0aG91dCBpbnRlcnJ1cHRpb25cbiAgICAgICAgbG9nLmRlYnVnKGBFcnJvciBsb2dnaW5nIGRhdGE6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5wdXNoKGRhdGEpO1xuICAgIGNhbGxiYWNrKCk7XG4gIH1cblxuICBfbG9nIChkYXRhKSB7XG4gICAgbG9nLmRlYnVnKGBEYXRhICR7dGhpcy5fZGlyZWN0aW9uID09PSBTdHJlYW1Mb2dnZXIuU0VORCA/ICdzZW50JyA6ICdyZWNlaXZlZCd9LCBsZW5ndGg6ICR7ZGF0YS5sZW5ndGh9YCk7XG5cbiAgICAvLyBmb3JtYXQgYXMgdXNlZCBieSBpb3Mtd2Via2l0LWRlYnVnLXByb3h5IGFzIHdlbGwgYXMgdG9vbHMgbGlrZSBzb2NhdFxuICAgIC8vIHByaW50IG91dCB0aGUgZGF0YSBpbiB0d28gc2VjdGlvbnMsIG9uZSB0aGUgaGV4YWRlY2ltYWwgcmVuZGVyaW5ncyBvZiB0aGUgY2hhcmFjdGVycyxcbiAgICAvLyB0aGUgb3RoZXIgdGhlIHByaW50YWJsZSBjaGFyYWN0ZXJzICh3aXRoICcuJyBmb3IgdW5wcmludGFibGUgY2hhcmFjdGVycykuXG4gICAgbGV0IGkgPSAwO1xuICAgIHdoaWxlIChpIDwgZGF0YS5sZW5ndGgpIHtcbiAgICAgIGxldCBoZXggPSBbXSwgY2hhciA9IFtdO1xuICAgICAgLy8gY3JlYXRlIGVhY2ggbGluZSBvZiB0ZXh0IHRvIG91dHB1dFxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBDSEFSQUNURVJTX1BFUl9MSU5FOyBqKyspIHtcbiAgICAgICAgaWYgKGkgPj0gZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAvLyBmaWxsIGluIHRoZSBjaGFyY29kZSBzZWN0aW9uIHdpdGggYmxhbmtzLCBmb3IgZm9ybWF0dGluZyxcbiAgICAgICAgICAvLyB3aGVuIHRoZXJlIGlzIG5vIG1vcmUgZGF0YVxuICAgICAgICAgIGhleFtqXSA9ICcgICc7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2hhckNvZGUgPSBkYXRhW2krK107XG4gICAgICAgIC8vIGhleGFkZWNpbWFsIHJlcHJlc2VudGF0aW9uLCBmb3JjZWQgaW50byAyIHBsYWNlc1xuICAgICAgICBoZXhbal0gPSBfLnBhZFN0YXJ0KGNoYXJDb2RlLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpLCAyLCAnMCcpO1xuICAgICAgICAvLyBjaGFyYWN0ZXIgcmVwcmVzZW50YXRpb24sIHdpdGggJy4nIHdoZW4gdW5wcmludGFibGVcbiAgICAgICAgY2hhcltqXSA9IGNoYXJDb2RlIDwgTUlOX1BSSU5UQUJMRV9DSEFSIHx8IGNoYXJDb2RlID4gTUFYX1BSSU5UQUJMRV9DSEFSXG4gICAgICAgICAgPyAnLidcbiAgICAgICAgICA6IFN0cmluZy5mcm9tQ2hhckNvZGUoY2hhckNvZGUpO1xuICAgICAgfVxuICAgICAgbG9nLmRlYnVnKGAke2hleC5qb2luKCcgJyl9ICR7Y2hhci5qb2luKCcnKX1gKTtcbiAgICB9XG4gIH1cbn1cblxuU3RyZWFtTG9nZ2VyLlNFTkQgPSAwO1xuU3RyZWFtTG9nZ2VyLlJFQ0VJVkUgPSAxO1xuXG5leHBvcnQgeyBTdHJlYW1Mb2dnZXIgfTtcbmV4cG9ydCBkZWZhdWx0IFN0cmVhbUxvZ2dlcjtcbiJdLCJmaWxlIjoibGliL3V0aWwvdHJhbnNmb3JtZXIvc3RyZWFtLWxvZ2dlci5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLiJ9
