"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.UsbmuxEncoder = void 0;

require("source-map-support/register");

var _stream = _interopRequireDefault(require("stream"));

var _appiumSupport = require("appium-support");

const HEADER_LENGTH = 16;
const VERSION = 1;
const TYPE = 8;

class UsbmuxEncoder extends _stream.default.Transform {
  constructor() {
    super({
      objectMode: true
    });
  }

  _transform(data, encoding, callback) {
    this._encode(data);

    callback();
  }

  _encode(data) {
    const payloadBuffer = Buffer.from(_appiumSupport.plist.createPlist(data.payload, false));
    const header = {
      length: HEADER_LENGTH + payloadBuffer.length,
      version: VERSION,
      type: TYPE,
      tag: data.tag
    };
    const headerBuffer = Buffer.allocUnsafe(HEADER_LENGTH);
    headerBuffer.writeUInt32LE(header.length, 0);
    headerBuffer.writeUInt32LE(header.version, 4);
    headerBuffer.writeUInt32LE(header.type, 8);
    headerBuffer.writeUInt32LE(header.tag, 12);
    this.push(Buffer.concat([headerBuffer, payloadBuffer], headerBuffer.length + payloadBuffer.length));
  }

}

exports.UsbmuxEncoder = UsbmuxEncoder;
var _default = UsbmuxEncoder;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi91c2JtdXgvdHJhbnNmb3JtZXIvdXNibXV4LWVuY29kZXIuanMiXSwibmFtZXMiOlsiSEVBREVSX0xFTkdUSCIsIlZFUlNJT04iLCJUWVBFIiwiVXNibXV4RW5jb2RlciIsIlN0cmVhbSIsIlRyYW5zZm9ybSIsImNvbnN0cnVjdG9yIiwib2JqZWN0TW9kZSIsIl90cmFuc2Zvcm0iLCJkYXRhIiwiZW5jb2RpbmciLCJjYWxsYmFjayIsIl9lbmNvZGUiLCJwYXlsb2FkQnVmZmVyIiwiQnVmZmVyIiwiZnJvbSIsInBsaXN0IiwiY3JlYXRlUGxpc3QiLCJwYXlsb2FkIiwiaGVhZGVyIiwibGVuZ3RoIiwidmVyc2lvbiIsInR5cGUiLCJ0YWciLCJoZWFkZXJCdWZmZXIiLCJhbGxvY1Vuc2FmZSIsIndyaXRlVUludDMyTEUiLCJwdXNoIiwiY29uY2F0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUNBOztBQUNBOztBQUVBLE1BQU1BLGFBQWEsR0FBRyxFQUF0QjtBQUNBLE1BQU1DLE9BQU8sR0FBRyxDQUFoQjtBQUNBLE1BQU1DLElBQUksR0FBRyxDQUFiOztBQUVBLE1BQU1DLGFBQU4sU0FBNEJDLGdCQUFPQyxTQUFuQyxDQUE2QztBQUMzQ0MsRUFBQUEsV0FBVyxHQUFJO0FBQ2IsVUFBTTtBQUFFQyxNQUFBQSxVQUFVLEVBQUU7QUFBZCxLQUFOO0FBQ0Q7O0FBRURDLEVBQUFBLFVBQVUsQ0FBRUMsSUFBRixFQUFRQyxRQUFSLEVBQWtCQyxRQUFsQixFQUE0QjtBQUNwQyxTQUFLQyxPQUFMLENBQWFILElBQWI7O0FBQ0FFLElBQUFBLFFBQVE7QUFDVDs7QUFFREMsRUFBQUEsT0FBTyxDQUFFSCxJQUFGLEVBQVE7QUFDYixVQUFNSSxhQUFhLEdBQUdDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZQyxxQkFBTUMsV0FBTixDQUFrQlIsSUFBSSxDQUFDUyxPQUF2QixFQUFnQyxLQUFoQyxDQUFaLENBQXRCO0FBRUEsVUFBTUMsTUFBTSxHQUFHO0FBQ2JDLE1BQUFBLE1BQU0sRUFBRXBCLGFBQWEsR0FBR2EsYUFBYSxDQUFDTyxNQUR6QjtBQUViQyxNQUFBQSxPQUFPLEVBQUVwQixPQUZJO0FBR2JxQixNQUFBQSxJQUFJLEVBQUVwQixJQUhPO0FBSWJxQixNQUFBQSxHQUFHLEVBQUVkLElBQUksQ0FBQ2M7QUFKRyxLQUFmO0FBT0EsVUFBTUMsWUFBWSxHQUFHVixNQUFNLENBQUNXLFdBQVAsQ0FBbUJ6QixhQUFuQixDQUFyQjtBQUNBd0IsSUFBQUEsWUFBWSxDQUFDRSxhQUFiLENBQTJCUCxNQUFNLENBQUNDLE1BQWxDLEVBQTBDLENBQTFDO0FBQ0FJLElBQUFBLFlBQVksQ0FBQ0UsYUFBYixDQUEyQlAsTUFBTSxDQUFDRSxPQUFsQyxFQUEyQyxDQUEzQztBQUNBRyxJQUFBQSxZQUFZLENBQUNFLGFBQWIsQ0FBMkJQLE1BQU0sQ0FBQ0csSUFBbEMsRUFBd0MsQ0FBeEM7QUFDQUUsSUFBQUEsWUFBWSxDQUFDRSxhQUFiLENBQTJCUCxNQUFNLENBQUNJLEdBQWxDLEVBQXVDLEVBQXZDO0FBRUEsU0FBS0ksSUFBTCxDQUFVYixNQUFNLENBQUNjLE1BQVAsQ0FBYyxDQUFDSixZQUFELEVBQWVYLGFBQWYsQ0FBZCxFQUE2Q1csWUFBWSxDQUFDSixNQUFiLEdBQXNCUCxhQUFhLENBQUNPLE1BQWpGLENBQVY7QUFDRDs7QUEzQjBDOzs7ZUErQjlCakIsYSIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIHByb21pc2UvcHJlZmVyLWF3YWl0LXRvLWNhbGxiYWNrcyAqL1xuaW1wb3J0IFN0cmVhbSBmcm9tICdzdHJlYW0nO1xuaW1wb3J0IHsgcGxpc3QgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5cbmNvbnN0IEhFQURFUl9MRU5HVEggPSAxNjtcbmNvbnN0IFZFUlNJT04gPSAxO1xuY29uc3QgVFlQRSA9IDg7XG5cbmNsYXNzIFVzYm11eEVuY29kZXIgZXh0ZW5kcyBTdHJlYW0uVHJhbnNmb3JtIHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHN1cGVyKHsgb2JqZWN0TW9kZTogdHJ1ZSB9KTtcbiAgfVxuXG4gIF90cmFuc2Zvcm0gKGRhdGEsIGVuY29kaW5nLCBjYWxsYmFjaykge1xuICAgIHRoaXMuX2VuY29kZShkYXRhKTtcbiAgICBjYWxsYmFjaygpO1xuICB9XG5cbiAgX2VuY29kZSAoZGF0YSkge1xuICAgIGNvbnN0IHBheWxvYWRCdWZmZXIgPSBCdWZmZXIuZnJvbShwbGlzdC5jcmVhdGVQbGlzdChkYXRhLnBheWxvYWQsIGZhbHNlKSk7XG5cbiAgICBjb25zdCBoZWFkZXIgPSB7XG4gICAgICBsZW5ndGg6IEhFQURFUl9MRU5HVEggKyBwYXlsb2FkQnVmZmVyLmxlbmd0aCxcbiAgICAgIHZlcnNpb246IFZFUlNJT04sXG4gICAgICB0eXBlOiBUWVBFLFxuICAgICAgdGFnOiBkYXRhLnRhZ1xuICAgIH07XG5cbiAgICBjb25zdCBoZWFkZXJCdWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUoSEVBREVSX0xFTkdUSCk7XG4gICAgaGVhZGVyQnVmZmVyLndyaXRlVUludDMyTEUoaGVhZGVyLmxlbmd0aCwgMCk7XG4gICAgaGVhZGVyQnVmZmVyLndyaXRlVUludDMyTEUoaGVhZGVyLnZlcnNpb24sIDQpO1xuICAgIGhlYWRlckJ1ZmZlci53cml0ZVVJbnQzMkxFKGhlYWRlci50eXBlLCA4KTtcbiAgICBoZWFkZXJCdWZmZXIud3JpdGVVSW50MzJMRShoZWFkZXIudGFnLCAxMik7XG5cbiAgICB0aGlzLnB1c2goQnVmZmVyLmNvbmNhdChbaGVhZGVyQnVmZmVyLCBwYXlsb2FkQnVmZmVyXSwgaGVhZGVyQnVmZmVyLmxlbmd0aCArIHBheWxvYWRCdWZmZXIubGVuZ3RoKSk7XG4gIH1cbn1cblxuZXhwb3J0IHsgVXNibXV4RW5jb2Rlcn07XG5leHBvcnQgZGVmYXVsdCBVc2JtdXhFbmNvZGVyO1xuIl0sImZpbGUiOiJsaWIvdXNibXV4L3RyYW5zZm9ybWVyL3VzYm11eC1lbmNvZGVyLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uLy4uIn0=
