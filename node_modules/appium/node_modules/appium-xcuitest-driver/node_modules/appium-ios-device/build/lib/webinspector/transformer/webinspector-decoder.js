"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.WebInspectorDecoder = void 0;

require("source-map-support/register");

var _stream = _interopRequireDefault(require("stream"));

var _appiumSupport = require("appium-support");

class WebInspectorDecoder extends _stream.default.Transform {
  constructor(maxLength) {
    super({
      objectMode: true
    });
    this._frameBufferIndex = 0;
    this._frameBuffer = Buffer.allocUnsafeSlow(maxLength);
  }

  _transform(data, encoding, callback) {
    this._decode(data);

    callback();
  }

  _decode(data) {
    if (data.WIRFinalMessageKey) {
      const buffer = data.WIRFinalMessageKey;
      this._frameBufferIndex += this._readBytes(buffer, 0, this._frameBuffer, this._frameBufferIndex, buffer.length);

      const pref = _appiumSupport.plist.parsePlist(this._frameBuffer.slice(0, this._frameBufferIndex));

      this.push(pref);

      this._resetBuffers();
    } else {
      const buffer = data.WIRPartialMessageKey;
      this._frameBufferIndex += this._readBytes(buffer, 0, this._frameBuffer, this._frameBufferIndex, buffer.length);
    }
  }

  _readBytes(src, srcIndex, target, targetIndex, nBytesToBeRead) {
    let availableBytes = Math.min(nBytesToBeRead, src.length - srcIndex);
    src.copy(target, targetIndex, srcIndex, srcIndex + availableBytes);
    return availableBytes;
  }

  _resetBuffers() {
    this._frameBufferIndex = 0;
  }

}

exports.WebInspectorDecoder = WebInspectorDecoder;
var _default = WebInspectorDecoder;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi93ZWJpbnNwZWN0b3IvdHJhbnNmb3JtZXIvd2ViaW5zcGVjdG9yLWRlY29kZXIuanMiXSwibmFtZXMiOlsiV2ViSW5zcGVjdG9yRGVjb2RlciIsIlN0cmVhbSIsIlRyYW5zZm9ybSIsImNvbnN0cnVjdG9yIiwibWF4TGVuZ3RoIiwib2JqZWN0TW9kZSIsIl9mcmFtZUJ1ZmZlckluZGV4IiwiX2ZyYW1lQnVmZmVyIiwiQnVmZmVyIiwiYWxsb2NVbnNhZmVTbG93IiwiX3RyYW5zZm9ybSIsImRhdGEiLCJlbmNvZGluZyIsImNhbGxiYWNrIiwiX2RlY29kZSIsIldJUkZpbmFsTWVzc2FnZUtleSIsImJ1ZmZlciIsIl9yZWFkQnl0ZXMiLCJsZW5ndGgiLCJwcmVmIiwicGxpc3QiLCJwYXJzZVBsaXN0Iiwic2xpY2UiLCJwdXNoIiwiX3Jlc2V0QnVmZmVycyIsIldJUlBhcnRpYWxNZXNzYWdlS2V5Iiwic3JjIiwic3JjSW5kZXgiLCJ0YXJnZXQiLCJ0YXJnZXRJbmRleCIsIm5CeXRlc1RvQmVSZWFkIiwiYXZhaWxhYmxlQnl0ZXMiLCJNYXRoIiwibWluIiwiY29weSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFDQTs7QUFDQTs7QUFHQSxNQUFNQSxtQkFBTixTQUFrQ0MsZ0JBQU9DLFNBQXpDLENBQW1EO0FBQ2pEQyxFQUFBQSxXQUFXLENBQUVDLFNBQUYsRUFBYTtBQUN0QixVQUFNO0FBQUVDLE1BQUFBLFVBQVUsRUFBRTtBQUFkLEtBQU47QUFDQSxTQUFLQyxpQkFBTCxHQUF5QixDQUF6QjtBQUNBLFNBQUtDLFlBQUwsR0FBb0JDLE1BQU0sQ0FBQ0MsZUFBUCxDQUF1QkwsU0FBdkIsQ0FBcEI7QUFDRDs7QUFFRE0sRUFBQUEsVUFBVSxDQUFFQyxJQUFGLEVBQVFDLFFBQVIsRUFBa0JDLFFBQWxCLEVBQTRCO0FBQ3BDLFNBQUtDLE9BQUwsQ0FBYUgsSUFBYjs7QUFDQUUsSUFBQUEsUUFBUTtBQUNUOztBQUVEQyxFQUFBQSxPQUFPLENBQUVILElBQUYsRUFBUTtBQUNiLFFBQUlBLElBQUksQ0FBQ0ksa0JBQVQsRUFBNkI7QUFDM0IsWUFBTUMsTUFBTSxHQUFHTCxJQUFJLENBQUNJLGtCQUFwQjtBQUNBLFdBQUtULGlCQUFMLElBQTBCLEtBQUtXLFVBQUwsQ0FBZ0JELE1BQWhCLEVBQXdCLENBQXhCLEVBQTJCLEtBQUtULFlBQWhDLEVBQThDLEtBQUtELGlCQUFuRCxFQUFzRVUsTUFBTSxDQUFDRSxNQUE3RSxDQUExQjs7QUFDQSxZQUFNQyxJQUFJLEdBQUdDLHFCQUFNQyxVQUFOLENBQWlCLEtBQUtkLFlBQUwsQ0FBa0JlLEtBQWxCLENBQXdCLENBQXhCLEVBQTJCLEtBQUtoQixpQkFBaEMsQ0FBakIsQ0FBYjs7QUFDQSxXQUFLaUIsSUFBTCxDQUFVSixJQUFWOztBQUNBLFdBQUtLLGFBQUw7QUFDRCxLQU5ELE1BTU87QUFDTCxZQUFNUixNQUFNLEdBQUdMLElBQUksQ0FBQ2Msb0JBQXBCO0FBQ0EsV0FBS25CLGlCQUFMLElBQTBCLEtBQUtXLFVBQUwsQ0FBZ0JELE1BQWhCLEVBQXdCLENBQXhCLEVBQTJCLEtBQUtULFlBQWhDLEVBQThDLEtBQUtELGlCQUFuRCxFQUFzRVUsTUFBTSxDQUFDRSxNQUE3RSxDQUExQjtBQUNEO0FBQ0Y7O0FBRURELEVBQUFBLFVBQVUsQ0FBRVMsR0FBRixFQUFPQyxRQUFQLEVBQWlCQyxNQUFqQixFQUF5QkMsV0FBekIsRUFBc0NDLGNBQXRDLEVBQXNEO0FBQzlELFFBQUlDLGNBQWMsR0FBR0MsSUFBSSxDQUFDQyxHQUFMLENBQVNILGNBQVQsRUFBeUJKLEdBQUcsQ0FBQ1IsTUFBSixHQUFhUyxRQUF0QyxDQUFyQjtBQUNBRCxJQUFBQSxHQUFHLENBQUNRLElBQUosQ0FBU04sTUFBVCxFQUFpQkMsV0FBakIsRUFBOEJGLFFBQTlCLEVBQXdDQSxRQUFRLEdBQUdJLGNBQW5EO0FBQ0EsV0FBT0EsY0FBUDtBQUNEOztBQUVEUCxFQUFBQSxhQUFhLEdBQUk7QUFDZixTQUFLbEIsaUJBQUwsR0FBeUIsQ0FBekI7QUFDRDs7QUFqQ2dEOzs7ZUFxQ3BDTixtQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIHByb21pc2UvcHJlZmVyLWF3YWl0LXRvLWNhbGxiYWNrcyAqL1xuaW1wb3J0IFN0cmVhbSBmcm9tICdzdHJlYW0nO1xuaW1wb3J0IHsgcGxpc3QgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5cblxuY2xhc3MgV2ViSW5zcGVjdG9yRGVjb2RlciBleHRlbmRzIFN0cmVhbS5UcmFuc2Zvcm0ge1xuICBjb25zdHJ1Y3RvciAobWF4TGVuZ3RoKSB7XG4gICAgc3VwZXIoeyBvYmplY3RNb2RlOiB0cnVlIH0pO1xuICAgIHRoaXMuX2ZyYW1lQnVmZmVySW5kZXggPSAwO1xuICAgIHRoaXMuX2ZyYW1lQnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyhtYXhMZW5ndGgpO1xuICB9XG5cbiAgX3RyYW5zZm9ybSAoZGF0YSwgZW5jb2RpbmcsIGNhbGxiYWNrKSB7XG4gICAgdGhpcy5fZGVjb2RlKGRhdGEpO1xuICAgIGNhbGxiYWNrKCk7XG4gIH1cblxuICBfZGVjb2RlIChkYXRhKSB7XG4gICAgaWYgKGRhdGEuV0lSRmluYWxNZXNzYWdlS2V5KSB7XG4gICAgICBjb25zdCBidWZmZXIgPSBkYXRhLldJUkZpbmFsTWVzc2FnZUtleTtcbiAgICAgIHRoaXMuX2ZyYW1lQnVmZmVySW5kZXggKz0gdGhpcy5fcmVhZEJ5dGVzKGJ1ZmZlciwgMCwgdGhpcy5fZnJhbWVCdWZmZXIsIHRoaXMuX2ZyYW1lQnVmZmVySW5kZXgsIGJ1ZmZlci5sZW5ndGgpO1xuICAgICAgY29uc3QgcHJlZiA9IHBsaXN0LnBhcnNlUGxpc3QodGhpcy5fZnJhbWVCdWZmZXIuc2xpY2UoMCwgdGhpcy5fZnJhbWVCdWZmZXJJbmRleCkpO1xuICAgICAgdGhpcy5wdXNoKHByZWYpO1xuICAgICAgdGhpcy5fcmVzZXRCdWZmZXJzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGJ1ZmZlciA9IGRhdGEuV0lSUGFydGlhbE1lc3NhZ2VLZXk7XG4gICAgICB0aGlzLl9mcmFtZUJ1ZmZlckluZGV4ICs9IHRoaXMuX3JlYWRCeXRlcyhidWZmZXIsIDAsIHRoaXMuX2ZyYW1lQnVmZmVyLCB0aGlzLl9mcmFtZUJ1ZmZlckluZGV4LCBidWZmZXIubGVuZ3RoKTtcbiAgICB9XG4gIH1cblxuICBfcmVhZEJ5dGVzIChzcmMsIHNyY0luZGV4LCB0YXJnZXQsIHRhcmdldEluZGV4LCBuQnl0ZXNUb0JlUmVhZCkge1xuICAgIGxldCBhdmFpbGFibGVCeXRlcyA9IE1hdGgubWluKG5CeXRlc1RvQmVSZWFkLCBzcmMubGVuZ3RoIC0gc3JjSW5kZXgpO1xuICAgIHNyYy5jb3B5KHRhcmdldCwgdGFyZ2V0SW5kZXgsIHNyY0luZGV4LCBzcmNJbmRleCArIGF2YWlsYWJsZUJ5dGVzKTtcbiAgICByZXR1cm4gYXZhaWxhYmxlQnl0ZXM7XG4gIH1cblxuICBfcmVzZXRCdWZmZXJzICgpIHtcbiAgICB0aGlzLl9mcmFtZUJ1ZmZlckluZGV4ID0gMDtcbiAgfVxufVxuXG5leHBvcnQgeyBXZWJJbnNwZWN0b3JEZWNvZGVyIH07XG5leHBvcnQgZGVmYXVsdCBXZWJJbnNwZWN0b3JEZWNvZGVyO1xuIl0sImZpbGUiOiJsaWIvd2ViaW5zcGVjdG9yL3RyYW5zZm9ybWVyL3dlYmluc3BlY3Rvci1kZWNvZGVyLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uLy4uIn0=
