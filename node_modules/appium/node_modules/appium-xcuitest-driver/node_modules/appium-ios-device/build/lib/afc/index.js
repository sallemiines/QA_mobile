"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AFC_SERVICE_NAME = exports.AfcService = exports.default = void 0;

require("source-map-support/register");

var _lengthBasedSplitter = _interopRequireDefault(require("../util/transformer/length-based-splitter"));

var _protocol = require("./protocol");

var _streams = require("./streams");

var _afcencoder = _interopRequireDefault(require("./transformer/afcencoder"));

var _afcdecoder = _interopRequireDefault(require("./transformer/afcdecoder"));

var _constants = require("../constants");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _path = _interopRequireDefault(require("path"));

var _lodash = _interopRequireDefault(require("lodash"));

var _baseService = require("../base-service");

const AFC_SERVICE_NAME = 'com.apple.afc';
exports.AFC_SERVICE_NAME = AFC_SERVICE_NAME;
const NULL_DELIMETER_CODE = 0x00;
const IGNORED_PATHS = ['.', '..'];

class AfcService extends _baseService.BaseServiceSocket {
  constructor(socketClient) {
    super(socketClient);
    this._splitter = new _lengthBasedSplitter.default(true, _constants.MB, 8, 8, -8);
    this._decoder = new _afcdecoder.default();

    this._socketClient.pipe(this._splitter).pipe(this._decoder);

    this._encoder = new _afcencoder.default();

    this._encoder.pipe(this._socketClient);

    this._responseCallbacks = {};
    this._packetNumber = 0;

    this._decoder.on('data', this._handleData.bind(this));
  }

  _handleData(data) {
    const cb = this._responseCallbacks[data.packetNumber] || _lodash.default.noop();

    cb(data);
  }

  async createDirectory(path) {
    const {
      packetNumber,
      response
    } = this._createPacketPromise(`Create directory '${path}'`);

    const data = {
      opCode: _protocol.Operations.MAKE_DIR,
      packetNumber,
      headerPayload: Buffer.from(path)
    };

    this._encoder.write(data);

    const res = await response;

    this._checkStatus(res);
  }

  async deleteDirectory(path) {
    const {
      packetNumber,
      response
    } = this._createPacketPromise(`Delete directory '${path}'`);

    const data = {
      opCode: _protocol.Operations.REMOVE_PATH_AND_CONTENTS,
      packetNumber,
      headerPayload: Buffer.from(path)
    };

    this._encoder.write(data);

    const res = await response;

    this._checkStatus(res);
  }

  async listDirectory(path) {
    const {
      packetNumber,
      response
    } = this._createPacketPromise(`List directory '${path}'`);

    const data = {
      opCode: _protocol.Operations.READ_DIR,
      packetNumber,
      headerPayload: Buffer.from(path)
    };

    this._encoder.write(data);

    const res = await response;

    if (res.opCode !== _protocol.Operations.DATA) {
      this._checkStatus(res);
    }

    return this._parseArray(res.content);
  }

  async openFile(path, mode) {
    const {
      packetNumber,
      response
    } = this._createPacketPromise(`Open file '${path}'`);

    const pathPayload = Buffer.from(path);
    const fileModePayload = Buffer.alloc(8);
    fileModePayload.writeUInt32LE(mode, 0);
    const data = {
      opCode: _protocol.Operations.FILE_OPEN,
      packetNumber,
      headerPayload: Buffer.concat([fileModePayload, pathPayload])
    };

    this._encoder.write(data);

    const res = await response;

    if (res.opCode !== _protocol.Operations.FILE_OPEN_RES) {
      this._checkStatus(res);
    }

    return res.headerPayload.readUInt32LE(0);
  }

  async createWriteStream(filePath, opts) {
    const fileHandle = await this.openFile(filePath, _protocol.FileModes.w);
    return new _streams.AfcWritableFileStream(fileHandle, this, opts);
  }

  async createReadStream(filePath, options) {
    const fileHandle = await this.openFile(filePath, _protocol.FileModes.r);
    return new _streams.AfcReadableFileStream(fileHandle, this, options);
  }

  async closeFileHandle(fileHandle) {
    const {
      packetNumber,
      response
    } = this._createPacketPromise(`Close file handle '${fileHandle}'`);

    const fileModePayload = Buffer.alloc(8);
    fileModePayload.writeUInt32LE(fileHandle, 0);
    const data = {
      opCode: _protocol.Operations.FILE_CLOSE,
      packetNumber,
      headerPayload: fileModePayload
    };

    this._encoder.write(data);

    const res = await response;

    this._checkStatus(res);
  }

  async writeFile(fileHandle, buffer) {
    const {
      packetNumber,
      response
    } = this._createPacketPromise(`Write to file handle '${fileHandle}'`);

    const headerPayload = Buffer.alloc(8);
    headerPayload.writeUInt32LE(fileHandle, 0);
    const data = {
      opCode: _protocol.Operations.FILE_WRITE,
      packetNumber,
      headerPayload,
      content: buffer
    };

    this._encoder.write(data);

    const res = await response;

    this._checkStatus(res);
  }

  async readFile(fileHandle, length) {
    const {
      packetNumber,
      response
    } = this._createPacketPromise(`Read from file handle '${fileHandle}'`);

    const headerPayload = Buffer.alloc(16);
    headerPayload.writeUInt32LE(fileHandle, 0);
    headerPayload.writeUInt32LE(length, 8);
    const data = {
      opCode: _protocol.Operations.FILE_READ,
      packetNumber,
      headerPayload
    };

    this._encoder.write(data);

    const res = await response;

    if (res.opCode !== _protocol.Operations.DATA) {
      this._checkStatus(res);
    }

    return res.content;
  }

  async getFileInfo(path) {
    const {
      packetNumber,
      response
    } = this._createPacketPromise(`Get file info '${path}'`);

    const data = {
      opCode: _protocol.Operations.GET_FILE_INFO,
      packetNumber,
      headerPayload: Buffer.from(path)
    };

    this._encoder.write(data);

    const res = await response;

    if (res.opCode !== _protocol.Operations.DATA) {
      this._checkStatus(res);
    }

    return new FileInfo(this._parseObject(res.content));
  }

  async walkDir(dir, recursive, callback) {
    for (const file of await this.listDirectory(dir)) {
      if (IGNORED_PATHS.includes(file)) {
        continue;
      }

      const relativePath = _path.default.posix.join(dir, file);

      const fileInfo = await this.getFileInfo(relativePath);
      const isDirectory = fileInfo.isDirectory();
      await callback(relativePath, isDirectory);

      if (isDirectory && recursive) {
        await this.walkDir(relativePath, recursive, callback);
      }
    }
  }

  _checkStatus(res) {
    if (res.opCode !== _protocol.Operations.STATUS) {
      throw new Error(`Unexpected response ${(0, _protocol.operationCode)(res.opCode)}`);
    }

    if (_lodash.default.isEmpty(res.headerPayload)) {
      throw new Error('Header payload cant be empty for a status response');
    }

    if (res.headerPayload[0] !== _protocol.Errors.SUCCESS) {
      throw new Error(`Unexpected response ${(0, _protocol.errorCode)(res.headerPayload[0])}`);
    }
  }

  _parseArray(buffer) {
    const items = [];
    let start = 0;

    for (let end = 0; end < buffer.length; end++) {
      if (buffer[end] !== NULL_DELIMETER_CODE) {
        continue;
      }

      const item = buffer.toString('utf8', start, end);
      items.push(item);
      start = end + 1;
    }

    return items;
  }

  _parseObject(buffer) {
    const items = {};
    let start = 0;
    let currentKey;

    for (let end = 0; end < buffer.length; end++) {
      if (buffer[end] !== NULL_DELIMETER_CODE) {
        continue;
      }

      const item = buffer.toString('utf8', start, end);

      if (_lodash.default.isNil(currentKey)) {
        currentKey = item;
      } else {
        items[currentKey] = item;
        currentKey = null;
      }

      start = end + 1;
    }

    if (currentKey) {
      throw new Error(`Failed to parse correctly ${buffer}. Please investigate`);
    }

    return items;
  }

  _createPacketPromise(message, timeout = 10000) {
    const packetNumber = this._packetNumber++;
    const response = new _bluebird.default((resolve, reject) => {
      this._responseCallbacks[packetNumber] = data => resolve(data);

      setTimeout(() => reject(new Error(`Cound't finish the operation "${message}". Failed to receive any data within the timeout: ${timeout}`)), timeout);
    });
    return {
      packetNumber,
      response
    };
  }

}

exports.AfcService = AfcService;

class FileInfo {
  constructor({
    st_size,
    st_blocks,
    st_nlink,
    st_ifmt,
    st_mtime,
    st_birthtime
  }) {
    this.size = parseInt(st_size, 10);
    this.blocks = parseInt(st_blocks, 10);
    this.nlink = parseInt(st_nlink, 10);
    this.ifmt = st_ifmt;
    this.mtimeMs = parseInt(st_mtime, 10) / 1000000;
    this.birthtimeMs = parseInt(st_birthtime, 10) / 1000000;
  }

  isDirectory() {
    return this.ifmt === 'S_IFDIR';
  }

  isFile() {
    return this.ifmt === 'S_IFREG';
  }

}

var _default = AfcService;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
