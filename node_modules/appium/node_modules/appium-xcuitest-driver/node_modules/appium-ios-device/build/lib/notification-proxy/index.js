"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NOTIFICATION_PROXY_SERVICE_NAME = exports.NotificationProxyService = exports.default = void 0;

require("source-map-support/register");

var _plistServiceEncoder = _interopRequireDefault(require("../plist-service/transformer/plist-service-encoder"));

var _plistServiceDecoder = _interopRequireDefault(require("../plist-service/transformer/plist-service-decoder"));

var _lengthBasedSplitter = _interopRequireDefault(require("../util/transformer/length-based-splitter"));

var _constants = require("../constants");

var _lodash = _interopRequireDefault(require("lodash"));

var _baseService = require("../base-service");

const NOTIFICATION_PROXY_SERVICE_NAME = 'com.apple.mobile.notification_proxy';
exports.NOTIFICATION_PROXY_SERVICE_NAME = NOTIFICATION_PROXY_SERVICE_NAME;
const RELAY_NOTIFICATION = 'RelayNotification';
const PROXY_DEATH = 'ProxyDeath';

class NotificationProxyService extends _baseService.BaseServiceSocket {
  constructor(socketClient) {
    super(socketClient);
    this._decoder = new _plistServiceDecoder.default();
    this._splitter = new _lengthBasedSplitter.default(false, 16 * _constants.KB, 0, 4, 4);

    this._socketClient.pipe(this._splitter).pipe(this._decoder);

    this._encoder = new _plistServiceEncoder.default();

    this._encoder.pipe(this._socketClient);

    this._listeners = {};

    this._decoder.on('data', this._handleData.bind(this));
  }

  _handleData(data) {
    switch (data.Command) {
      case RELAY_NOTIFICATION:
        {
          const listener = this._listeners[data.Name];

          if (!listener) {
            return;
          }

          if (_lodash.default.isFunction(listener.notification)) {
            listener.notification();
          }

          break;
        }

      case PROXY_DEATH:
        {
          const listener = this._listeners[data.Name];

          if (!listener) {
            return;
          }

          if (_lodash.default.isFunction(listener.proxyDeath)) {
            listener.proxyDeath();
          }

          delete this._listeners[data.Name];
          break;
        }

      default:
        throw new Error(`Unknown data type ${JSON.stringify(data)}`);
    }
  }

  observeNotification(notification, listener) {
    if (this._listeners[notification]) {
      throw new Error(`Notification listener for ${notification} already exists. Another one can't be added`);
    }

    this._listeners[notification] = listener;

    this._encoder.write({
      Command: 'ObserveNotification',
      Name: notification
    });
  }

  postNotification(notification) {
    this._encoder.write({
      Command: 'PostNotification',
      Name: notification
    });
  }

  shutdown() {
    this._encoder.write({
      Command: 'Shutdown'
    });
  }

  close() {
    this.shutdown();
    super.close();
  }

}

exports.NotificationProxyService = NotificationProxyService;
var _default = NotificationProxyService;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9ub3RpZmljYXRpb24tcHJveHkvaW5kZXguanMiXSwibmFtZXMiOlsiTk9USUZJQ0FUSU9OX1BST1hZX1NFUlZJQ0VfTkFNRSIsIlJFTEFZX05PVElGSUNBVElPTiIsIlBST1hZX0RFQVRIIiwiTm90aWZpY2F0aW9uUHJveHlTZXJ2aWNlIiwiQmFzZVNlcnZpY2VTb2NrZXQiLCJjb25zdHJ1Y3RvciIsInNvY2tldENsaWVudCIsIl9kZWNvZGVyIiwiUGxpc3RTZXJ2aWNlRGVjb2RlciIsIl9zcGxpdHRlciIsIkxlbmd0aEJhc2VkU3BsaXR0ZXIiLCJLQiIsIl9zb2NrZXRDbGllbnQiLCJwaXBlIiwiX2VuY29kZXIiLCJQbGlzdFNlcnZpY2VFbmNvZGVyIiwiX2xpc3RlbmVycyIsIm9uIiwiX2hhbmRsZURhdGEiLCJiaW5kIiwiZGF0YSIsIkNvbW1hbmQiLCJsaXN0ZW5lciIsIk5hbWUiLCJfIiwiaXNGdW5jdGlvbiIsIm5vdGlmaWNhdGlvbiIsInByb3h5RGVhdGgiLCJFcnJvciIsIkpTT04iLCJzdHJpbmdpZnkiLCJvYnNlcnZlTm90aWZpY2F0aW9uIiwid3JpdGUiLCJwb3N0Tm90aWZpY2F0aW9uIiwic2h1dGRvd24iLCJjbG9zZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQSxNQUFNQSwrQkFBK0IsR0FBRyxxQ0FBeEM7O0FBQ0EsTUFBTUMsa0JBQWtCLEdBQUcsbUJBQTNCO0FBQ0EsTUFBTUMsV0FBVyxHQUFHLFlBQXBCOztBQUVBLE1BQU1DLHdCQUFOLFNBQXVDQyw4QkFBdkMsQ0FBeUQ7QUFDdkRDLEVBQUFBLFdBQVcsQ0FBRUMsWUFBRixFQUFnQjtBQUN6QixVQUFNQSxZQUFOO0FBRUEsU0FBS0MsUUFBTCxHQUFnQixJQUFJQyw0QkFBSixFQUFoQjtBQUNBLFNBQUtDLFNBQUwsR0FBaUIsSUFBSUMsNEJBQUosQ0FBd0IsS0FBeEIsRUFBK0IsS0FBS0MsYUFBcEMsRUFBd0MsQ0FBeEMsRUFBMkMsQ0FBM0MsRUFBOEMsQ0FBOUMsQ0FBakI7O0FBQ0EsU0FBS0MsYUFBTCxDQUFtQkMsSUFBbkIsQ0FBd0IsS0FBS0osU0FBN0IsRUFBd0NJLElBQXhDLENBQTZDLEtBQUtOLFFBQWxEOztBQUVBLFNBQUtPLFFBQUwsR0FBZ0IsSUFBSUMsNEJBQUosRUFBaEI7O0FBQ0EsU0FBS0QsUUFBTCxDQUFjRCxJQUFkLENBQW1CLEtBQUtELGFBQXhCOztBQUVBLFNBQUtJLFVBQUwsR0FBa0IsRUFBbEI7O0FBQ0EsU0FBS1QsUUFBTCxDQUFjVSxFQUFkLENBQWlCLE1BQWpCLEVBQXlCLEtBQUtDLFdBQUwsQ0FBaUJDLElBQWpCLENBQXNCLElBQXRCLENBQXpCO0FBQ0Q7O0FBRURELEVBQUFBLFdBQVcsQ0FBRUUsSUFBRixFQUFRO0FBQ2pCLFlBQVFBLElBQUksQ0FBQ0MsT0FBYjtBQUNFLFdBQUtwQixrQkFBTDtBQUF5QjtBQUN2QixnQkFBTXFCLFFBQVEsR0FBRyxLQUFLTixVQUFMLENBQWdCSSxJQUFJLENBQUNHLElBQXJCLENBQWpCOztBQUNBLGNBQUksQ0FBQ0QsUUFBTCxFQUFlO0FBQ2I7QUFDRDs7QUFDRCxjQUFJRSxnQkFBRUMsVUFBRixDQUFhSCxRQUFRLENBQUNJLFlBQXRCLENBQUosRUFBeUM7QUFDdkNKLFlBQUFBLFFBQVEsQ0FBQ0ksWUFBVDtBQUNEOztBQUNEO0FBQ0Q7O0FBQ0QsV0FBS3hCLFdBQUw7QUFBa0I7QUFDaEIsZ0JBQU1vQixRQUFRLEdBQUcsS0FBS04sVUFBTCxDQUFnQkksSUFBSSxDQUFDRyxJQUFyQixDQUFqQjs7QUFDQSxjQUFJLENBQUNELFFBQUwsRUFBZTtBQUNiO0FBQ0Q7O0FBQ0QsY0FBSUUsZ0JBQUVDLFVBQUYsQ0FBYUgsUUFBUSxDQUFDSyxVQUF0QixDQUFKLEVBQXVDO0FBQ3JDTCxZQUFBQSxRQUFRLENBQUNLLFVBQVQ7QUFDRDs7QUFDRCxpQkFBTyxLQUFLWCxVQUFMLENBQWdCSSxJQUFJLENBQUNHLElBQXJCLENBQVA7QUFDQTtBQUNEOztBQUNEO0FBQ0UsY0FBTSxJQUFJSyxLQUFKLENBQVcscUJBQW9CQyxJQUFJLENBQUNDLFNBQUwsQ0FBZVYsSUFBZixDQUFxQixFQUFwRCxDQUFOO0FBdkJKO0FBeUJEOztBQU9EVyxFQUFBQSxtQkFBbUIsQ0FBRUwsWUFBRixFQUFnQkosUUFBaEIsRUFBMEI7QUFDM0MsUUFBSSxLQUFLTixVQUFMLENBQWdCVSxZQUFoQixDQUFKLEVBQW1DO0FBQ2pDLFlBQU0sSUFBSUUsS0FBSixDQUFXLDZCQUE0QkYsWUFBYSw2Q0FBcEQsQ0FBTjtBQUNEOztBQUNELFNBQUtWLFVBQUwsQ0FBZ0JVLFlBQWhCLElBQWdDSixRQUFoQzs7QUFDQSxTQUFLUixRQUFMLENBQWNrQixLQUFkLENBQW9CO0FBQ2xCWCxNQUFBQSxPQUFPLEVBQUUscUJBRFM7QUFFbEJFLE1BQUFBLElBQUksRUFBRUc7QUFGWSxLQUFwQjtBQUlEOztBQU1ETyxFQUFBQSxnQkFBZ0IsQ0FBRVAsWUFBRixFQUFnQjtBQUM5QixTQUFLWixRQUFMLENBQWNrQixLQUFkLENBQW9CO0FBQ2xCWCxNQUFBQSxPQUFPLEVBQUUsa0JBRFM7QUFFbEJFLE1BQUFBLElBQUksRUFBRUc7QUFGWSxLQUFwQjtBQUlEOztBQU1EUSxFQUFBQSxRQUFRLEdBQUk7QUFDVixTQUFLcEIsUUFBTCxDQUFja0IsS0FBZCxDQUFvQjtBQUNsQlgsTUFBQUEsT0FBTyxFQUFFO0FBRFMsS0FBcEI7QUFHRDs7QUFFRGMsRUFBQUEsS0FBSyxHQUFJO0FBQ1AsU0FBS0QsUUFBTDtBQUNBLFVBQU1DLEtBQU47QUFDRDs7QUFuRnNEOzs7ZUFzRjFDaEMsd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUGxpc3RTZXJ2aWNlRW5jb2RlciBmcm9tICcuLi9wbGlzdC1zZXJ2aWNlL3RyYW5zZm9ybWVyL3BsaXN0LXNlcnZpY2UtZW5jb2Rlcic7XG5pbXBvcnQgUGxpc3RTZXJ2aWNlRGVjb2RlciBmcm9tICcuLi9wbGlzdC1zZXJ2aWNlL3RyYW5zZm9ybWVyL3BsaXN0LXNlcnZpY2UtZGVjb2Rlcic7XG5pbXBvcnQgTGVuZ3RoQmFzZWRTcGxpdHRlciBmcm9tICcuLi91dGlsL3RyYW5zZm9ybWVyL2xlbmd0aC1iYXNlZC1zcGxpdHRlcic7XG5pbXBvcnQgeyBLQiB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgQmFzZVNlcnZpY2VTb2NrZXQgfSBmcm9tICcuLi9iYXNlLXNlcnZpY2UnO1xuXG5cbmNvbnN0IE5PVElGSUNBVElPTl9QUk9YWV9TRVJWSUNFX05BTUUgPSAnY29tLmFwcGxlLm1vYmlsZS5ub3RpZmljYXRpb25fcHJveHknO1xuY29uc3QgUkVMQVlfTk9USUZJQ0FUSU9OID0gJ1JlbGF5Tm90aWZpY2F0aW9uJztcbmNvbnN0IFBST1hZX0RFQVRIID0gJ1Byb3h5RGVhdGgnO1xuXG5jbGFzcyBOb3RpZmljYXRpb25Qcm94eVNlcnZpY2UgZXh0ZW5kcyBCYXNlU2VydmljZVNvY2tldCB7XG4gIGNvbnN0cnVjdG9yIChzb2NrZXRDbGllbnQpIHtcbiAgICBzdXBlcihzb2NrZXRDbGllbnQpO1xuXG4gICAgdGhpcy5fZGVjb2RlciA9IG5ldyBQbGlzdFNlcnZpY2VEZWNvZGVyKCk7XG4gICAgdGhpcy5fc3BsaXR0ZXIgPSBuZXcgTGVuZ3RoQmFzZWRTcGxpdHRlcihmYWxzZSwgMTYgKiBLQiwgMCwgNCwgNCk7XG4gICAgdGhpcy5fc29ja2V0Q2xpZW50LnBpcGUodGhpcy5fc3BsaXR0ZXIpLnBpcGUodGhpcy5fZGVjb2Rlcik7XG5cbiAgICB0aGlzLl9lbmNvZGVyID0gbmV3IFBsaXN0U2VydmljZUVuY29kZXIoKTtcbiAgICB0aGlzLl9lbmNvZGVyLnBpcGUodGhpcy5fc29ja2V0Q2xpZW50KTtcblxuICAgIHRoaXMuX2xpc3RlbmVycyA9IHt9O1xuICAgIHRoaXMuX2RlY29kZXIub24oJ2RhdGEnLCB0aGlzLl9oYW5kbGVEYXRhLmJpbmQodGhpcykpO1xuICB9XG5cbiAgX2hhbmRsZURhdGEgKGRhdGEpIHtcbiAgICBzd2l0Y2ggKGRhdGEuQ29tbWFuZCkge1xuICAgICAgY2FzZSBSRUxBWV9OT1RJRklDQVRJT046IHtcbiAgICAgICAgY29uc3QgbGlzdGVuZXIgPSB0aGlzLl9saXN0ZW5lcnNbZGF0YS5OYW1lXTtcbiAgICAgICAgaWYgKCFsaXN0ZW5lcikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXy5pc0Z1bmN0aW9uKGxpc3RlbmVyLm5vdGlmaWNhdGlvbikpIHtcbiAgICAgICAgICBsaXN0ZW5lci5ub3RpZmljYXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgUFJPWFlfREVBVEg6IHtcbiAgICAgICAgY29uc3QgbGlzdGVuZXIgPSB0aGlzLl9saXN0ZW5lcnNbZGF0YS5OYW1lXTtcbiAgICAgICAgaWYgKCFsaXN0ZW5lcikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXy5pc0Z1bmN0aW9uKGxpc3RlbmVyLnByb3h5RGVhdGgpKSB7XG4gICAgICAgICAgbGlzdGVuZXIucHJveHlEZWF0aCgpO1xuICAgICAgICB9XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9saXN0ZW5lcnNbZGF0YS5OYW1lXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gZGF0YSB0eXBlICR7SlNPTi5zdHJpbmdpZnkoZGF0YSl9YCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBhcGkgdG8gbGlzdGVuIHRvIG5vdGlmaWNhdGlvbnMgdGhhdCB0aGUgcGhvbmUgYnJvYWRjYXN0c1xuICAgKiBAcGFyYW0ge3N0cmluZ30gbm90aWZpY2F0aW9uIFRoZSBuYW1lIG9mIHRoZSBub3RpZmljYXRpb24gd2hpY2ggaXMgZGVzaXJlZCB0byBiZSBvYnNlcnZlZFxuICAgKiBAcGFyYW0ge09iamVjdH0gbGlzdGVuZXIgVGhlIGxpc3RlbmVyIG9iamVjdCB3aGljaCB3aWxsIGJlIGludm9rZWQgd2hlbiB0aGVyZSBpcyBhIG5vdGlmaWNhdGlvbiBvciBpZiB0aGUgcHJveHkgaXMgZGVhZFxuICAgKi9cbiAgb2JzZXJ2ZU5vdGlmaWNhdGlvbiAobm90aWZpY2F0aW9uLCBsaXN0ZW5lcikge1xuICAgIGlmICh0aGlzLl9saXN0ZW5lcnNbbm90aWZpY2F0aW9uXSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBOb3RpZmljYXRpb24gbGlzdGVuZXIgZm9yICR7bm90aWZpY2F0aW9ufSBhbHJlYWR5IGV4aXN0cy4gQW5vdGhlciBvbmUgY2FuJ3QgYmUgYWRkZWRgKTtcbiAgICB9XG4gICAgdGhpcy5fbGlzdGVuZXJzW25vdGlmaWNhdGlvbl0gPSBsaXN0ZW5lcjtcbiAgICB0aGlzLl9lbmNvZGVyLndyaXRlKHtcbiAgICAgIENvbW1hbmQ6ICdPYnNlcnZlTm90aWZpY2F0aW9uJyxcbiAgICAgIE5hbWU6IG5vdGlmaWNhdGlvblxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBhcGkgdG8gYnJvYWRjYXN0IG5vdGlmaWNhdGlvbnMgdG8gdGhlIHBob25lLiBUaGlzIGFsbG93cyB0aGUgY2xpZW50IHRvIHRhbGsgdG8gdGhlIGRhZW1vbnMgb3IgYXBwcyBvbiB0aGUgcGhvbmVcbiAgICogQHBhcmFtIHsqfSBub3RpZmljYXRpb24gVGhlIG5hbWUgb2YgdGhlIG5vdGlmaWNhdGlvbiB3aGljaCBpcyBkZXNpcmVkIG5vdGlmaWVkXG4gICAqL1xuICBwb3N0Tm90aWZpY2F0aW9uIChub3RpZmljYXRpb24pIHtcbiAgICB0aGlzLl9lbmNvZGVyLndyaXRlKHtcbiAgICAgIENvbW1hbmQ6ICdQb3N0Tm90aWZpY2F0aW9uJyxcbiAgICAgIE5hbWU6IG5vdGlmaWNhdGlvblxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBhcGkgdG8gc2h1dGRvd24gdGhlIHByb3h5LiBDb25zZXF1ZW50bHksIGFsbCB0aGUgbm90aWZpY2F0aW9ucyB0aGF0IGFyZSBvYnNlcnZpbmcgd2lsbCByZWNpZXZlIHRoZSBwcm94eURlYXRoIHJlc3BvbnNlXG4gICAqIEBwYXJhbSB7Kn0gbm90aWZpY2F0aW9uIFRoZSBuYW1lIG9mIHRoZSBub3RpZmljYXRpb24gd2hpY2ggaXMgZGVzaXJlZCBub3RpZmllZFxuICAgKi9cbiAgc2h1dGRvd24gKCkge1xuICAgIHRoaXMuX2VuY29kZXIud3JpdGUoe1xuICAgICAgQ29tbWFuZDogJ1NodXRkb3duJyxcbiAgICB9KTtcbiAgfVxuXG4gIGNsb3NlICgpIHtcbiAgICB0aGlzLnNodXRkb3duKCk7XG4gICAgc3VwZXIuY2xvc2UoKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBOb3RpZmljYXRpb25Qcm94eVNlcnZpY2U7XG5leHBvcnQgeyBOb3RpZmljYXRpb25Qcm94eVNlcnZpY2UsIE5PVElGSUNBVElPTl9QUk9YWV9TRVJWSUNFX05BTUUgfTtcbiJdLCJmaWxlIjoibGliL25vdGlmaWNhdGlvbi1wcm94eS9pbmRleC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
