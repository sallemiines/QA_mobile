"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Usbmux = void 0;

require("source-map-support/register");

var _net = _interopRequireDefault(require("net"));

var _lodash = _interopRequireDefault(require("lodash"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumSupport = require("appium-support");

var _lengthBasedSplitter = _interopRequireDefault(require("../util/transformer/length-based-splitter"));

var _usbmuxDecoder = _interopRequireDefault(require("./transformer/usbmux-decoder.js"));

var _usbmuxEncoder = _interopRequireDefault(require("./transformer/usbmux-encoder.js"));

var _path = _interopRequireDefault(require("path"));

var _plistService = _interopRequireDefault(require("../plist-service"));

var _lockdown = require("../lockdown");

var _baseService = require("../base-service");

const USBMUX_RESULT = {
  OK: 0,
  BADCOMMAND: 1,
  BADDEV: 2,
  CONNREFUSED: 3
};
let name, version;

try {
  ({
    name,
    version
  } = require(_path.default.resolve(__dirname, '..', '..', '..', 'package.json')));
} catch (err) {
  ({
    name,
    version
  } = require(_path.default.resolve(__dirname, '..', '..', 'package.json')));
}

const DEFAULT_USBMUXD_SOCKET = '/var/run/usbmuxd';
const PROG_NAME = name;
const CLIENT_VERSION_STRING = `${name}-${version}`;

function swap16(val) {
  return (val & 0xFF) << 8 | val >> 8 & 0xFF;
}

class Usbmux extends _baseService.BaseServiceSocket {
  constructor(socketClient = _net.default.createConnection(DEFAULT_USBMUXD_SOCKET)) {
    super(socketClient);
    this._decoder = new _usbmuxDecoder.default();
    this._splitter = new _lengthBasedSplitter.default(true, 1000000, 0, 4, 0);

    this._socketClient.pipe(this._splitter).pipe(this._decoder);

    this._encoder = new _usbmuxEncoder.default();

    this._encoder.pipe(this._socketClient);

    this._tag = 0;
    this._responseCallbacks = {};

    this._decoder.on('data', this._handleData.bind(this));
  }

  _handleData(data) {
    const cb = this._responseCallbacks[data.header.tag] || _lodash.default.noop();

    cb(data);
  }

  async readBUID(timeout = 5000) {
    const {
      tag,
      receivePromise
    } = this._receivePlistPromise(timeout);

    this._sendPlist({
      tag,
      payload: {
        MessageType: 'ReadBUID',
        ProgName: PROG_NAME,
        ClientVersionString: CLIENT_VERSION_STRING
      }
    });

    const data = await receivePromise;

    if (data.payload.BUID) {
      return data.payload.BUID;
    } else {
      throw new Error(`Unexpected data: ${JSON.stringify(data)}`);
    }
  }

  async readPairRecord(udid, timeout = 5000) {
    const {
      tag,
      receivePromise
    } = this._receivePlistPromise(timeout);

    this._sendPlist({
      tag,
      payload: {
        MessageType: 'ReadPairRecord',
        PairRecordID: udid,
        ProgName: PROG_NAME,
        ClientVersionString: CLIENT_VERSION_STRING
      }
    });

    const data = await receivePromise;

    if (data.payload.PairRecordData) {
      try {
        return _appiumSupport.plist.parsePlist(data.payload.PairRecordData);
      } catch (err) {
        throw new Error(`Unexpected data: ${JSON.stringify(data)}`);
      }
    } else {
      return null;
    }
  }

  _sendPlist(json) {
    this._encoder.write(json);
  }

  _receivePlistPromise(timeout = 5000) {
    const tag = this._tag++;
    const receivePromise = new _bluebird.default((resolve, reject) => {
      this._responseCallbacks[tag] = data => resolve(data);

      setTimeout(() => reject(new Error(`Failed to receive any data within the timeout: ${timeout}`)), timeout);
    });
    return {
      tag,
      receivePromise
    };
  }

  async listDevices(timeout = 5000) {
    const {
      tag,
      receivePromise
    } = this._receivePlistPromise(timeout);

    this._sendPlist({
      tag,
      payload: {
        MessageType: 'ListDevices',
        ProgName: PROG_NAME,
        ClientVersionString: CLIENT_VERSION_STRING
      }
    });

    const data = await receivePromise;

    if (data.payload.DeviceList) {
      return data.payload.DeviceList;
    } else {
      throw new Error(`Unexpected data: ${JSON.stringify(data)}`);
    }
  }

  async findDevice(udid, timeout = 5000) {
    const devices = await this.listDevices(timeout);
    return _lodash.default.find(devices, device => device.Properties.SerialNumber === udid);
  }

  async connectLockdown(udid, timeout = 5000) {
    const device = await this.findDevice(udid, timeout);

    if (!device) {
      throw new Error(`Could not find the expected device '${udid}'`);
    }

    const plistService = new _plistService.default((await this.connect(device.Properties.DeviceID, _lockdown.LOCKDOWN_PORT, timeout)));
    return new _lockdown.Lockdown(plistService);
  }

  async connect(deviceID, port, timeout = 5000) {
    const {
      tag,
      receivePromise
    } = this._receivePlistPromise(timeout);

    this._sendPlist({
      tag,
      payload: {
        MessageType: 'Connect',
        ProgName: PROG_NAME,
        ClientVersionString: CLIENT_VERSION_STRING,
        DeviceID: deviceID,
        PortNumber: swap16(port)
      }
    });

    const data = await receivePromise;

    if (data.payload.MessageType !== 'Result') {
      throw new Error(`Unexpected data: ${JSON.stringify(data)}`);
    }

    if (data.payload.Number === USBMUX_RESULT.OK) {
      this._socketClient.unpipe(this._splitter);

      this._splitter.unpipe(this._decoder);

      return this._socketClient;
    } else if (data.payload.Number === USBMUX_RESULT.CONNREFUSED) {
      throw new Error(`Connection was refused to port ${port}`);
    } else {
      throw new Error(`Unexpected data: ${JSON.stringify(data)}`);
    }
  }

}

exports.Usbmux = Usbmux;
var _default = Usbmux;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi91c2JtdXgvaW5kZXguanMiXSwibmFtZXMiOlsiVVNCTVVYX1JFU1VMVCIsIk9LIiwiQkFEQ09NTUFORCIsIkJBRERFViIsIkNPTk5SRUZVU0VEIiwibmFtZSIsInZlcnNpb24iLCJyZXF1aXJlIiwicGF0aCIsInJlc29sdmUiLCJfX2Rpcm5hbWUiLCJlcnIiLCJERUZBVUxUX1VTQk1VWERfU09DS0VUIiwiUFJPR19OQU1FIiwiQ0xJRU5UX1ZFUlNJT05fU1RSSU5HIiwic3dhcDE2IiwidmFsIiwiVXNibXV4IiwiQmFzZVNlcnZpY2VTb2NrZXQiLCJjb25zdHJ1Y3RvciIsInNvY2tldENsaWVudCIsIm5ldCIsImNyZWF0ZUNvbm5lY3Rpb24iLCJfZGVjb2RlciIsIlVzYm11eERlY29kZXIiLCJfc3BsaXR0ZXIiLCJMZW5ndGhCYXNlZFNwbGl0dGVyIiwiX3NvY2tldENsaWVudCIsInBpcGUiLCJfZW5jb2RlciIsIlVzYm11eEVuY29kZXIiLCJfdGFnIiwiX3Jlc3BvbnNlQ2FsbGJhY2tzIiwib24iLCJfaGFuZGxlRGF0YSIsImJpbmQiLCJkYXRhIiwiY2IiLCJoZWFkZXIiLCJ0YWciLCJfIiwibm9vcCIsInJlYWRCVUlEIiwidGltZW91dCIsInJlY2VpdmVQcm9taXNlIiwiX3JlY2VpdmVQbGlzdFByb21pc2UiLCJfc2VuZFBsaXN0IiwicGF5bG9hZCIsIk1lc3NhZ2VUeXBlIiwiUHJvZ05hbWUiLCJDbGllbnRWZXJzaW9uU3RyaW5nIiwiQlVJRCIsIkVycm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsInJlYWRQYWlyUmVjb3JkIiwidWRpZCIsIlBhaXJSZWNvcmRJRCIsIlBhaXJSZWNvcmREYXRhIiwicGxpc3QiLCJwYXJzZVBsaXN0IiwianNvbiIsIndyaXRlIiwiQiIsInJlamVjdCIsInNldFRpbWVvdXQiLCJsaXN0RGV2aWNlcyIsIkRldmljZUxpc3QiLCJmaW5kRGV2aWNlIiwiZGV2aWNlcyIsImZpbmQiLCJkZXZpY2UiLCJQcm9wZXJ0aWVzIiwiU2VyaWFsTnVtYmVyIiwiY29ubmVjdExvY2tkb3duIiwicGxpc3RTZXJ2aWNlIiwiUGxpc3RTZXJ2aWNlIiwiY29ubmVjdCIsIkRldmljZUlEIiwiTE9DS0RPV05fUE9SVCIsIkxvY2tkb3duIiwiZGV2aWNlSUQiLCJwb3J0IiwiUG9ydE51bWJlciIsIk51bWJlciIsInVucGlwZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQSxNQUFNQSxhQUFhLEdBQUc7QUFDcEJDLEVBQUFBLEVBQUUsRUFBRSxDQURnQjtBQUVwQkMsRUFBQUEsVUFBVSxFQUFFLENBRlE7QUFHcEJDLEVBQUFBLE1BQU0sRUFBRSxDQUhZO0FBSXBCQyxFQUFBQSxXQUFXLEVBQUU7QUFKTyxDQUF0QjtBQU9BLElBQUlDLElBQUosRUFBVUMsT0FBVjs7QUFDQSxJQUFJO0FBRUYsR0FBQztBQUFFRCxJQUFBQSxJQUFGO0FBQVFDLElBQUFBO0FBQVIsTUFBb0JDLE9BQU8sQ0FBQ0MsY0FBS0MsT0FBTCxDQUFhQyxTQUFiLEVBQXdCLElBQXhCLEVBQThCLElBQTlCLEVBQW9DLElBQXBDLEVBQTBDLGNBQTFDLENBQUQsQ0FBNUI7QUFDRCxDQUhELENBR0UsT0FBT0MsR0FBUCxFQUFZO0FBRVosR0FBQztBQUFFTixJQUFBQSxJQUFGO0FBQVFDLElBQUFBO0FBQVIsTUFBb0JDLE9BQU8sQ0FBQ0MsY0FBS0MsT0FBTCxDQUFhQyxTQUFiLEVBQXdCLElBQXhCLEVBQThCLElBQTlCLEVBQW9DLGNBQXBDLENBQUQsQ0FBNUI7QUFDRDs7QUFFRCxNQUFNRSxzQkFBc0IsR0FBRyxrQkFBL0I7QUFDQSxNQUFNQyxTQUFTLEdBQUdSLElBQWxCO0FBQ0EsTUFBTVMscUJBQXFCLEdBQUksR0FBRVQsSUFBSyxJQUFHQyxPQUFRLEVBQWpEOztBQUVBLFNBQVNTLE1BQVQsQ0FBaUJDLEdBQWpCLEVBQXNCO0FBQ3BCLFNBQVEsQ0FBQ0Es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O0FBQ0wsWUFBTSxJQUFJOUIsS0FBSixDQUFXLG9CQUFtQkMsSUFBSSxDQUFDQyxTQUFMLENBQWVsQixJQUFmLENBQXFCLEVBQW5ELENBQU47QUFDRDtBQUNGOztBQTdLb0M7OztlQWlMeEJuQixNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG5ldCBmcm9tICduZXQnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCB7IHBsaXN0IH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuaW1wb3J0IExlbmd0aEJhc2VkU3BsaXR0ZXIgZnJvbSAnLi4vdXRpbC90cmFuc2Zvcm1lci9sZW5ndGgtYmFzZWQtc3BsaXR0ZXInO1xuaW1wb3J0IFVzYm11eERlY29kZXIgZnJvbSAnLi90cmFuc2Zvcm1lci91c2JtdXgtZGVjb2Rlci5qcyc7XG5pbXBvcnQgVXNibXV4RW5jb2RlciBmcm9tICcuL3RyYW5zZm9ybWVyL3VzYm11eC1lbmNvZGVyLmpzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IFBsaXN0U2VydmljZSBmcm9tICcuLi9wbGlzdC1zZXJ2aWNlJztcbmltcG9ydCB7IExvY2tkb3duLCBMT0NLRE9XTl9QT1JUIH0gZnJvbSAnLi4vbG9ja2Rvd24nO1xuaW1wb3J0IHsgQmFzZVNlcnZpY2VTb2NrZXQgfSBmcm9tICcuLi9iYXNlLXNlcnZpY2UnO1xuXG5cbmNvbnN0IFVTQk1VWF9SRVNVTFQgPSB7XG4gIE9LOiAwLFxuICBCQURDT01NQU5EOiAxLFxuICBCQURERVY6IDIsXG4gIENPTk5SRUZVU0VEOiAzLFxufTtcblxubGV0IG5hbWUsIHZlcnNpb247XG50cnkge1xuICAvLyBmaXJzdCB0cnkgYXNzdW1pbmcgdGhpcyBpcyBpbiB0aGUgYGJ1aWxkYCBmb2xkZXJcbiAgKHsgbmFtZSwgdmVyc2lvbiB9ID0gcmVxdWlyZShwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4nLCAnLi4nLCAnLi4nLCAncGFja2FnZS5qc29uJykpKTtcbn0gY2F0Y2ggKGVycikge1xuICAvLyB0aGVuIHRyeSBhc3N1bWluZyBpdCBpcyBub3RcbiAgKHsgbmFtZSwgdmVyc2lvbiB9ID0gcmVxdWlyZShwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4nLCAnLi4nLCAncGFja2FnZS5qc29uJykpKTtcbn1cblxuY29uc3QgREVGQVVMVF9VU0JNVVhEX1NPQ0tFVCA9ICcvdmFyL3J1bi91c2JtdXhkJztcbmNvbnN0IFBST0dfTkFNRSA9IG5hbWU7XG5jb25zdCBDTElFTlRfVkVSU0lPTl9TVFJJTkcgPSBgJHtuYW1lfS0ke3ZlcnNpb259YDtcblxuZnVuY3Rpb24gc3dhcDE2ICh2YWwpIHtcbiAgcmV0dXJuICgodmFsICYgMHhGRikgPDwgOCkgfCAoKHZhbCA+PiA4KSAmIDB4RkYpO1xufVxuXG5jbGFzcyBVc2JtdXggZXh0ZW5kcyBCYXNlU2VydmljZVNvY2tldCB7XG4gIGNvbnN0cnVjdG9yIChzb2NrZXRDbGllbnQgPSBuZXQuY3JlYXRlQ29ubmVjdGlvbihERUZBVUxUX1VTQk1VWERfU09DS0VUKSkge1xuICAgIHN1cGVyKHNvY2tldENsaWVudCk7XG5cbiAgICB0aGlzLl9kZWNvZGVyID0gbmV3IFVzYm11eERlY29kZXIoKTtcbiAgICB0aGlzLl9zcGxpdHRlciA9IG5ldyBMZW5ndGhCYXNlZFNwbGl0dGVyKHRydWUsIDEwMDAwMDAsIDAsIDQsIDApO1xuICAgIHRoaXMuX3NvY2tldENsaWVudC5waXBlKHRoaXMuX3NwbGl0dGVyKS5waXBlKHRoaXMuX2RlY29kZXIpO1xuXG4gICAgdGhpcy5fZW5jb2RlciA9IG5ldyBVc2JtdXhFbmNvZGVyKCk7XG4gICAgdGhpcy5fZW5jb2Rlci5waXBlKHRoaXMuX3NvY2tldENsaWVudCk7XG5cbiAgICB0aGlzLl90YWcgPSAwO1xuICAgIHRoaXMuX3Jlc3BvbnNlQ2FsbGJhY2tzID0ge307XG4gICAgdGhpcy5fZGVjb2Rlci5vbignZGF0YScsIHRoaXMuX2hhbmRsZURhdGEuYmluZCh0aGlzKSk7XG4gIH1cblxuICBfaGFuZGxlRGF0YSAoZGF0YSkge1xuICAgIGNvbnN0IGNiID0gdGhpcy5fcmVzcG9uc2VDYWxsYmFja3NbZGF0YS5oZWFkZXIudGFnXSB8fCBfLm5vb3AoKTtcbiAgICBjYihkYXRhKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBwcm9taXNlL3ByZWZlci1hd2FpdC10by1jYWxsYmFja3NcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBCVUlEIG9mIHRoZSBob3N0IGNvbXB1dGVyIGZyb20gdXNibXV4ZFxuICAgKiBAcGFyYW0ge251bWJlcn0gW3RpbWVvdXQ9NTAwMF0gdGhlIHRpbWVvdXQgb2YgcmVjZWl2aW5nIGEgcmVzcG9uc2UgZnJvbSB1c2JtdXhkXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBhc3luYyByZWFkQlVJRCAodGltZW91dCA9IDUwMDApIHtcbiAgICBjb25zdCB7IHRhZywgcmVjZWl2ZVByb21pc2UgfSA9IHRoaXMuX3JlY2VpdmVQbGlzdFByb21pc2UodGltZW91dCk7XG5cbiAgICB0aGlzLl9zZW5kUGxpc3Qoe1xuICAgICAgdGFnLFxuICAgICAgcGF5bG9hZDoge1xuICAgICAgICBNZXNzYWdlVHlwZTogJ1JlYWRCVUlEJyxcbiAgICAgICAgUHJvZ05hbWU6IFBST0dfTkFNRSxcbiAgICAgICAgQ2xpZW50VmVyc2lvblN0cmluZzogQ0xJRU5UX1ZFUlNJT05fU1RSSU5HXG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVjZWl2ZVByb21pc2U7XG4gICAgaWYgKGRhdGEucGF5bG9hZC5CVUlEKSB7XG4gICAgICByZXR1cm4gZGF0YS5wYXlsb2FkLkJVSUQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5leHBlY3RlZCBkYXRhOiAke0pTT04uc3RyaW5naWZ5KGRhdGEpfWApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZWFkcyB0aGUgcGFpciByZWNvcmQgb2YgYSBkZXZpY2UuIEl0IHdpbGwgcmV0dXJuIG51bGwgaWYgaXQgZG9lc24ndCBleGlzdHNcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVkaWQgdGhlIHVkaWQgb2YgdGhlIGRldmljZVxuICAgKiBAcGFyYW0ge251bWJlcn0gW3RpbWVvdXQ9NTAwMF0gdGhlIHRpbWVvdXQgb2YgcmVjZWl2aW5nIGEgcmVzcG9uc2UgZnJvbSB1c2JtdXhkXG4gICAqIEByZXR1cm5zIHs/T2JqZWN0fVxuICAgKi9cbiAgYXN5bmMgcmVhZFBhaXJSZWNvcmQgKHVkaWQsIHRpbWVvdXQgPSA1MDAwKSB7XG4gICAgY29uc3QgeyB0YWcsIHJlY2VpdmVQcm9taXNlIH0gPSB0aGlzLl9yZWNlaXZlUGxpc3RQcm9taXNlKHRpbWVvdXQpO1xuXG4gICAgdGhpcy5fc2VuZFBsaXN0KHtcbiAgICAgIHRhZyxcbiAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgTWVzc2FnZVR5cGU6ICdSZWFkUGFpclJlY29yZCcsXG4gICAgICAgIFBhaXJSZWNvcmRJRDogdWRpZCxcbiAgICAgICAgUHJvZ05hbWU6IFBST0dfTkFNRSxcbiAgICAgICAgQ2xpZW50VmVyc2lvblN0cmluZzogQ0xJRU5UX1ZFUlNJT05fU1RSSU5HXG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlY2VpdmVQcm9taXNlO1xuICAgIGlmIChkYXRhLnBheWxvYWQuUGFpclJlY29yZERhdGEpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBwbGlzdC5wYXJzZVBsaXN0KGRhdGEucGF5bG9hZC5QYWlyUmVjb3JkRGF0YSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkIGRhdGE6ICR7SlNPTi5zdHJpbmdpZnkoZGF0YSl9YCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIF9zZW5kUGxpc3QgKGpzb24pIHtcbiAgICB0aGlzLl9lbmNvZGVyLndyaXRlKGpzb24pO1xuICB9XG5cbiAgX3JlY2VpdmVQbGlzdFByb21pc2UgKHRpbWVvdXQgPSA1MDAwKSB7XG4gICAgY29uc3QgdGFnID0gdGhpcy5fdGFnKys7XG4gICAgY29uc3QgcmVjZWl2ZVByb21pc2UgPSBuZXcgQigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLl9yZXNwb25zZUNhbGxiYWNrc1t0YWddID0gKGRhdGEpID0+IHJlc29sdmUoZGF0YSk7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHJlamVjdChuZXcgRXJyb3IoYEZhaWxlZCB0byByZWNlaXZlIGFueSBkYXRhIHdpdGhpbiB0aGUgdGltZW91dDogJHt0aW1lb3V0fWApKSwgdGltZW91dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHsgdGFnLCByZWNlaXZlUHJvbWlzZSB9O1xuICB9XG5cbiAgLyoqXG4gICAqIExpc3RzIGFsbCBkZXZpY2VzIGNvbm5lY3RlZCB0byB0aGUgaG9zdFxuICAgKiBAcGFyYW0ge251bWJlcn0gW3RpbWVvdXQ9NTAwMF0gdGhlIHRpbWVvdXQgb2YgcmVjZWl2aW5nIGEgcmVzcG9uc2UgZnJvbSB1c2JtdXhkXG4gICAqIEByZXR1cm5zIHtBcnJheX1cbiAgICovXG4gIGFzeW5jIGxpc3REZXZpY2VzICh0aW1lb3V0ID0gNTAwMCkge1xuICAgIGNvbnN0IHsgdGFnLCByZWNlaXZlUHJvbWlzZSB9ID0gdGhpcy5fcmVjZWl2ZVBsaXN0UHJvbWlzZSh0aW1lb3V0KTtcblxuICAgIHRoaXMuX3NlbmRQbGlzdCh7XG4gICAgICB0YWcsXG4gICAgICBwYXlsb2FkOiB7XG4gICAgICAgIE1lc3NhZ2VUeXBlOiAnTGlzdERldmljZXMnLFxuICAgICAgICBQcm9nTmFtZTogUFJPR19OQU1FLFxuICAgICAgICBDbGllbnRWZXJzaW9uU3RyaW5nOiBDTElFTlRfVkVSU0lPTl9TVFJJTkdcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZWNlaXZlUHJvbWlzZTtcbiAgICBpZiAoZGF0YS5wYXlsb2FkLkRldmljZUxpc3QpIHtcbiAgICAgIHJldHVybiBkYXRhLnBheWxvYWQuRGV2aWNlTGlzdDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkIGRhdGE6ICR7SlNPTi5zdHJpbmdpZnkoZGF0YSl9YCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIExvb2tzIGZvciBhIGRldmljZSB3aXRoIHRoZSBwYXNzZWQgdWRpZC4gSXQgd2lsbCByZXR1cm4gdW5kZWZpbmVkIGlmIHRoZSBkZXZpY2UgaXMgbm90IGZvdW5kXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1ZGlkIHRoZSB1ZGlkIG9mIHRoZSBkZXZpY2VcbiAgICogQHBhcmFtIHtudW1iZXJ9IFt0aW1lb3V0PTUwMDBdIHRoZSB0aW1lb3V0IG9mIHJlY2VpdmluZyBhIHJlc3BvbnNlIGZyb20gdXNibXV4ZFxuICAgKiBAcmV0dXJucyB7P09iamVjdH1cbiAgICovXG4gIGFzeW5jIGZpbmREZXZpY2UgKHVkaWQsIHRpbWVvdXQgPSA1MDAwKSB7XG4gICAgY29uc3QgZGV2aWNlcyA9IGF3YWl0IHRoaXMubGlzdERldmljZXModGltZW91dCk7XG4gICAgcmV0dXJuIF8uZmluZChkZXZpY2VzLCAoZGV2aWNlKSA9PiBkZXZpY2UuUHJvcGVydGllcy5TZXJpYWxOdW1iZXIgPT09IHVkaWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbm5lY3RzIHRvIHRoZSBsb2NrZG93bmQgb24gdGhlIGRldmljZSBhbmQgcmV0dXJucyBhIExvY2tkb3duIGNsaWVudFxuICAgKiBAcGFyYW0ge3N0cmluZ30gdWRpZCB0aGUgdWRpZCBvZiB0aGUgZGV2aWNlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbdGltZW91dD01MDAwXSB0aGUgdGltZW91dCBvZiByZWNlaXZpbmcgYSByZXNwb25zZSBmcm9tIHVzYm11eGRcbiAgICogQHJldHVybnMge0xvY2tkb3dufVxuICAgKi9cbiAgYXN5bmMgY29ubmVjdExvY2tkb3duICh1ZGlkLCB0aW1lb3V0ID0gNTAwMCkge1xuICAgIGNvbnN0IGRldmljZSA9IGF3YWl0IHRoaXMuZmluZERldmljZSh1ZGlkLCB0aW1lb3V0KTtcbiAgICBpZiAoIWRldmljZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZCBub3QgZmluZCB0aGUgZXhwZWN0ZWQgZGV2aWNlICcke3VkaWR9J2ApO1xuICAgIH1cbiAgICBjb25zdCBwbGlzdFNlcnZpY2UgPSBuZXcgUGxpc3RTZXJ2aWNlKGF3YWl0IHRoaXMuY29ubmVjdChkZXZpY2UuUHJvcGVydGllcy5EZXZpY2VJRCwgTE9DS0RPV05fUE9SVCwgdGltZW91dCkpO1xuICAgIHJldHVybiBuZXcgTG9ja2Rvd24ocGxpc3RTZXJ2aWNlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb25uZWN0cyB0byBhIGNlcnRhaW4gcG9ydCBvbiB0aGUgZGV2aWNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkZXZpY2VJRCB0aGUgZGV2aWNlIGlkIHdoaWNoIGNhbiBiZSByZXRyaWV2ZWQgZnJvbSB0aGUgcHJvcGVydGllcyBvZiBhIGRldmljZVxuICAgKiBAcGFyYW0ge251bWJlcn0gcG9ydCB0aGUgcG9ydCBudW1iZXIgdGhhdCB3YW50cyB0byBiZSBjb25uZWN0ZWRcbiAgICogQHBhcmFtIHtudW1iZXJ9IFt0aW1lb3V0PTUwMDBdIHRoZSB0aW1lb3V0IG9mIHJlY2VpdmluZyBhIHJlc3BvbnNlIGZyb20gdXNibXV4ZFxuICAgKi9cbiAgYXN5bmMgY29ubmVjdCAoZGV2aWNlSUQsIHBvcnQsIHRpbWVvdXQgPSA1MDAwKSB7XG4gICAgY29uc3QgeyB0YWcsIHJlY2VpdmVQcm9taXNlIH0gPSB0aGlzLl9yZWNlaXZlUGxpc3RQcm9taXNlKHRpbWVvdXQpO1xuXG4gICAgdGhpcy5fc2VuZFBsaXN0KHtcbiAgICAgIHRhZyxcbiAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgTWVzc2FnZVR5cGU6ICdDb25uZWN0JyxcbiAgICAgICAgUHJvZ05hbWU6IFBST0dfTkFNRSxcbiAgICAgICAgQ2xpZW50VmVyc2lvblN0cmluZzogQ0xJRU5UX1ZFUlNJT05fU1RSSU5HLFxuICAgICAgICBEZXZpY2VJRDogZGV2aWNlSUQsXG4gICAgICAgIFBvcnROdW1iZXI6IHN3YXAxNihwb3J0KVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlY2VpdmVQcm9taXNlO1xuICAgIGlmIChkYXRhLnBheWxvYWQuTWVzc2FnZVR5cGUgIT09ICdSZXN1bHQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgZGF0YTogJHtKU09OLnN0cmluZ2lmeShkYXRhKX1gKTtcbiAgICB9XG4gICAgaWYgKGRhdGEucGF5bG9hZC5OdW1iZXIgPT09IFVTQk1VWF9SRVNVTFQuT0spIHtcbiAgICAgIHRoaXMuX3NvY2tldENsaWVudC51bnBpcGUodGhpcy5fc3BsaXR0ZXIpO1xuICAgICAgdGhpcy5fc3BsaXR0ZXIudW5waXBlKHRoaXMuX2RlY29kZXIpO1xuICAgICAgcmV0dXJuIHRoaXMuX3NvY2tldENsaWVudDtcbiAgICB9IGVsc2UgaWYgKGRhdGEucGF5bG9hZC5OdW1iZXIgPT09IFVTQk1VWF9SRVNVTFQuQ09OTlJFRlVTRUQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQ29ubmVjdGlvbiB3YXMgcmVmdXNlZCB0byBwb3J0ICR7cG9ydH1gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkIGRhdGE6ICR7SlNPTi5zdHJpbmdpZnkoZGF0YSl9YCk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCB7IFVzYm11eCB9O1xuZXhwb3J0IGRlZmF1bHQgVXNibXV4O1xuIl0sImZpbGUiOiJsaWIvdXNibXV4L2luZGV4LmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
