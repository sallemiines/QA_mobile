"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.PlistService = void 0;

require("source-map-support/register");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _sslHelper = require("../ssl-helper");

var _plistServiceEncoder = _interopRequireDefault(require("./transformer/plist-service-encoder"));

var _plistServiceDecoder = _interopRequireDefault(require("./transformer/plist-service-decoder"));

var _lengthBasedSplitter = _interopRequireDefault(require("../util/transformer/length-based-splitter"));

var _baseService = require("../base-service");

const CHECK_FREQ_MS = 50;

class PlistService extends _baseService.BaseServiceSocket {
  constructor(socketClient) {
    super(socketClient);
    this._decoder = new _plistServiceDecoder.default();
    this._splitter = new _lengthBasedSplitter.default(false, 1000000, 0, 4, 4);

    this._socketClient.pipe(this._splitter).pipe(this._decoder);

    this._encoder = new _plistServiceEncoder.default();

    this._encoder.pipe(this._socketClient);

    this.replyQueue = [];

    this._decoder.on('data', data => this.replyQueue.push(data));
  }

  async sendPlistAndReceive(json, timeout = 5000) {
    this.sendPlist(json);
    return await this.receivePlist(timeout);
  }

  sendPlist(json) {
    if (!json) {
      throw new Error('Cant send a null a object');
    }

    this._encoder.write(json);
  }

  async receivePlist(timeout = 5000) {
    return await new _bluebird.default((resolve, reject) => {
      const queue = this.replyQueue;
      const data = queue.shift();

      if (data) {
        resolve(data);
        return;
      }

      const checkExist = setInterval(() => {
        const data = queue.shift();

        if (!data) {
          return;
        }

        clearInterval(checkExist);
        resolve(data);
      }, CHECK_FREQ_MS);
      setTimeout(() => {
        clearInterval(checkExist);
        reject(new Error(`Failed to receive any data within the timeout: ${timeout}`));
      }, timeout);
    });
  }

  enableSessionSSL(hostPrivateKey, hostCertificate) {
    this._socketClient.unpipe(this._splitter);

    this._splitter.unpipe(this._decoder);

    this._encoder.unpipe(this._socketClient);

    this._socketClient = (0, _sslHelper.upgradeToSSL)(this._socketClient, hostPrivateKey, hostCertificate);

    this._encoder.pipe(this._socketClient);

    this._socketClient.pipe(this._splitter).pipe(this._decoder);
  }

}

exports.PlistService = PlistService;
var _default = PlistService;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9wbGlzdC1zZXJ2aWNlL2luZGV4LmpzIl0sIm5hbWVzIjpbIkNIRUNLX0ZSRVFfTVMiLCJQbGlzdFNlcnZpY2UiLCJCYXNlU2VydmljZVNvY2tldCIsImNvbnN0cnVjdG9yIiwic29ja2V0Q2xpZW50IiwiX2RlY29kZXIiLCJQbGlzdFNlcnZpY2VEZWNvZGVyIiwiX3NwbGl0dGVyIiwiTGVuZ3RoQmFzZWRTcGxpdHRlciIsIl9zb2NrZXRDbGllbnQiLCJwaXBlIiwiX2VuY29kZXIiLCJQbGlzdFNlcnZpY2VFbmNvZGVyIiwicmVwbHlRdWV1ZSIsIm9uIiwiZGF0YSIsInB1c2giLCJzZW5kUGxpc3RBbmRSZWNlaXZlIiwianNvbiIsInRpbWVvdXQiLCJzZW5kUGxpc3QiLCJyZWNlaXZlUGxpc3QiLCJFcnJvciIsIndyaXRlIiwiQiIsInJlc29sdmUiLCJyZWplY3QiLCJxdWV1ZSIsInNoaWZ0IiwiY2hlY2tFeGlzdCIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsInNldFRpbWVvdXQiLCJlbmFibGVTZXNzaW9uU1NMIiwiaG9zdFByaXZhdGVLZXkiLCJob3N0Q2VydGlmaWNhdGUiLCJ1bnBpcGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBR0EsTUFBTUEsYUFBYSxHQUFHLEVBQXRCOztBQUVBLE1BQU1DLFlBQU4sU0FBMkJDLDhCQUEzQixDQUE2QztBQUMzQ0MsRUFBQUEsV0FBVyxDQUFFQyxZQUFGLEVBQWdCO0FBQ3pCLFVBQU1BLFlBQU47QUFFQSxTQUFLQyxRQUFMLEdBQWdCLElBQUlDLDRCQUFKLEVBQWhCO0FBQ0EsU0FBS0MsU0FBTCxHQUFpQixJQUFJQyw0QkFBSixDQUF3QixLQUF4QixFQUErQixPQUEvQixFQUF3QyxDQUF4QyxFQUEyQyxDQUEzQyxFQUE4QyxDQUE5QyxDQUFqQjs7QUFDQSxTQUFLQyxhQUFMLENBQW1CQyxJQUFuQixDQUF3QixLQUFLSCxTQUE3QixFQUF3Q0csSUFBeEMsQ0FBNkMsS0FBS0wsUUFBbEQ7O0FBRUEsU0FBS00sUUFBTCxHQUFnQixJQUFJQyw0QkFBSixFQUFoQjs7QUFDQSxTQUFLRCxRQUFMLENBQWNELElBQWQsQ0FBbUIsS0FBS0QsYUFBeEI7O0FBRUEsU0FBS0ksVUFBTCxHQUFrQixFQUFsQjs7QUFDQSxTQUFLUixRQUFMLENBQWNTLEVBQWQsQ0FBaUIsTUFBakIsRUFBMEJDLElBQUQsSUFBVSxLQUFLRixVQUFMLENBQWdCRyxJQUFoQixDQUFxQkQsSUFBckIsQ0FBbkM7QUFDRDs7QUFFRCxRQUFNRSxtQkFBTixDQUEyQkMsSUFBM0IsRUFBaUNDLE9BQU8sR0FBRyxJQUEzQyxFQUFpRDtBQUMvQyxTQUFLQyxTQUFMLENBQWVGLElBQWY7QUFDQSxXQUFPLE1BQU0sS0FBS0csWUFBTCxDQUFrQkYsT0FBbEIsQ0FBYjtBQUNEOztBQUVEQyxFQUFBQSxTQUFTLENBQUVGLElBQUYsRUFBUTtBQUNmLFFBQUksQ0FBQ0EsSUFBTCxFQUFXO0FBQ1QsWUFBTSxJQUFJSSxLQUFKLENBQVUsMkJBQVYsQ0FBTjtBQUNEOztBQUNELFNBQUtYLFFBQUwsQ0FBY1ksS0FBZCxDQUFvQkwsSUFBcEI7QUFDRDs7QUFFRCxRQUFNRyxZQUFOLENBQW9CRixPQUFPLEdBQUcsSUFBOUIsRUFBb0M7QUFDbEMsV0FBTyxNQUFNLElBQUlLLGlCQUFKLENBQU0sQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0FBQ3RDLFlBQU1DLEtBQUssR0FBRyxLQUFLZCxVQUFuQjtBQUNBLFlBQU1FLElBQUksR0FBR1ksS0FBSyxDQUFDQyxLQUFOLEVBQWI7O0FBQ0EsVUFBSWIsSUFBSixFQUFVO0FBQ1JVLFFBQUFBLE9BQU8sQ0FBQ1YsSUFBRCxDQUFQO0FBQ0E7QUFDRDs7QUFDRCxZQUFNYyxVQUFVLEdBQUdDLFdBQVcsQ0FBQyxNQUFNO0FBQ25DLGNBQU1mLElBQUksR0FBR1ksS0FBSyxDQUFDQyxLQUFOLEVBQWI7O0FBQ0EsWUFBSSxDQUFDYixJQUFMLEVBQVc7QUFDVDtBQUNEOztBQUNEZ0IsUUFBQUEsYUFBYSxDQUFDRixVQUFELENBQWI7QUFDQUosUUFBQUEsT0FBTyxDQUFDVixJQUFELENBQVA7QUFDRCxPQVA2QixFQU8zQmYsYUFQMkIsQ0FBOUI7QUFRQWdDLE1BQUFBLFVBQVUsQ0FBQyxNQUFNO0FBQ2ZELFFBQUFBLGFBQWEsQ0FBQ0YsVUFBRCxDQUFiO0FBQ0FILFFBQUFBLE1BQU0sQ0FBQyxJQUFJSixLQUFKLENBQVcsa0RBQWlESCxPQUFRLEVBQXBFLENBQUQsQ0FBTjtBQUNELE9BSFMsRUFHUEEsT0FITyxDQUFWO0FBSUQsS0FuQlksQ0FBYjtBQW9CRDs7QUFFRGMsRUFBQUEsZ0JBQWdCLENBQUVDLGNBQUYsRUFBa0JDLGVBQWxCLEVBQW1DO0FBQ2pELFNBQUsxQixhQUFMLENBQW1CMkIsTUFBbkIsQ0FBMEIsS0FBSzdCLFNBQS9COztBQUNBLFNBQUtBLFNBQUwsQ0FBZTZCLE1BQWYsQ0FBc0IsS0FBSy9CLFFBQTNCOztBQUNBLFNBQUtNLFFBQUwsQ0FBY3lCLE1BQWQsQ0FBcUIsS0FBSzNCLGFBQTFCOztBQUNBLFNBQUtBLGFBQUwsR0FBcUIsNkJBQWEsS0FBS0EsYUFBbEIsRUFBaUN5QixjQUFqQyxFQUFpREMsZUFBakQsQ0FBckI7O0FBQ0EsU0FBS3hCLFFBQUwsQ0FBY0QsSUFBZCxDQUFtQixLQUFLRCxhQUF4Qjs7QUFDQSxTQUFLQSxhQUFMLENBQW1CQyxJQUFuQixDQUF3QixLQUFLSCxTQUE3QixFQUF3Q0csSUFBeEMsQ0FBNkMsS0FBS0wsUUFBbEQ7QUFDRDs7QUF6RDBDOzs7ZUE2RDlCSixZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IHsgdXBncmFkZVRvU1NMIH0gZnJvbSAnLi4vc3NsLWhlbHBlcic7XG5pbXBvcnQgUGxpc3RTZXJ2aWNlRW5jb2RlciBmcm9tICcuL3RyYW5zZm9ybWVyL3BsaXN0LXNlcnZpY2UtZW5jb2Rlcic7XG5pbXBvcnQgUGxpc3RTZXJ2aWNlRGVjb2RlciBmcm9tICcuL3RyYW5zZm9ybWVyL3BsaXN0LXNlcnZpY2UtZGVjb2Rlcic7XG5pbXBvcnQgTGVuZ3RoQmFzZWRTcGxpdHRlciBmcm9tICcuLi91dGlsL3RyYW5zZm9ybWVyL2xlbmd0aC1iYXNlZC1zcGxpdHRlcic7XG5pbXBvcnQgeyBCYXNlU2VydmljZVNvY2tldCB9IGZyb20gJy4uL2Jhc2Utc2VydmljZSc7XG5cblxuY29uc3QgQ0hFQ0tfRlJFUV9NUyA9IDUwO1xuXG5jbGFzcyBQbGlzdFNlcnZpY2UgZXh0ZW5kcyBCYXNlU2VydmljZVNvY2tldCB7XG4gIGNvbnN0cnVjdG9yIChzb2NrZXRDbGllbnQpIHtcbiAgICBzdXBlcihzb2NrZXRDbGllbnQpO1xuXG4gICAgdGhpcy5fZGVjb2RlciA9IG5ldyBQbGlzdFNlcnZpY2VEZWNvZGVyKCk7XG4gICAgdGhpcy5fc3BsaXR0ZXIgPSBuZXcgTGVuZ3RoQmFzZWRTcGxpdHRlcihmYWxzZSwgMTAwMDAwMCwgMCwgNCwgNCk7XG4gICAgdGhpcy5fc29ja2V0Q2xpZW50LnBpcGUodGhpcy5fc3BsaXR0ZXIpLnBpcGUodGhpcy5fZGVjb2Rlcik7XG5cbiAgICB0aGlzLl9lbmNvZGVyID0gbmV3IFBsaXN0U2VydmljZUVuY29kZXIoKTtcbiAgICB0aGlzLl9lbmNvZGVyLnBpcGUodGhpcy5fc29ja2V0Q2xpZW50KTtcblxuICAgIHRoaXMucmVwbHlRdWV1ZSA9IFtdO1xuICAgIHRoaXMuX2RlY29kZXIub24oJ2RhdGEnLCAoZGF0YSkgPT4gdGhpcy5yZXBseVF1ZXVlLnB1c2goZGF0YSkpO1xuICB9XG5cbiAgYXN5bmMgc2VuZFBsaXN0QW5kUmVjZWl2ZSAoanNvbiwgdGltZW91dCA9IDUwMDApIHtcbiAgICB0aGlzLnNlbmRQbGlzdChqc29uKTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5yZWNlaXZlUGxpc3QodGltZW91dCk7XG4gIH1cblxuICBzZW5kUGxpc3QgKGpzb24pIHtcbiAgICBpZiAoIWpzb24pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2FudCBzZW5kIGEgbnVsbCBhIG9iamVjdCcpO1xuICAgIH1cbiAgICB0aGlzLl9lbmNvZGVyLndyaXRlKGpzb24pO1xuICB9XG5cbiAgYXN5bmMgcmVjZWl2ZVBsaXN0ICh0aW1lb3V0ID0gNTAwMCkge1xuICAgIHJldHVybiBhd2FpdCBuZXcgQigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBxdWV1ZSA9IHRoaXMucmVwbHlRdWV1ZTtcbiAgICAgIGNvbnN0IGRhdGEgPSBxdWV1ZS5zaGlmdCgpO1xuICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgcmVzb2x2ZShkYXRhKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgY2hlY2tFeGlzdCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHF1ZXVlLnNoaWZ0KCk7XG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjbGVhckludGVydmFsKGNoZWNrRXhpc3QpO1xuICAgICAgICByZXNvbHZlKGRhdGEpO1xuICAgICAgfSwgQ0hFQ0tfRlJFUV9NUyk7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbChjaGVja0V4aXN0KTtcbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgRmFpbGVkIHRvIHJlY2VpdmUgYW55IGRhdGEgd2l0aGluIHRoZSB0aW1lb3V0OiAke3RpbWVvdXR9YCkpO1xuICAgICAgfSwgdGltZW91dCk7XG4gICAgfSk7XG4gIH1cblxuICBlbmFibGVTZXNzaW9uU1NMIChob3N0UHJpdmF0ZUtleSwgaG9zdENlcnRpZmljYXRlKSB7XG4gICAgdGhpcy5fc29ja2V0Q2xpZW50LnVucGlwZSh0aGlzLl9zcGxpdHRlcik7XG4gICAgdGhpcy5fc3BsaXR0ZXIudW5waXBlKHRoaXMuX2RlY29kZXIpO1xuICAgIHRoaXMuX2VuY29kZXIudW5waXBlKHRoaXMuX3NvY2tldENsaWVudCk7XG4gICAgdGhpcy5fc29ja2V0Q2xpZW50ID0gdXBncmFkZVRvU1NMKHRoaXMuX3NvY2tldENsaWVudCwgaG9zdFByaXZhdGVLZXksIGhvc3RDZXJ0aWZpY2F0ZSk7XG4gICAgdGhpcy5fZW5jb2Rlci5waXBlKHRoaXMuX3NvY2tldENsaWVudCk7XG4gICAgdGhpcy5fc29ja2V0Q2xpZW50LnBpcGUodGhpcy5fc3BsaXR0ZXIpLnBpcGUodGhpcy5fZGVjb2Rlcik7XG4gIH1cbn1cblxuZXhwb3J0IHsgUGxpc3RTZXJ2aWNlIH07XG5leHBvcnQgZGVmYXVsdCBQbGlzdFNlcnZpY2U7XG4iXSwiZmlsZSI6ImxpYi9wbGlzdC1zZXJ2aWNlL2luZGV4LmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uIn0=
