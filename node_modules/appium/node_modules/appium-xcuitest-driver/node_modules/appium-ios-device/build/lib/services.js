"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.startSyslogService = startSyslogService;
exports.startWebInspectorService = startWebInspectorService;
exports.startInstallationProxyService = startInstallationProxyService;
exports.startSimulateLocationService = startSimulateLocationService;
exports.startAfcService = startAfcService;
exports.startNotificationProxyService = startNotificationProxyService;
exports.startHouseArrestService = startHouseArrestService;

require("source-map-support/register");

var _utilities = require("./utilities");

var _syslog = require("./syslog");

var _simulatelocation = require("./simulatelocation");

var _webinspector = require("./webinspector");

var _installationProxy = require("./installation-proxy");

var _afc = require("./afc");

var _notificationProxy = require("./notification-proxy");

var _houseArrest = require("./house-arrest");

var _plistService = _interopRequireDefault(require("./plist-service"));

var _semver = _interopRequireDefault(require("semver"));

async function startSyslogService(udid, opts = {}) {
  return new _syslog.SyslogService((await startService(udid, _syslog.SYSLOG_SERVICE_NAME, opts.socket)));
}

async function startSimulateLocationService(udid, opts = {}) {
  return new _simulatelocation.SimulateLocationService((await startService(udid, _simulatelocation.SIMULATE_LOCATION_SERVICE_NAME, opts.socket)));
}

async function startWebInspectorService(udid, opts = {}) {
  const osVersion = opts.osVersion || (await (0, _utilities.getOSVersion)(udid, opts.socket));
  const isSimulator = !!opts.isSimulator;
  const verbose = !!opts.verbose;
  const verboseHexDump = !!opts.verboseHexDump;
  const socketChunkSize = opts.socketChunkSize;

  const semverVersion = _semver.default.coerce(osVersion);

  if (!semverVersion) {
    throw new Error(`Could not create a semver version out of '${osVersion}'`);
  }

  const socketClient = opts.socket || (await startService(udid, _webinspector.WEB_INSPECTOR_SERVICE_NAME));
  return new _webinspector.WebInspectorService({
    majorOsVersion: semverVersion.major,
    isSimulator,
    socketChunkSize,
    verbose,
    verboseHexDump,
    socketClient
  });
}

async function startInstallationProxyService(udid, opts = {}) {
  return new _installationProxy.InstallationProxyService(new _plistService.default((await startService(udid, _installationProxy.INSTALLATION_PROXY_SERVICE_NAME, opts.socket))));
}

async function startAfcService(udid, opts = {}) {
  return new _afc.AfcService((await startService(udid, _afc.AFC_SERVICE_NAME, opts.socket)));
}

async function startNotificationProxyService(udid, opts = {}) {
  return new _notificationProxy.NotificationProxyService((await startService(udid, _notificationProxy.NOTIFICATION_PROXY_SERVICE_NAME, opts.socket)));
}

async function startHouseArrestService(udid, opts = {}) {
  return new _houseArrest.HouseArrestService((await startService(udid, _houseArrest.HOUSE_ARREST_SERVICE_NAME, opts.socket)));
}

async function startService(udid, serviceName, socket) {
  const lockdown = await (0, _utilities.startLockdownSession)(udid, socket);

  try {
    const service = await lockdown.startService(serviceName);

    if (service.EnableServiceSSL) {
      return await (0, _utilities.connectPortSSL)(udid, service.Port, socket);
    } else {
      return await (0, _utilities.connectPort)(udid, service.Port, socket);
    }
  } finally {
    lockdown.close();
  }
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
