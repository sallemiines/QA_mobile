"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkForDependencies = checkForDependencies;
exports.bundleWDASim = bundleWDASim;

require("source-map-support/register");

var _appiumSupport = require("appium-support");

var _nodeSimctl = require("node-simctl");

var _lodash = _interopRequireDefault(require("lodash"));

var _teen_process = require("teen_process");

var _path = _interopRequireDefault(require("path"));

var _os = require("os");

var _utils = require("./utils");

var _xcodebuild = _interopRequireDefault(require("./xcodebuild"));

var _constants = require("./constants");

var _logger = _interopRequireDefault(require("./logger"));

const execLogger = {
  logNonEmptyLines(data, fn) {
    data = Buffer.isBuffer(data) ? data.toString() : data;

    for (const line of data.split(_os.EOL)) {
      if (line) {
        fn(line);
      }
    }
  },

  debug(data) {
    this.logNonEmptyLines(data, _logger.default.debug.bind(_logger.default));
  },

  error(data) {
    this.logNonEmptyLines(data, _logger.default.error.bind(_logger.default));
  }

};
const IOS = 'iOS';
const TVOS = 'tvOS';
const CARTHAGE_CMD = 'carthage';
const CARTFILE = 'Cartfile.resolved';

async function hasTvOSSims() {
  const devices = _lodash.default.flatten(Object.values((await (0, _nodeSimctl.getDevices)(null, TVOS))));

  return !_lodash.default.isEmpty(devices);
}

function getCartfileLocations() {
  const cartfile = _path.default.resolve(_constants.BOOTSTRAP_PATH, CARTFILE);

  const installedCartfile = _path.default.resolve(_constants.BOOTSTRAP_PATH, _constants.CARTHAGE_ROOT, CARTFILE);

  return {
    cartfile,
    installedCartfile
  };
}

async function needsUpdate(cartfile, installedCartfile) {
  return !(await (0, _utils.fileCompare)(cartfile, installedCartfile));
}

async function fetchDependencies(useSsl = false) {
  _logger.default.info('Fetching dependencies');

  if (!(await _appiumSupport.fs.which(CARTHAGE_CMD))) {
    _logger.default.errorAndThrow('Please make sure that you have Carthage installed ' + '(https://github.com/Carthage/Carthage), and that it is ' + 'available in the PATH for the environment running Appium');
  }

  const {
    cartfile,
    installedCartfile
  } = getCartfileLocations();

  if (!(await needsUpdate(cartfile, installedCartfile))) {
    _logger.default.info('Dependencies up-to-date');

    return false;
  }

  let platforms = [IOS];

  if (await hasTvOSSims()) {
    platforms.push(TVOS);
  } else {
    _logger.default.debug('tvOS platform will not be included into Carthage bootstrap, because no Simulator devices have been created for it');
  }

  _logger.default.info(`Installing/updating dependencies for platforms ${platforms.map(p => `'${p}'`).join(', ')}`);

  let args = ['bootstrap'];

  if (useSsl) {
    args.push('--use-ssh');
  }

  args.push('--platform', platforms.join(','));

  try {
    await (0, _teen_process.exec)(CARTHAGE_CMD, args, {
      logger: execLogger,
      cwd: _constants.BOOTSTRAP_PATH
    });
  } catch (err) {
    await _appiumSupport.fs.rimraf(_path.default.resolve(_constants.BOOTSTRAP_PATH, _constants.CARTHAGE_ROOT));
    throw err;
  }

  await _appiumSupport.fs.copyFile(cartfile, installedCartfile);

  _logger.default.debug(`Finished fetching dependencies`);

  return true;
}

async function buildWDASim() {
  const args = ['-project', _constants.WDA_PROJECT, '-scheme', _constants.WDA_SCHEME, '-sdk', _constants.SDK_SIMULATOR, 'CODE_SIGN_IDENTITY=""', 'CODE_SIGNING_REQUIRED="NO"', 'GCC_TREAT_WARNINGS_AS_ERRORS=0'];
  await (0, _teen_process.exec)('xcodebuild', args);
}

async function checkForDependencies(opts = {}) {
  return await fetchDependencies(opts.useSsl);
}

async function bundleWDASim(opts) {
  const xcodebuild = new _xcodebuild.default();
  const derivedDataPath = await xcodebuild.retrieveDerivedDataPath();

  const wdaBundlePath = _path.default.join(derivedDataPath, 'Debug-iphonesimulator', _constants.WDA_RUNNER_APP);

  if (await _appiumSupport.fs.exists(wdaBundlePath)) {
    return wdaBundlePath;
  }

  await checkForDependencies(opts);
  await buildWDASim();
  return wdaBundlePath;
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
