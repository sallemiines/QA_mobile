"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateProjectFile = updateProjectFile;
exports.resetProjectFile = resetProjectFile;
exports.setRealDeviceSecurity = setRealDeviceSecurity;
exports.getAdditionalRunContent = getAdditionalRunContent;
exports.getXctestrunFileName = getXctestrunFileName;
exports.generateXcodeConfigFile = generateXcodeConfigFile;
exports.setXctestrunFile = setXctestrunFile;
exports.getXctestrunFilePath = getXctestrunFilePath;
exports.killProcess = killProcess;
exports.randomInt = randomInt;
exports.getWDAUpgradeTimestamp = getWDAUpgradeTimestamp;
exports.fileCompare = fileCompare;
exports.resetTestProcesses = resetTestProcesses;
exports.getPIDsListeningOnPort = getPIDsListeningOnPort;
exports.killAppUsingPattern = killAppUsingPattern;
exports.isTvOS = isTvOS;

require("source-map-support/register");

var _appiumSupport = require("appium-support");

var _teen_process = require("teen_process");

var _path = _interopRequireDefault(require("path"));

var _streamEqual = _interopRequireDefault(require("stream-equal"));

var _logger = _interopRequireDefault(require("./logger"));

var _lodash = _interopRequireDefault(require("lodash"));

var _constants = require("./constants");

var _bluebird = _interopRequireDefault(require("bluebird"));

const PROJECT_FILE = 'project.pbxproj';

async function getPIDsUsingPattern(pattern, opts = {}) {
  const {
    multi = false,
    ignoreCase = true
  } = opts;
  const args = [`-${ignoreCase ? 'i' : ''}f${multi ? '' : 'n'}`, pattern];

  try {
    const {
      stdout
    } = await (0, _teen_process.exec)('pgrep', args);

    if (multi) {
      const result = stdout.split('\n').filter(x => parseInt(x, 10)).map(x => `${parseInt(x, 10)}`);
      return _lodash.default.isEmpty(result) ? null : result;
    }

    const pid = parseInt(stdout, 10);
    return isNaN(pid) ? null : `${pid}`;
  } catch (err) {
    _logger.default.debug(`'pgrep ${args.join(' ')}' didn't detect any matching processes. Return code: ${err.code}`);

    return null;
  }
}

async function killAppUsingPattern(pgrepPattern) {
  for (const signal of [2, 15, 9]) {
    if (!(await getPIDsUsingPattern(pgrepPattern))) {
      return;
    }

    const args = [`-${signal}`, '-if', pgrepPattern];

    try {
      await (0, _teen_process.exec)('pkill', args);
    } catch (err) {
      _logger.default.debug(`pkill ${args.join(' ')} -> ${err.message}`);
    }

    await _bluebird.default.delay(100);
  }
}

function isTvOS(platformName) {
  return _lodash.default.toLower(platformName) === _lodash.default.toLower(_constants.PLATFORM_NAME_TVOS);
}

async function fileCompare(file1, file2) {
  try {
    return await (0, _streamEqual.default)(_appiumSupport.fs.createReadStream(file1), _appiumSupport.fs.createReadStream(file2));
  } catch (err) {
    if (err.code === 'ENOENT') {
      return false;
    }

    throw err;
  }
}

async function replaceInFile(file, find, replace) {
  let contents = await _appiumSupport.fs.readFile(file, 'utf8');
  let newContents = contents.replace(find, replace);

  if (newContents !== contents) {
    await _appiumSupport.fs.writeFile(file, newContents, 'utf8');
  }
}

async function updateProjectFile(agentPath, newBundleId) {
  let projectFilePath = `${agentPath}/${PROJECT_FILE}`;

  try {
    await _appiumSupport.fs.copyFile(projectFilePath, `${projectFilePath}.old`);
    await replaceInFile(projectFilePath, new RegExp(_lodash.default.escapeRegExp(_constants.WDA_RUNNER_BUNDLE_ID), 'g'), newBundleId);

    _logger.default.debug(`Successfully updated '${projectFilePath}' with bundle id '${newBundleId}'`);
  } catch (err) {
    _logger.default.debug(`Error updating project file: ${err.message}`);

    _logger.default.warn(`Unable to update project file '${projectFilePath}' with ` + `bundle id '${newBundleId}'. WebDriverAgent may not start`);
  }
}

async function resetProjectFile(agentPath) {
  const projectFilePath = _path.default.join(agentPath, PROJECT_FILE);

  try {
    if (!(await _appiumSupport.fs.exists(`${projectFilePath}.old`))) {
      return;
    }

    await _appiumSupport.fs.mv(`${projectFilePath}.old`, projectFilePath);

    _logger.default.debug(`Successfully reset '${projectFilePath}' with bundle id '${_constants.WDA_RUNNER_BUNDLE_ID}'`);
  } catch (err) {
    _logger.default.debug(`Error resetting project file: ${err.message}`);

    _logger.default.warn(`Unable to reset project file '${projectFilePath}' with ` + `bundle id '${_constants.WDA_RUNNER_BUNDLE_ID}'. WebDriverAgent has been ` + `modified and not returned to the original state.`);
  }
}

async function setRealDeviceSecurity(keychainPath, keychainPassword) {
  _logger.default.debug('Setting security for iOS device');

  await (0, _teen_process.exec)('security', ['-v', 'list-keychains', '-s', keychainPath]);
  await (0, _teen_process.exec)('security', ['-v', 'unlock-keychain', '-p', keychainPassword, keychainPath]);
  await (0, _teen_process.exec)('security', ['set-keychain-settings', '-t', '3600', '-l', keychainPath]);
}

async function generateXcodeConfigFile(orgId, signingId) {
  _logger.default.debug(`Generating xcode config file for orgId '${orgId}' and signingId ` + `'${signingId}'`);

  const contents = `DEVELOPMENT_TEAM = ${orgId}
CODE_SIGN_IDENTITY = ${signingId}
`;
  const xcconfigPath = await _appiumSupport.tempDir.path('appium-temp.xcconfig');

  _logger.default.debug(`Writing xcode config file to ${xcconfigPath}`);

  await _appiumSupport.fs.writeFile(xcconfigPath, contents, 'utf8');
  return xcconfigPath;
}

async function setXctestrunFile(deviceInfo, sdkVersion, bootstrapPath, wdaRemotePort) {
  const xctestrunFilePath = await getXctestrunFilePath(deviceInfo, sdkVersion, bootstrapPath);
  const xctestRunContent = await _appiumSupport.plist.parsePlistFile(xctestrunFilePath);
  const updateWDAPort = getAdditionalRunContent(deviceInfo.platformName, wdaRemotePort);

  const newXctestRunContent = _lodash.default.merge(xctestRunContent, updateWDAPort);

  await _appiumSupport.plist.updatePlistFile(xctestrunFilePath, newXctestRunContent, true);
  return xctestrunFilePath;
}

function getAdditionalRunContent(platformName, wdaRemotePort) {
  const runner = `WebDriverAgentRunner${isTvOS(platformName) ? '_tvOS' : ''}`;
  return {
    [runner]: {
      EnvironmentVariables: {
        USE_PORT: wdaRemotePort
      }
    }
  };
}

async function getXctestrunFilePath(deviceInfo, sdkVersion, bootstrapPath) {
  const sdkBased = [_path.default.resolve(bootstrapPath, `${deviceInfo.udid}_${sdkVersion}.xctestrun`), sdkVersion];
  const platformBased = [_path.default.resolve(bootstrapPath, `${deviceInfo.udid}_${deviceInfo.platformVersion}.xctestrun`), deviceInfo.platformVersion];

  for (const [filePath, version] of [sdkBased, platformBased]) {
    if (await _appiumSupport.fs.exists(filePath)) {
      _logger.default.info(`Using '${filePath}' as xctestrun file`);

      return filePath;
    }

    const originalXctestrunFile = _path.default.resolve(bootstrapPath, getXctestrunFileName(deviceInfo, version));

    if (await _appiumSupport.fs.exists(originalXctestrunFile)) {
      await _appiumSupport.fs.copyFile(originalXctestrunFile, filePath);

      _logger.default.info(`Using '${filePath}' as xctestrun file copied by '${originalXctestrunFile}'`);

      return filePath;
    }
  }

  _logger.default.errorAndThrow(`If you are using 'useXctestrunFile' capability then you ` + `need to have a xctestrun file (expected: ` + `'${_path.default.resolve(bootstrapPath, getXctestrunFileName(deviceInfo, sdkVersion))}')`);
}

function getXctestrunFileName(deviceInfo, version) {
  return isTvOS(deviceInfo.platformName) ? `WebDriverAgentRunner_tvOS_appletv${deviceInfo.isRealDevice ? `os${version}-arm64` : `simulator${version}-x86_64`}.xctestrun` : `WebDriverAgentRunner_iphone${deviceInfo.isRealDevice ? `os${version}-arm64` : `simulator${version}-x86_64`}.xctestrun`;
}

async function killProcess(name, proc) {
  if (!proc || !proc.isRunning) {
    return;
  }

  _logger.default.info(`Shutting down '${name}' process (pid '${proc.proc.pid}')`);

  _logger.default.info(`Sending 'SIGTERM'...`);

  try {
    await proc.stop('SIGTERM', 1000);
    return;
  } catch (err) {
    if (!err.message.includes(`Process didn't end after`)) {
      throw err;
    }

    _logger.default.debug(`${name} process did not end in a timely fashion: '${err.message}'.`);
  }

  _logger.default.info(`Sending 'SIGKILL'...`);

  try {
    await proc.stop('SIGKILL');
  } catch (err) {
    if (err.message.includes('not currently running')) {
      return;
    }

    throw err;
  }
}

function randomInt(low, high) {
  return Math.floor(Math.random() * (high - low) + low);
}

async function getWDAUpgradeTimestamp(bootstrapPath) {
  const carthageRootPath = _path.default.resolve(bootstrapPath, _constants.CARTHAGE_ROOT);

  if (await _appiumSupport.fs.exists(carthageRootPath)) {
    const {
      mtime
    } = await _appiumSupport.fs.stat(carthageRootPath);
    return mtime.getTime();
  }

  return null;
}

async function resetTestProcesses(udid, isSimulator) {
  const processPatterns = [`xcodebuild.*${udid}`];

  if (isSimulator) {
    processPatterns.push(`${udid}.*XCTRunner`);
    processPatterns.push(`xctest.*${udid}`);
  }

  _logger.default.debug(`Killing running processes '${processPatterns.join(', ')}' for the device ${udid}...`);

  for (const pgrepPattern of processPatterns) {
    await killAppUsingPattern(pgrepPattern);
  }
}

async function getPIDsListeningOnPort(port, filteringFunc = null) {
  const result = [];

  try {
    const {
      stdout
    } = await (0, _teen_process.exec)('lsof', ['-ti', `tcp:${port}`]);
    result.push(...stdout.trim().split(/\n+/));
  } catch (e) {
    return result;
  }

  if (!_lodash.default.isFunction(filteringFunc)) {
    return result;
  }

  return await _bluebird.default.filter(result, async x => {
    const {
      stdout
    } = await (0, _teen_process.exec)('ps', ['-p', x, '-o', 'command']);
    return await filteringFunc(stdout);
  });
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
