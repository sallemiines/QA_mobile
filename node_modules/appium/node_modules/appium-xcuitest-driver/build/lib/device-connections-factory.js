"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.DeviceConnectionsFactory = exports.DEVICE_CONNECTIONS_FACTORY = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _net = _interopRequireDefault(require("net"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumSupport = require("appium-support");

var _appiumIosDevice = require("appium-ios-device");

var _portscanner = require("portscanner");

class iProxy {
  constructor(udid, localport, deviceport) {
    this.localport = parseInt(localport, 10);
    this.deviceport = parseInt(deviceport, 10);
    this.udid = udid;
    this.serverSocket = null;
    this.log = _appiumSupport.logger.getLogger(`iProxy@${udid.substring(0, 8)}`);
  }

  async start() {
    if (this.serverSocket) {
      return;
    }

    this.serverSocket = _net.default.createServer(async connection => {
      try {
        const socket = await _appiumIosDevice.utilities.connectPort(this.udid, this.deviceport);
        socket.on('close', () => connection.end());
        socket.on('error', e => this.log.error(e));
        connection.on('close', () => socket.end());
        connection.on('error', e => this.log.error(e));
        connection.pipe(socket);
        socket.pipe(connection);
      } catch (e) {
        this.log.error(e);
        connection.end();
      }
    });
    const status = new _bluebird.default((resolve, reject) => {
      this.serverSocket.once('listening', resolve);
      this.serverSocket.once('error', reject);
    });
    this.serverSocket.listen(this.localport);
    await status;
    this.serverSocket.on('error', e => this.log.error(e));
  }

  async quit() {
    if (!this.serverSocket) {
      return;
    }

    this.serverSocket.once('close', () => {
      this.log.info('The connection has been closed');
      this.serverSocket = null;
    });
    this.serverSocket.close();
  }

}

const log = _appiumSupport.logger.getLogger('DevCon Factory');

const SPLITTER = ':';

class DeviceConnectionsFactory {
  constructor() {
    this._connectionsMapping = {};
  }

  _udidAsToken(udid) {
    return `${_appiumSupport.util.hasValue(udid) ? udid : ''}${SPLITTER}`;
  }

  _portAsToken(port) {
    return `${SPLITTER}${_appiumSupport.util.hasValue(port) ? port : ''}`;
  }

  _toKey(udid = null, port = null) {
    return `${_appiumSupport.util.hasValue(udid) ? udid : ''}${SPLITTER}${_appiumSupport.util.hasValue(port) ? port : ''}`;
  }

  async _releaseProxiedConnections(connectionKeys) {
    const promises = [];

    for (const key of connectionKeys.filter(k => _lodash.default.has(this._connectionsMapping[k], 'iproxy'))) {
      promises.push((async () => {
        log.info(`Releasing the listener for '${key}'`);

        try {
          await this._connectionsMapping[key].iproxy.quit();
        } catch (ign) {}

        return key;
      })());
    }

    return await _bluebird.default.all(promises);
  }

  listConnections(udid = null, port = null, strict = false) {
    if (!udid && !port) {
      return [];
    }

    return _lodash.default.keys(this._connectionsMapping).filter(key => strict && udid && port ? key === this._toKey(udid, port) : udid && key.startsWith(this._udidAsToken(udid)) || port && key.endsWith(this._portAsToken(port)));
  }

  async requestConnection(udid, port, options = {}) {
    if (!udid || !port) {
      log.warn('Did not know how to request the connection:');

      if (!udid) {
        log.warn('- Device UDID is unset');
      }

      if (!port) {
        log.warn('- The local port number is unset');
      }

      return;
    }

    const {
      usePortForwarding,
      devicePort
    } = options;
    log.info(`Requesting connection for device ${udid} on local port ${port}` + (devicePort ? `, device port ${devicePort}` : ''));
    log.debug(`Cached connections count: ${_lodash.default.size(this._connectionsMapping)}`);
    const connectionsOnPort = this.listConnections(null, port);

    if (!_lodash.default.isEmpty(connectionsOnPort)) {
      log.info(`Found cached connections on port #${port}: ${JSON.stringify(connectionsOnPort)}`);
    }

    if (usePortForwarding) {
      let isPortBusy = (await (0, _portscanner.checkPortStatus)(port, '127.0.0.1')) === 'open';

      if (isPortBusy) {
        log.warn(`Port #${port} is busy`);

        if (!_lodash.default.isEmpty(connectionsOnPort)) {
          log.info('Trying to release the port');

          for (const key of await this._releaseProxiedConnections(connectionsOnPort)) {
            delete this._connectionsMapping[key];
          }

          if ((await (0, _portscanner.checkPortStatus)(port, '127.0.0.1')) !== 'open') {
            log.info(`Port #${port} has been successfully released`);
            isPortBusy = false;
          } else {
            log.warn(`Did not know how to release port #${port}`);
          }
        }
      }

      if (isPortBusy) {
        throw new Error(`The port #${port} is occupied by an other process. ` + `You can either quit that process or select another free port.`);
      }
    }

    const currentKey = this._toKey(udid, port);

    if (usePortForwarding) {
      const iproxy = new iProxy(udid, port, devicePort);

      try {
        await iproxy.start();
        this._connectionsMapping[currentKey] = {
          iproxy
        };
      } catch (e) {
        try {
          await iproxy.quit();
        } catch (ign) {}

        throw e;
      }
    } else {
      this._connectionsMapping[currentKey] = {};
    }

    log.info(`Successfully requested the connection for ${currentKey}`);
  }

  async releaseConnection(udid = null, port = null) {
    if (!udid && !port) {
      log.warn('Neither device UDID nor local port is set. ' + 'Did not know how to release the connection');
      return;
    }

    log.info(`Releasing connections for ${udid || 'any'} device on ${port || 'any'} port number`);
    const keys = this.listConnections(udid, port, true);

    if (_lodash.default.isEmpty(keys)) {
      log.info('No cached connections have been found');
      return;
    }

    log.info(`Found cached connections to release: ${JSON.stringify(keys)}`);
    await this._releaseProxiedConnections(keys);

    for (const key of keys) {
      delete this._connectionsMapping[key];
    }

    log.debug(`Cached connections count: ${_lodash.default.size(this._connectionsMapping)}`);
  }

}

exports.DeviceConnectionsFactory = DeviceConnectionsFactory;
const DEVICE_CONNECTIONS_FACTORY = new DeviceConnectionsFactory();
exports.DEVICE_CONNECTIONS_FACTORY = DEVICE_CONNECTIONS_FACTORY;
var _default = DEVICE_CONNECTIONS_FACTORY;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
