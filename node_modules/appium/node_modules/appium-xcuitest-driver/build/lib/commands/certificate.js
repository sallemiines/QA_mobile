"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _appiumIosDriver = require("appium-ios-driver");

var _nodeSimctl = require("node-simctl");

var _asyncbox = require("asyncbox");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _logger = _interopRequireDefault(require("../logger"));

var _os = _interopRequireDefault(require("os"));

var _path = _interopRequireDefault(require("path"));

var _http = _interopRequireDefault(require("http"));

var _uuidJs = _interopRequireDefault(require("uuid-js"));

var _teen_process = require("teen_process");

var _portscanner = require("portscanner");

let extensions = {},
    commands = {};
exports.commands = commands;
const CONFIG_EXTENSION = 'mobileconfig';
const HOST_PORT_RANGE = [38200, 38299];
const TMPSERVER_STARTUP_TIMEOUT = 5000;
const Settings = {
  General: {
    type: 'accessibility id',
    value: 'General'
  },
  Profile: {
    type: '-ios predicate string',
    value: `name BEGINSWITH 'Profile'`
  },
  About: {
    type: 'accessibility id',
    value: 'About'
  },
  Certificate_Trust_Settings: {
    type: 'accessibility id',
    value: 'Certificate Trust Settings'
  }
};
const Button = {
  Install: {
    type: 'accessibility id',
    value: 'Install'
  },
  Allow: {
    type: 'accessibility id',
    value: 'Allow'
  },
  Done: {
    type: 'accessibility id',
    value: 'Done'
  },
  Return_to_Settings: {
    type: 'accessibility id',
    value: 'Return to Settings'
  }
};
const Alert = {
  Install: {
    type: '-ios class chain',
    value: '**/XCUIElementTypeAny[`type == \'XCUIElementTypeAlert\' OR type == \'XCUIElementTypeSheet\'`]/**/XCUIElementTypeButton[`label == \'Install\'`]'
  }
};

async function extractCommonName(certBuffer) {
  const tempCert = await _appiumSupport.tempDir.open({
    prefix: 'cert',
    suffix: '.cer'
  });

  try {
    await _appiumSupport.fs.writeFile(tempCert.path, certBuffer);
    const {
      stdout
    } = await (0, _teen_process.exec)('openssl', ['x509', '-noout', '-subject', '-in', tempCert.path]);
    const cnMatch = /\/CN=([^\/]+)/.exec(stdout);

    if (cnMatch) {
      return cnMatch[1].trim();
    }

    throw new Error(`There is no common name value in '${stdout}' output`);
  } catch (err) {
    throw new Error(`Cannot parse common name value from the certificate. Is it valid and base64-encoded? ` + `Original error: ${err.message}`);
  } finally {
    await _appiumSupport.fs.rimraf(tempCert.path);
  }
}

function toMobileConfig(certBuffer, commonName) {
  const getUUID = () => _uuidJs.default.create().hex.toUpperCase();

  const contentUuid = getUUID();
  return {
    PayloadContent: [{
      PayloadCertificateFileName: `${commonName}.cer`,
      PayloadContent: certBuffer,
      PayloadDescription: 'Adds a CA root certificate',
      PayloadDisplayName: commonName,
      PayloadIdentifier: `com.apple.security.root.${contentUuid}`,
      PayloadType: 'com.apple.security.root',
      PayloadUUID: contentUuid,
      PayloadVersion: 1
    }],
    PayloadDisplayName: commonName,
    PayloadIdentifier: `${_os.default.hostname().split('.')[0]}.${getUUID()}`,
    PayloadRemovalDisallowed: false,
    PayloadType: 'Configuration',
    PayloadUUID: getUUID(),
    PayloadVersion: 1
  };
}

async function clickElement(driver, locator, options = {}) {
  let element = null;
  const {
    timeout = 5000,
    skipIfInvisible = false
  } = options;
  const lookupDelay = 500;

  try {
    element = await (0, _asyncbox.retryInterval)(timeout < lookupDelay ? 1 : timeout / lookupDelay, lookupDelay, () => driver.findNativeElementOrElements(locator.type, locator.value, false));
  } catch (err) {
    if (skipIfInvisible) {
      return false;
    }

    throw new Error(`Cannot find ${JSON.stringify(locator)} within ${timeout}ms timeout`);
  }

  await driver.nativeClick(element);
  return true;
}

async function installPre122Certificate(driver) {
  await clickElement(driver, Button.Allow, {
    timeout: 15000
  });
  await _bluebird.default.delay(2000);

  if (!(await clickElement(driver, Button.Install, {
    skipIfInvisible: true
  }))) {
    return false;
  }

  await _bluebird.default.delay(1500);
  await clickElement(driver, Button.Install);
  await clickElement(driver, Alert.Install);
  await clickElement(driver, Button.Done);
  return true;
}

async function trustCertificateInPreferences(driver, name) {
  await clickElement(driver, Settings.General);
  await clickElement(driver, Settings.About);
  const switchLocator = {
    type: '-ios class chain',
    value: `**/XCUIElementTypeCell[\`label == '${name}'\`]/**/XCUIElementTypeSwitch`
  };
  await (0, _asyncbox.retry)(5, async () => {
    await driver.mobileSwipe({
      element: await driver.findNativeElementOrElements('class name', 'XCUIElementTypeTable', false),
      direction: 'up'
    });
    await clickElement(driver, Settings.Certificate_Trust_Settings, {
      timeout: 500
    });
    await driver.findNativeElementOrElements(switchLocator.type, switchLocator.value, false);
  });

  if (await clickElement(driver, {
    type: switchLocator.type,
    value: `${switchLocator.value}[\`value == '0'\`]`
  }, {
    timeout: 1000,
    skipIfInvisible: true
  })) {
    await driver.postAcceptAlert();
  }
}

async function installPost122Certificate(driver, name) {
  await clickElement(driver, Button.Allow, {
    timeout: 15000
  });
  await _bluebird.default.delay(2000);
  await driver.postAcceptAlert();
  await driver.activateApp('com.apple.Preferences');
  await clickElement(driver, Settings.General);
  await clickElement(driver, Settings.Profile);
  let isCertFound = false;

  for (let swipeNum = 0; swipeNum < 5; ++swipeNum) {
    if (await clickElement(driver, {
      type: '-ios class chain',
      value: `**/XCUIElementTypeCell[\`label == '${name}'\`]`
    }, {
      timeout: 500,
      skipIfInvisible: true
    })) {
      isCertFound = true;
      break;
    }

    await driver.mobileSwipe({
      element: await driver.findNativeElementOrElements('class name', 'XCUIElementTypeTable', false),
      direction: 'up'
    });
  }

  if (!isCertFound) {
    throw new Error(`'${name}' cannot be found in the certificates list`);
  }

  if (!(await clickElement(driver, Button.Install, {
    skipIfInvisible: true
  }))) {
    return false;
  }

  await _bluebird.default.delay(1500);
  await clickElement(driver, Button.Install);
  await clickElement(driver, Alert.Install);
  await clickElement(driver, Button.Done);
  return true;
}

commands.mobileInstallCertificate = async function mobileInstallCertificate(opts = {}) {
  const {
    content,
    commonName
  } = opts;

  if (_lodash.default.isEmpty(content)) {
    throw new Error('Certificate content should not be empty');
  }

  const tmpRoot = await _appiumSupport.tempDir.openDir();
  const tmpPort = await (0, _portscanner.findAPortNotInUse)(HOST_PORT_RANGE[0], HOST_PORT_RANGE[1]);
  const configName = `appium.${CONFIG_EXTENSION}`;

  const configPath = _path.default.resolve(tmpRoot, configName);

  const tmpServer = _http.default.createServer(async function (_, res) {
    const configFile = await _appiumSupport.fs.readFile(configPath);
    res.end(configFile);
  });

  try {
    const certBuffer = Buffer.from(content, 'base64');
    const cn = commonName || (await extractCommonName(certBuffer));
    const mobileConfig = toMobileConfig(certBuffer, cn);

    try {
      await _appiumSupport.plist.updatePlistFile(configPath, mobileConfig, false, false);
    } catch (err) {
      throw new Error(`Cannot store the generated config as '${configPath}'. ` + `Original error: ${err.message}`);
    }

    try {
      const host = _os.default.hostname();

      const certUrl = `http://${host}:${tmpPort}/${configName}`;
      await tmpServer.listen(tmpPort);

      try {
        await (0, _asyncbox.waitForCondition)(async () => {
          try {
            return (await (0, _portscanner.checkPortStatus)(tmpPort, host)) === 'open';
          } catch (ign) {
            return false;
          }
        }, {
          waitMs: TMPSERVER_STARTUP_TIMEOUT,
          intervalMs: 300
        });

        _logger.default.debug(`The temporary web server is running at http://${host}:${tmpPort}`);
      } catch (e) {
        throw new Error(`The temporary web server cannot be started at http://${host}:${tmpPort}.`);
      }

      if (this.isRealDevice()) {
        try {
          await this.proxyCommand('/url', 'POST', {
            url: certUrl
          });
        } catch (err) {
          if (this.isWebContext()) {
            await _appiumIosDriver.iosCommands.general.setUrl.call(this, certUrl);
          } else {
            throw err;
          }
        }
      } else {
        await (0, _nodeSimctl.openUrl)(this.opts.udid || this.sim.udid, certUrl);
      }

      let isCertAlreadyInstalled = false;

      if (_appiumSupport.util.compareVersions(this.opts.platformVersion, '>=', '12.2')) {
        if (await installPost122Certificate(this, cn)) {
          await clickElement(this, Settings.Profile);
          await trustCertificateInPreferences(this, cn);
        } else {
          isCertAlreadyInstalled = true;
        }
      } else {
        if (await installPre122Certificate(this)) {
          await clickElement(this, Button.Return_to_Settings);
          await trustCertificateInPreferences(this, cn);
        } else {
          isCertAlreadyInstalled = true;
        }
      }

      if (isCertAlreadyInstalled) {
        _logger.default.info(`It looks like the '${cn}' certificate has been already added to the CA root`);
      }
    } finally {
      if (this.opts.bundleId) {
        try {
          await this.activateApp(this.opts.bundleId);
        } catch (e) {
          _logger.default.warn(`Cannot restore the application '${this.opts.bundleId}'. Original error: ${e.message}`);
        }
      }
    }

    return (await _appiumSupport.fs.readFile(configPath)).toString('base64');
  } finally {
    await tmpServer.close();
    await _appiumSupport.fs.rimraf(tmpRoot);
  }
};

Object.assign(extensions, commands);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
