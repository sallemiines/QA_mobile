"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _appiumBaseDriver = require("appium-base-driver");

var _appiumSupport = require("appium-support");

var _lodash = _interopRequireDefault(require("lodash"));

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;

commands.getAlertText = async function getAlertText() {
  try {
    return await this.proxyCommand('/alert/text', 'GET');
  } catch (err) {
    if (this.isWebContext()) {
      const alert = await this.getAlert();
      return await alert.getText();
    }

    throw err;
  }
};

commands.setAlertText = async function setAlertText(value) {
  if (_lodash.default.isString(value)) {
    value = value.split('');
  }

  try {
    return await this.proxyCommand('/alert/text', 'POST', {
      value
    });
  } catch (err) {
    if (this.isWebContext()) {
      const alert = await this.getAlert();
      return await alert.setText(value);
    }

    throw err;
  }
};

commands.postAcceptAlert = async function postAcceptAlert(opts = {}) {
  try {
    let params = {};

    if (opts.buttonLabel) {
      params.name = opts.buttonLabel;
    }

    return await this.proxyCommand('/alert/accept', 'POST', params);
  } catch (err) {
    if (!this.isWebContext()) {
      throw new _appiumBaseDriver.errors.NoAlertOpenError();
    }

    let alert = await this.getAlert();

    if (alert.close) {
      return await alert.close();
    }

    await alert.ok();
  }
};

commands.postDismissAlert = async function postDismissAlert(opts = {}) {
  try {
    let params = {};

    if (opts.buttonLabel) {
      params.name = opts.buttonLabel;
    }

    return await this.proxyCommand('/alert/dismiss', 'POST', params);
  } catch (err) {
    if (!this.isWebContext()) {
      throw new _appiumBaseDriver.errors.NoAlertOpenError();
    }

    let alert = await this.getAlert();

    if (alert.close) {
      return await alert.close();
    }

    await alert.cancel();
  }
};

commands.getAlertButtons = async function getAlertButtons() {
  try {
    return await this.proxyCommand('/wda/alert/buttons', 'GET');
  } catch (err) {
    throw new _appiumBaseDriver.errors.NoAlertOpenError();
  }
};

commands.mobileHandleAlert = async function mobileHandleAlert(opts = {}) {
  switch (opts.action) {
    case 'accept':
      return await this.postAcceptAlert(opts);

    case 'dismiss':
      return await this.postDismissAlert(opts);

    case 'getButtons':
      return await this.getAlertButtons();

    default:
      throw new Error(`The 'action' value should be either 'accept', 'dismiss' or 'getButtons'. ` + `'${opts.action}' is provided instead.`);
  }
};

helpers.getAlert = async function getAlert() {
  const possibleAlert = await this.findNativeElementOrElements('class name', 'XCUIElementTypeScrollView', true);

  if (possibleAlert.length !== 1) {
    throw new _appiumBaseDriver.errors.NoAlertOpenError();
  }

  const possibleAlertButtons = await this.findNativeElementOrElements('class name', 'XCUIElementTypeButton', true, _appiumSupport.util.unwrapElement(possibleAlert[0]));

  if (possibleAlertButtons.length < 1 || possibleAlertButtons.length > 2) {
    throw new _appiumBaseDriver.errors.NoAlertOpenError();
  }

  const assertButtonName = async (button, expectedName) => {
    button = _appiumSupport.util.unwrapElement(button);
    const name = await this.proxyCommand(`/element/${button}/attribute/name`, 'GET');

    if (_lodash.default.isNil(name) || name.toLowerCase() !== expectedName) {
      throw new _appiumBaseDriver.errors.NoAlertOpenError();
    }
  };

  const alert = possibleAlert[0];

  if (possibleAlertButtons.length === 1) {
    const closeButton = possibleAlertButtons[0];
    await assertButtonName(closeButton, 'close');

    alert.close = async () => {
      await this.proxyCommand(`/element/${_appiumSupport.util.unwrapElement(closeButton)}/click`, 'POST');
    };
  } else {
    const cancelButton = possibleAlertButtons[0];
    await assertButtonName(cancelButton, 'cancel');
    const okButton = possibleAlertButtons[1];
    await assertButtonName(okButton, 'ok');

    alert.cancel = async () => {
      await this.proxyCommand(`/element/${_appiumSupport.util.unwrapElement(cancelButton)}/click`, 'POST');
    };

    alert.ok = async () => {
      await this.proxyCommand(`/element/${_appiumSupport.util.unwrapElement(okButton)}/click`, 'POST');
    };
  }

  alert.getText = async () => {
    let textView = await this.findNativeElementOrElements('class name', 'XCUIElementTypeTextView', false, _appiumSupport.util.unwrapElement(alert));
    return await this.proxyCommand(`/element/${_appiumSupport.util.unwrapElement(textView)}/attribute/value`, 'GET');
  };

  alert.setText = async value => {
    try {
      let textView = await this.findNativeElementOrElements('class name', 'XCUIElementTypeTextField', false, _appiumSupport.util.unwrapElement(alert));
      await this.proxyCommand(`/element/${_appiumSupport.util.unwrapElement(textView)}/value `, 'POST', {
        value
      });
    } catch (err) {
      if ((0, _appiumBaseDriver.isErrorType)(err, _appiumBaseDriver.errors.NoSuchElementError)) {
        throw new Error('Tried to set text of an alert that was not a prompt');
      }

      throw err;
    }
  };

  return alert;
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
