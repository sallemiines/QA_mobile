"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMostRecentChromedriver = getMostRecentChromedriver;
exports.default = exports.CD_VER = exports.CHROMEDRIVER_CHROME_MAPPING = exports.Chromedriver = void 0;

require("source-map-support/register");

var _events = _interopRequireDefault(require("events"));

var _appiumBaseDriver = require("appium-base-driver");

var _child_process = _interopRequireDefault(require("child_process"));

var _appiumSupport = require("appium-support");

var _asyncbox = require("asyncbox");

var _teen_process = require("teen_process");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _utils = require("./utils");

var _semver = _interopRequireDefault(require("semver"));

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _compareVersions = _interopRequireDefault(require("compare-versions"));

var _storageClient = _interopRequireDefault(require("./storage-client"));

var _protocolHelpers = require("./protocol-helpers");

const log = _appiumSupport.logger.getLogger('Chromedriver');

const NEW_CD_VERSION_FORMAT_MAJOR_VERSION = 73;
const DEFAULT_HOST = '127.0.0.1';
const MIN_CD_VERSION_WITH_W3C_SUPPORT = 75;
const DEFAULT_PORT = 9515;
const CHROMEDRIVER_CHROME_MAPPING = {
  '78.0.3904.70': '78.0.3904.70',
  '77.0.3865.40': '77.0.3865.40',
  '76.0.3809.126': '76.0.3809.126',
  '76.0.3809.68': '76.0.3809.68',
  '76.0.3809.25': '76.0.3809.25',
  '76.0.3809.12': '76.0.3809.12',
  '75.0.3770.140': '75.0.3770.140',
  '75.0.3770.90': '75.0.3770.90',
  '75.0.3770.8': '75.0.3770.8',
  '74.0.3729.6': '74.0.3729',
  '73.0.3683.68': '70.0.3538',
  '2.46': '71.0.3578',
  '2.45': '70.0.0',
  '2.44': '69.0.3497',
  '2.43': '69.0.3497',
  '2.42': '68.0.3440',
  '2.41': '67.0.3396',
  '2.40': '66.0.3359',
  '2.39': '66.0.3359',
  '2.38': '65.0.3325',
  '2.37': '64.0.3282',
  '2.36': '63.0.3239',
  '2.35': '62.0.3202',
  '2.34': '61.0.3163',
  '2.33': '60.0.3112',
  '2.32': '59.0.3071',
  '2.31': '58.0.3029',
  '2.30': '58.0.3029',
  '2.29': '57.0.2987',
  '2.28': '55.0.2883',
  '2.27': '54.0.2840',
  '2.26': '53.0.2785',
  '2.25': '53.0.2785',
  '2.24': '52.0.2743',
  '2.23': '51.0.2704',
  '2.22': '49.0.2623',
  '2.21': '46.0.2490',
  '2.20': '43.0.2357',
  '2.19': '43.0.2357',
  '2.18': '43.0.2357',
  '2.17': '42.0.2311',
  '2.16': '42.0.2311',
  '2.15': '40.0.2214',
  '2.14': '39.0.2171',
  '2.13': '38.0.2125',
  '2.12': '36.0.1985',
  '2.11': '36.0.1985',
  '2.10': '33.0.1751',
  '2.9': '31.0.1650',
  '2.8': '30.0.1573',
  '2.7': '30.0.1573',
  '2.6': '29.0.1545',
  '2.5': '29.0.1545',
  '2.4': '29.0.1545',
  '2.3': '28.0.1500',
  '2.2': '27.0.1453',
  '2.1': '27.0.1453',
  '2.0': '27.0.1453'
};
exports.CHROMEDRIVER_CHROME_MAPPING = CHROMEDRIVER_CHROME_MAPPING;
const CHROME_BUNDLE_ID = 'com.android.chrome';
const WEBVIEW_SHELL_BUNDLE_ID = 'org.chromium.webview_shell';
const WEBVIEW_BUNDLE_IDS = ['com.google.android.webview', 'com.android.webview'];
const CHROMEDRIVER_TUTORIAL = 'https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/web/chromedriver.md';
const CD_VER = process.env.npm_config_chromedriver_version || process.env.CHROMEDRIVER_VERSION || getMostRecentChromedriver();
exports.CD_VER = CD_VER;
const CD_VERSION_TIMEOUT = 5000;

function getMostRecentChromedriver(mapping = CHROMEDRIVER_CHROME_MAPPING) {
  if (_lodash.default.isEmpty(mapping)) {
    throw new Error('Unable to get most recent Chromedriver from empty mapping');
  }

  return _lodash.default.last(_lodash.default.keys(mapping).sort(_compareVersions.default));
}

class Chromedriver extends _events.default.EventEmitter {
  constructor(args = {}) {
    super();
    const {
      host = DEFAULT_HOST,
      port = DEFAULT_PORT,
      useSystemExecutable = false,
      executable,
      executableDir = (0, _utils.getChromedriverDir)(),
      bundleId,
      mappingPath,
      cmdArgs,
      adb,
      verbose,
      logPath,
      disableBuildCheck,
      isAutodownloadEnabled = false
    } = args;
    this.proxyHost = host;
    this.proxyPort = port;
    this.adb = adb;
    this.cmdArgs = cmdArgs;
    this.proc = null;
    this.useSystemExecutable = useSystemExecutable;
    this.chromedriver = executable;
    this.executableDir = executableDir;
    this.mappingPath = mappingPath;
    this.bundleId = bundleId;
    this.executableVerified = false;
    this.state = Chromedriver.STATE_STOPPED;
    this.jwproxy = new _appiumBaseDriver.JWProxy({
      server: this.proxyHost,
      port: this.proxyPort
    });
    this.verbose = verbose;
    this.logPath = logPath;
    this.disableBuildCheck = !!disableBuildCheck;
    this.storageClient = isAutodownloadEnabled ? new _storageClient.default({
      chromedriverDir: this.executableDir
    }) : null;
    this.capabilities = {};
    this.desiredProtocol = _appiumBaseDriver.PROTOCOLS.MJSONWP;
  }

  async getMapping() {
    let mapping = CHROMEDRIVER_CHROME_MAPPING;

    if (this.mappingPath) {
      log.debug(`Attempting to use Chromedriver-Chrome mapping from '${this.mappingPath}'`);

      if (!(await _appiumSupport.fs.exists(this.mappingPath))) {
        log.warn(`No file found at '${this.mappingPath}'. Using default mapping`);
      } else {
        try {
          mapping = JSON.parse((await _appiumSupport.fs.readFile(this.mappingPath)));
        } catch (err) {
          log.error(`Error parsing mapping from '${this.mappingPath}': ${err.message}`);
          log.warn('Using default mapping');
        }
      }
    }

    for (const [cdVersion, chromeVersion] of _lodash.default.toPairs(mapping)) {
      mapping[cdVersion] = _semver.default.coerce(chromeVersion);
    }

    return mapping;
  }

  async getChromedrivers(mapping) {
    const executables = await _appiumSupport.fs.glob(`${this.executableDir}/*`);
    log.debug(`Found ${executables.length} executable${executables.length === 1 ? '' : 's'} ` + `in '${this.executableDir}'`);
    const cds = (await (0, _asyncbox.asyncmap)(executables, async function mapChromedriver(executable) {
      const logError = ({
        message,
        stdout = null,
        stderr = null
      }) => {
        let errMsg = `Cannot retrieve version number from '${_path.default.basename(executable)}' Chromedriver binary. ` + `Make sure it returns a valid version string in response to '--version' command line argument. ${message}`;

        if (stdout) {
          errMsg += `\nStdout: ${stdout}`;
        }

        if (stderr) {
          errMsg += `\nStderr: ${stderr}`;
        }

        log.warn(errMsg);
        return null;
      };

      let stdout;
      let stderr;

      try {
        ({
          stdout,
          stderr
        } = await (0, _teen_process.exec)(executable, ['--version'], {
          timeout: CD_VERSION_TIMEOUT
        }));
      } catch (err) {
        if (!(err.message || '').includes('timed out') && !(err.stdout || '').includes('Starting ChromeDriver')) {
          return logError(err);
        }

        stdout = err.stdout;
      }

      const match = /ChromeDriver\s+\(?v?([\d.]+)\)?/i.exec(stdout);

      if (!match) {
        return logError({
          message: 'Cannot parse the version string',
          stdout,
          stderr
        });
      }

      let version = match[1];

      const coercedVersion = _semver.default.coerce(version);

      if (coercedVersion) {
        if (coercedVersion.major < NEW_CD_VERSION_FORMAT_MAJOR_VERSION) {
          version = `${coercedVersion.major}.${coercedVersion.minor}`;
        }
      }

      return {
        executable,
        version,
        minChromeVersion: mapping[version]
      };
    })).filter(cd => !!cd).sort((a, b) => (0, _compareVersions.default)(b.version, a.version));

    if (_lodash.default.isEmpty(cds)) {
      log.info(`No Chromedrivers were found in '${this.executableDir}'`);
      return cds;
    }

    log.debug(`The following Chromedriver executables were found:`);

    for (const cd of cds) {
      log.debug(`    '${cd.executable}' (version '${cd.version}', minimum Chrome version '${cd.minChromeVersion ? cd.minChromeVersion : 'Unknown'}')`);
    }

    return cds;
  }

  async getChromeVersion() {
    let chromeVersion;

    if (this.bundleId === WEBVIEW_SHELL_BUNDLE_ID) {
      for (const bundleId of WEBVIEW_BUNDLE_IDS) {
        chromeVersion = await (0, _utils.getChromeVersion)(this.adb, bundleId);

        if (chromeVersion) {
          this.bundleId = bundleId;
          return _semver.default.coerce(chromeVersion);
        }
      }

      return null;
    }

    if (this.adb) {
      const apiLevel = await this.adb.getApiLevel();

      if (apiLevel >= 24 && apiLevel <= 28) {
        this.bundleId = CHROME_BUNDLE_ID;
      }
    }

    if (!this.bundleId) {
      this.bundleId = CHROME_BUNDLE_ID;

      for (const bundleId of WEBVIEW_BUNDLE_IDS) {
        chromeVersion = await (0, _utils.getChromeVersion)(this.adb, bundleId);

        if (chromeVersion) {
          this.bundleId = bundleId;
          break;
        }
      }
    }

    if (!chromeVersion) {
      chromeVersion = await (0, _utils.getChromeVersion)(this.adb, this.bundleId);
    }

    return chromeVersion ? _semver.default.coerce(chromeVersion) : null;
  }

  async getCompatibleChromedriver() {
    if (!this.adb) {
      return await (0, _utils.getChromedriverBinaryPath)();
    }

    const mapping = await this.getMapping();
    let didStorageSync = false;

    const syncChromedrivers = async chromeVersion => {
      didStorageSync = true;
      const retrievedMapping = await this.storageClient.retrieveMapping();
      log.debug('Got chromedrivers mapping from the storage: ' + JSON.stringify(retrievedMapping, null, 2));
      const driverKeys = await this.storageClient.syncDrivers({
        minBrowserVersion: chromeVersion.major
      });

      if (_lodash.default.isEmpty(driverKeys)) {
        return false;
      }

      const synchronizedDriversMapping = driverKeys.reduce((acc, x) => {
        const {
          version,
          minBrowserVersion
        } = retrievedMapping[x];
        acc[version] = minBrowserVersion;
        return acc;
      }, {});
      Object.assign(mapping, synchronizedDriversMapping);
      let shouldUpdateGlobalMapping = true;

      if (await _appiumSupport.fs.exists(this.mappingPath)) {
        try {
          await _appiumSupport.fs.writeFile(this.mappingPath, JSON.stringify(mapping, null, 2), 'utf8');
          shouldUpdateGlobalMapping = false;
        } catch (e) {
          log.warn(`Cannot store the updated chromedrivers mapping into '${this.mappingPath}'. ` + `This may reduce the performance of further executions. Original error: ${e.message}`);
        }
      }

      if (shouldUpdateGlobalMapping) {
        Object.assign(CHROMEDRIVER_CHROME_MAPPING, mapping);
      }

      return true;
    };

    do {
      const cds = await this.getChromedrivers(mapping);

      if (this.disableBuildCheck) {
        if (_lodash.default.isEmpty(cds)) {
          log.errorAndThrow(`There must be at least one Chromedriver executable available for use if ` + `'chromedriverDisableBuildCheck' capability is set to 'true'`);
        }

        const {
          version,
          executable
        } = cds[0];
        log.warn(`Chrome build check disabled. Using most recent Chromedriver version (${version}, at '${executable}')`);
        log.warn(`If this is wrong, set 'chromedriverDisableBuildCheck' capability to 'false'`);
        return executable;
      }

      const chromeVersion = await this.getChromeVersion();

      if (!chromeVersion) {
        if (_lodash.default.isEmpty(cds)) {
          log.errorAndThrow(`There must be at least one Chromedriver executable available for use if ` + `the current Chrome version cannot be determined`);
        }

        const {
          version,
          executable
        } = cds[0];
        log.warn(`Unable to discover Chrome version. Using Chromedriver ${version} at '${executable}'`);
        return executable;
      }

      log.debug(`Found Chrome bundle '${this.bundleId}' version '${chromeVersion}'`);
      const autodownloadMsg = this.storageClient && didStorageSync ? '' : '. You could also try to enable automated chromedrivers download server feature';

      if (_lodash.default.isEmpty(mapping) || _semver.default.gt(chromeVersion, _lodash.default.values(mapping)[0])) {
        if (this.storageClient && !didStorageSync) {
          try {
            if (await syncChromedrivers(chromeVersion)) {
              continue;
            }
          } catch (e) {
            log.warn(e.stack);
          }
        }

        if (!_lodash.default.isEmpty(cds) && !cds[0].minChromeVersion) {
          const {
            version,
            executable
          } = cds[0];
          log.warn(`No known Chromedriver available to automate Chrome version '${chromeVersion}'`);
          log.warn(`Using Chromedriver version '${version}', which has not been tested with Appium` + autodownloadMsg);
          return executable;
        }
      }

      const workingCds = cds.filter(cd => {
        const versionObj = _semver.default.coerce(cd.minChromeVersion);

        return versionObj && chromeVersion.major === versionObj.major;
      });

      if (_lodash.default.isEmpty(workingCds)) {
        if (this.storageClient && !didStorageSync) {
          try {
            if (await syncChromedrivers(chromeVersion)) {
              continue;
            }
          } catch (e) {
            log.warn(e.stack);
          }
        }

        log.errorAndThrow(`No Chromedriver found that can automate Chrome '${chromeVersion}'. ` + `See ${CHROMEDRIVER_TUTORIAL} for more details` + autodownloadMsg);
      }

      const binPath = workingCds[0].executable;
      log.debug(`Found ${workingCds.length} Chromedriver executable${workingCds.length === 1 ? '' : 's'} ` + `capable of automating Chrome '${chromeVersion}'.\nChoosing the most recent, '${binPath}'.`);
      log.debug('If a specific version is required, specify it with the `chromedriverExecutable`' + 'desired capability.');
      return binPath;
    } while (true);
  }

  async initChromedriverPath() {
    if (this.executableVerified) return;

    if (!this.chromedriver) {
      this.chromedriver = this.useSystemExecutable ? await (0, _utils.getChromedriverBinaryPath)() : await this.getCompatibleChromedriver();
    }

    if (!(await _appiumSupport.fs.exists(this.chromedriver))) {
      throw new Error(`Trying to use a chromedriver binary at the path ` + `${this.chromedriver}, but it doesn't exist!`);
    }

    this.executableVerified = true;
    log.info(`Set chromedriver binary as: ${this.chromedriver}`);
  }

  syncProtocol(cdVersion = null) {
    const coercedVersion = _semver.default.coerce(cdVersion);

    if (!coercedVersion || coercedVersion.major < MIN_CD_VERSION_WITH_W3C_SUPPORT) {
      log.debug(`Chromedriver v. ${cdVersion} does not fully support ${_appiumBaseDriver.PROTOCOLS.W3C} protocol. ` + `Defaulting to ${_appiumBaseDriver.PROTOCOLS.MJSONWP}`);
      return;
    }

    const chromeOptions = (0, _protocolHelpers.getCapValue)(this.capabilities, 'chromeOptions', {});

    if (chromeOptions.w3c === false) {
      log.info(`Chromedriver v. ${cdVersion} supports ${_appiumBaseDriver.PROTOCOLS.W3C} protocol, ` + `but ${_appiumBaseDriver.PROTOCOLS.MJSONWP} one has been explicitly requested`);
      return;
    }

    this.desiredProtocol = _appiumBaseDriver.PROTOCOLS.W3C;
    this.capabilities = (0, _protocolHelpers.toW3cCapNames)(this.capabilities);
  }

  async start(caps, emitStartingState = true) {
    this.capabilities = _lodash.default.cloneDeep(caps);
    this.capabilities.loggingPrefs = _lodash.default.cloneDeep((0, _protocolHelpers.getCapValue)(caps, 'loggingPrefs', {}));

    if (_lodash.default.isEmpty(this.capabilities.loggingPrefs.browser)) {
      this.capabilities.loggingPrefs.browser = 'ALL';
    }

    if (emitStartingState) {
      this.changeState(Chromedriver.STATE_STARTING);
    }

    const args = ['--url-base=wd/hub', `--port=${this.proxyPort}`];

    if (this.adb && this.adb.adbPort) {
      args.push(`--adb-port=${this.adb.adbPort}`);
    }

    if (_lodash.default.isArray(this.cmdArgs)) {
      args.push(...this.cmdArgs);
    }

    if (this.logPath) {
      args.push(`--log-path=${this.logPath}`);
    }

    if (this.disableBuildCheck) {
      args.push('--disable-build-check');
    }

    args.push('--verbose');

    const startDetector = stdout => {
      return stdout.indexOf('Starting ') === 0;
    };

    let processIsAlive = false;
    let webviewVersion;

    try {
      await this.initChromedriverPath();
      await this.killAll();
      this.proc = new _teen_process.SubProcess(this.chromedriver, args);
      processIsAlive = true;
      this.proc.on('output', (stdout, stderr) => {
        const out = stdout + stderr;
        let match = /"Browser": "(.*)"/.exec(out);

        if (match) {
          webviewVersion = match[1];
          log.debug(`Webview version: '${webviewVersion}'`);
        }

        match = /Starting ChromeDriver ([.\d]+)/.exec(out);

        if (match) {
          log.debug(`Chromedriver version: '${match[1]}'`);
          this.syncProtocol(match[1]);
        }

        if (this.verbose) {
          for (let line of (stdout || '').trim().split('\n')) {
            if (!line.trim().length) continue;
            log.debug(`[STDOUT] ${line}`);
          }

          for (let line of (stderr || '').trim().split('\n')) {
            if (!line.trim().length) continue;
            log.error(`[STDERR] ${line}`);
          }
        }
      });
      this.proc.on('exit', (code, signal) => {
        processIsAlive = false;

        if (this.state !== Chromedriver.STATE_STOPPED && this.state !== Chromedriver.STATE_STOPPING && this.state !== Chromedriver.STATE_RESTARTING) {
          let msg = `Chromedriver exited unexpectedly with code ${code}, ` + `signal ${signal}`;
          log.error(msg);
          this.changeState(Chromedriver.STATE_STOPPED);
        }
      });
      log.info(`Spawning chromedriver with: ${this.chromedriver} ` + `${args.join(' ')}`);
      await this.proc.start(startDetector);
      await this.waitForOnline();
      await this.startSession();
    } catch (e) {
      this.emit(Chromedriver.EVENT_ERROR, e);

      if (processIsAlive) {
        await this.proc.stop();
      }

      let message = '';

      if (e.message.includes('Chrome version must be')) {
        message += 'Unable to automate Chrome version because it is too old for this version of Chromedriver.\n';

        if (webviewVersion) {
          message += `Chrome version on the device: ${webviewVersion}\n`;
        }

        message += `Visit '${CHROMEDRIVER_TUTORIAL}' to troubleshoot the problem.\n`;
      }

      message += e.message;
      log.errorAndThrow(message);
    }
  }

  sessionId() {
    if (this.state !== Chromedriver.STATE_ONLINE) {
      return null;
    }

    return this.jwproxy.sessionId;
  }

  async restart() {
    log.info('Restarting chromedriver');

    if (this.state !== Chromedriver.STATE_ONLINE) {
      throw new Error("Can't restart when we're not online");
    }

    this.changeState(Chromedriver.STATE_RESTARTING);
    await this.stop(false);
    await this.start(this.capabilities, false);
  }

  async waitForOnline() {
    let chromedriverStopped = false;
    await (0, _asyncbox.retryInterval)(20, 200, async () => {
      if (this.state === Chromedriver.STATE_STOPPED) {
        chromedriverStopped = true;
        return;
      }

      await this.getStatus();
    });

    if (chromedriverStopped) {
      throw new Error('ChromeDriver crashed during startup.');
    }
  }

  async getStatus() {
    return await this.jwproxy.command('/status', 'GET');
  }

  async startSession() {
    const sessionCaps = this.desiredProtocol === _appiumBaseDriver.PROTOCOLS.W3C ? {
      capabilities: {
        alwaysMatch: this.capabilities
      }
    } : {
      desiredCapabilities: this.capabilities
    };
    log.info(`Starting ${this.desiredProtocol} Chromedriver session with capabilities: ` + JSON.stringify(sessionCaps, null, 2));
    await (0, _asyncbox.retryInterval)(4, 200, async () => {
      try {
        await this.jwproxy.command('/session', 'POST', sessionCaps);
      } catch (err) {
        log.warn(`Failed to start Chromedriver session: ${err.message}`);
        throw err;
      }
    });
    this.changeState(Chromedriver.STATE_ONLINE);
  }

  async stop(emitStates = true) {
    if (emitStates) {
      this.changeState(Chromedriver.STATE_STOPPING);
    }

    try {
      await this.jwproxy.command('', 'DELETE');
      await this.proc.stop('SIGTERM', 20000);

      if (emitStates) {
        this.changeState(Chromedriver.STATE_STOPPED);
      }
    } catch (e) {
      log.error(e);
    }
  }

  changeState(state) {
    this.state = state;
    log.debug(`Changed state to '${state}'`);
    this.emit(Chromedriver.EVENT_CHANGED, {
      state
    });
  }

  async sendCommand(url, method, body) {
    return await this.jwproxy.command(url, method, body);
  }

  async proxyReq(req, res) {
    return await this.jwproxy.proxyReqRes(req, res);
  }

  async killAll() {
    let cmd = _appiumSupport.system.isWindows() ? `wmic process where "commandline like '%chromedriver.exe%--port=${this.proxyPort}%'" delete` : `pkill -15 -f "${this.chromedriver}.*--port=${this.proxyPort}"`;
    log.debug(`Killing any old chromedrivers, running: ${cmd}`);

    try {
      await _bluebird.default.promisify(_child_process.default.exec)(cmd);
      log.debug('Successfully cleaned up old chromedrivers');
    } catch (err) {
      log.warn('No old chromedrivers seem to exist');
    }

    if (this.adb) {
      log.debug(`Cleaning any old adb forwarded port socket connections`);

      try {
        for (let conn of await this.adb.getForwardList()) {
          if (conn.indexOf('webview_devtools') !== -1) {
            let params = conn.split(/\s+/);

            if (params.length > 1) {
              await this.adb.removePortForward(params[1].replace(/[\D]*/, ''));
            }
          }
        }
      } catch (err) {
        log.warn(`Unable to clean forwarded ports. Error: '${err.message}'. Continuing.`);
      }
    }
  }

  async hasWorkingWebview() {
    try {
      await this.jwproxy.command('/url', 'GET');
      return true;
    } catch (e) {
      return false;
    }
  }

}

exports.Chromedriver = Chromedriver;
Chromedriver.EVENT_ERROR = 'chromedriver_error';
Chromedriver.EVENT_CHANGED = 'stateChanged';
Chromedriver.STATE_STOPPED = 'stopped';
Chromedriver.STATE_STARTING = 'starting';
Chromedriver.STATE_ONLINE = 'online';
Chromedriver.STATE_STOPPING = 'stopping';
Chromedriver.STATE_RESTARTING = 'restarting';
var _default = Chromedriver;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jaHJvbWVkcml2ZXIuanMiXSwibmFtZXMiOlsibG9nIiwibG9nZ2VyIiwiZ2V0TG9nZ2VyIiwiTkVXX0NEX1ZFUlNJT05fRk9STUFUX01BSk9SX1ZFUlNJT04iLCJERUZBVUxUX0hPU1QiLCJNSU5fQ0RfVkVSU0lPTl9XSVRIX1czQ19TVVBQT1JUIiwiREVGQVVMVF9QT1JUIiwiQ0hST01FRFJJVkVSX0NIUk9NRV9NQVBQSU5HIiwiQ0hST01FX0JVTkRMRV9JRCIsIldFQlZJRVdfU0hFTExfQlVORExFX0lEIiwiV0VCVklFV19CVU5ETEVfSURTIiwiQ0hST01FRFJJVkVSX1RVVE9SSUFMIiwiQ0RfVkVSIiwicHJvY2VzcyIsImVudiIsIm5wbV9jb25maWdfY2hyb21lZHJpdmVyX3ZlcnNpb24iLCJDSFJPTUVEUklWRVJfVkVSU0lPTiIsImdldE1vc3RSZWNlbnRDaHJvbWVkcml2ZXIiLCJDRF9WRVJTSU9OX1RJTUVPVVQiLCJtYXBwaW5nIiwiXyIsImlzRW1wdHkiLCJFcnJvciIsImxhc3QiLCJrZXlzIiwic29ydCIsImNvbXBhcmVWZXJzaW9ucyIsIkNocm9tZWRyaXZlciIsImV2ZW50cyIsIkV2ZW50RW1pdHRlciIsImNvbnN0cnVjdG9yIiwiYXJncyIsImhvc3QiLCJwb3J0IiwidXNlU3lzdGVtRXhlY3V0YWJsZSIsImV4ZWN1dGFibGUiLCJleGVjdXRhYmxlRGlyIiwiYnVuZGxlSWQiLCJtYXBwaW5nUGF0aCIsImNtZEFyZ3MiLCJhZGIiLCJ2ZXJib3NlIiwibG9nUGF0aCIsImRpc2FibGVCdWlsZENoZWNrIiwiaXNBdXRvZG93bmxvYWRFbmFibGVkIiwicHJveHlIb3N0IiwicHJveHlQb3J0IiwicHJvYyIsImNocm9tZWRyaXZlciIsImV4ZWN1dGFibGVWZXJpZmllZCIsInN0YXRlIiwiU1RBVEVfU1RPUFBFRCIsImp3cHJveHkiLCJKV1Byb3h5Iiwic2VydmVyIiwic3RvcmFnZUNsaWVudCIsIkNocm9tZWRyaXZlclN0b3JhZ2VDbGllbnQiLCJjaHJvbWVkcml2ZXJEaXIiLCJjYXBhYmlsaXRpZXMiLCJkZXNpcmVkUHJvdG9jb2wiLCJQUk9UT0NPTFMiLCJNSlNPTldQIiwiZ2V0TWFwcGluZyIsImRlYnVnIiwiZnMiLCJleGlzdHMiLCJ3YXJuIiwiSlNPTiIsInBhcnNlIiwicmVhZEZpbGUiLCJlcnIiLCJlcnJvciIsIm1lc3NhZ2UiLCJjZFZlcnNpb24iLCJjaHJvbWVWZXJzaW9uIiwidG9QYWlycyIsInNlbXZlciIsImNvZXJjZSIsImdldENocm9tZWRyaXZlcnMiLCJleGVjdXRhYmxlcyIsImdsb2IiLCJsZW5ndGgiLCJjZHMiLCJtYXBDaHJvbWVkcml2ZXIiLCJsb2dFcnJvciIsInN0ZG91dCIsInN0ZGVyciIsImVyck1zZyIsInBhdGgiLCJiYXNlbmFtZSIsInRpbWVvdXQiLCJpbmNsdWRlcyIsIm1hdGNoIiwiZXhlYyIsInZlcnNpb24iLCJjb2VyY2VkVmVyc2lvbiIsIm1ham9yIiwibWlub3IiLCJtaW5DaHJvbWVWZXJzaW9uIiwiZmlsdGVyIiwiY2QiLCJhIiwiYiIsImluZm8iLCJnZXRDaHJvbWVWZXJzaW9uIiwiYXBpTGV2ZWwiLCJnZXRBcGlMZXZlbCIsImdldENvbXBhdGlibGVDaHJvbWVkcml2ZXIiLCJkaWRTdG9yYWdlU3luYyIsInN5bmNDaHJvbWVkcml2ZXJzIiwicmV0cmlldmVkTWFwcGluZyIsInJldHJpZXZlTWFwcGluZyIsInN0cmluZ2lmeSIsImRyaXZlcktleXMiLCJzeW5jRHJpdmVycyIsIm1pbkJyb3dzZXJWZXJzaW9uIiwic3luY2hyb25pemVkRHJpdmVyc01hcHBpbmciLCJyZWR1Y2UiLCJhY2MiLCJ4IiwiT2JqZWN0IiwiYXNzaWduIiwic2hvdWxkVXBkYXRlR2xvYmFsTWFwcGluZyIsIndyaXRlRmlsZSIsImUiLCJlcnJvckFuZFRocm93IiwiYXV0b2Rvd25sb2FkTXNnIiwiZ3QiLCJ2YWx1ZXMiLCJzdGFjayIsIndvcmtpbmdDZHMiLCJ2ZXJzaW9uT2JqIiwiYmluUGF0aCIsImluaXRDaHJvbWVkcml2ZXJQYXRoIiwic3luY1Byb3RvY29sIiwiVzNDIiwiY2hyb21lT3B0aW9ucyIsInczYyIsInN0YXJ0IiwiY2FwcyIsImVtaXRTdGFydGluZ1N0YXRlIiwiY2xvbmVEZWVwIiwibG9nZ2luZ1ByZWZzIiwiYnJvd3NlciIsImNoYW5nZVN0YXRlIiwiU1RBVEVfU1RBUlRJTkciLCJhZGJQb3J0IiwicHVzaCIsImlzQXJyYXkiLCJzdGFydERldGVjdG9yIiwiaW5kZXhPZiIsInByb2Nlc3NJc0FsaXZlIiwid2Vidmlld1ZlcnNpb24iLCJraWxsQWxsIiwiU3ViUHJvY2VzcyIsIm9uIiwib3V0IiwibGluZSIsInRyaW0iLCJzcGxpdCIsImNvZGUiLCJzaWduYWwiLCJTVEFURV9TVE9QUElORyIsIlNUQVRFX1JFU1RBUlRJTkciLCJtc2ciLCJqb2luIiwid2FpdEZvck9ubGluZSIsInN0YXJ0U2Vzc2lvbiIsImVtaXQiLCJFVkVOVF9FUlJPUiIsInN0b3AiLCJzZXNzaW9uSWQiLCJTVEFURV9PTkxJTkUiLCJyZXN0YXJ0IiwiY2hyb21lZHJpdmVyU3RvcHBlZCIsImdldFN0YXR1cyIsImNvbW1hbmQiLCJzZXNzaW9uQ2FwcyIsImFsd2F5c01hdGNoIiwiZGVzaXJlZENhcGFiaWxpdGllcyIsImVtaXRTdGF0ZXMiLCJFVkVOVF9DSEFOR0VEIiwic2VuZENvbW1hbmQiLCJ1cmwiLCJtZXRob2QiLCJib2R5IiwicHJveHlSZXEiLCJyZXEiLCJyZXMiLCJwcm94eVJlcVJlcyIsImNtZCIsInN5c3RlbSIsImlzV2luZG93cyIsIkIiLCJwcm9taXNpZnkiLCJjcCIsImNvbm4iLCJnZXRGb3J3YXJkTGlzdCIsInBhcmFtcyIsInJlbW92ZVBvcnRGb3J3YXJkIiwicmVwbGFjZSIsImhhc1dvcmtpbmdXZWJ2aWV3Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQSxN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QztlQUtleEksWSIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRyYW5zcGlsZTptYWluXG5cbmltcG9ydCBldmVudHMgZnJvbSAnZXZlbnRzJztcbmltcG9ydCB7IEpXUHJveHksIFBST1RPQ09MUyB9IGZyb20gJ2FwcGl1bS1iYXNlLWRyaXZlcic7XG5pbXBvcnQgY3AgZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgeyBzeXN0ZW0sIGZzLCBsb2dnZXIgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgeyByZXRyeUludGVydmFsLCBhc3luY21hcCB9IGZyb20gJ2FzeW5jYm94JztcbmltcG9ydCB7IFN1YlByb2Nlc3MsIGV4ZWMgfSBmcm9tICd0ZWVuX3Byb2Nlc3MnO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IHtcbiAgZ2V0Q2hyb21lVmVyc2lvbiwgZ2V0Q2hyb21lZHJpdmVyRGlyLCBnZXRDaHJvbWVkcml2ZXJCaW5hcnlQYXRoXG59IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHNlbXZlciBmcm9tICdzZW12ZXInO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGNvbXBhcmVWZXJzaW9ucyBmcm9tICdjb21wYXJlLXZlcnNpb25zJztcbmltcG9ydCBDaHJvbWVkcml2ZXJTdG9yYWdlQ2xpZW50IGZyb20gJy4vc3RvcmFnZS1jbGllbnQnO1xuaW1wb3J0IHsgdG9XM2NDYXBOYW1lcywgZ2V0Q2FwVmFsdWUgfSBmcm9tICcuL3Byb3RvY29sLWhlbHBlcnMnO1xuXG5cbmNvbnN0IGxvZyA9IGxvZ2dlci5nZXRMb2dnZXIoJ0Nocm9tZWRyaXZlcicpO1xuXG5jb25zdCBORVdfQ0RfVkVSU0lPTl9GT1JNQVRfTUFKT1JfVkVSU0lPTiA9IDczO1xuY29uc3QgREVGQVVMVF9IT1NUID0gJzEyNy4wLjAuMSc7XG5jb25zdCBNSU5fQ0RfVkVSU0lPTl9XSVRIX1czQ19TVVBQT1JUID0gNzU7XG5jb25zdCBERUZBVUxUX1BPUlQgPSA5NTE1O1xuY29uc3QgQ0hST01FRFJJVkVSX0NIUk9NRV9NQVBQSU5HID0ge1xuICAvLyBDaHJvbWVkcml2ZXIgdmVyc2lvbjogbWluaW11bSBDaHJvbWUgdmVyc2lvblxuICAnNzguMC4zOTA0LjcwJzogJzc4LjAuMzkwNC43MCcsXG4gICc3Ny4wLjM4NjUuNDAnOiAnNzcuMC4zODY1LjQwJyxcbiAgJzc2LjAuMzgwOS4xMjYnOiAnNzYuMC4zODA5LjEyNicsXG4gICc3Ni4wLjM4MDkuNjgnOiAnNzYuMC4zODA5LjY4JyxcbiAgJzc2LjAuMzgwOS4yNSc6ICc3Ni4wLjM4MDkuMjUnLFxuICAnNzYuMC4zODA5LjEyJzogJzc2LjAuMzgwOS4xMicsXG4gICc3NS4wLjM3NzAuMTQwJzogJzc1LjAuMzc3MC4xNDAnLFxuICAnNzUuMC4zNzcwLjkwJzogJzc1LjAuMzc3MC45MCcsXG4gICc3NS4wLjM3NzAuOCc6ICc3NS4wLjM3NzAuOCcsXG4gICc3NC4wLjM3MjkuNic6ICc3NC4wLjM3MjknLFxuICAnNzMuMC4zNjgzLjY4JzogJzcwLjAuMzUzOCcsXG4gICcyLjQ2JzogJzcxLjAuMzU3OCcsXG4gICcyLjQ1JzogJzcwLjAuMCcsXG4gICcyLjQ0JzogJzY5LjAuMzQ5NycsXG4gICcyLjQzJzogJzY5LjAuMzQ5NycsXG4gICcyLjQyJzogJzY4LjAuMzQ0MCcsXG4gICcyLjQxJzogJzY3LjAuMzM5NicsXG4gICcyLjQwJzogJzY2LjAuMzM1OScsXG4gICcyLjM5JzogJzY2LjAuMzM1OScsXG4gICcyLjM4JzogJzY1LjAuMzMyNScsXG4gICcyLjM3JzogJzY0LjAuMzI4MicsXG4gICcyLjM2JzogJzYzLjAuMzIzOScsXG4gICcyLjM1JzogJzYyLjAuMzIwMicsXG4gICcyLjM0JzogJzYxLjAuMzE2MycsXG4gICcyLjMzJzogJzYwLjAuMzExMicsXG4gICcyLjMyJzogJzU5LjAuMzA3MScsXG4gICcyLjMxJzogJzU4LjAuMzAyOScsXG4gICcyLjMwJzogJzU4LjAuMzAyOScsXG4gICcyLjI5JzogJzU3LjAuMjk4NycsXG4gICcyLjI4JzogJzU1LjAuMjg4MycsXG4gICcyLjI3JzogJzU0LjAuMjg0MCcsXG4gICcyLjI2JzogJzUzLjAuMjc4NScsXG4gICcyLjI1JzogJzUzLjAuMjc4NScsXG4gICcyLjI0JzogJzUyLjAuMjc0MycsXG4gICcyLjIzJzogJzUxLjAuMjcwNCcsXG4gICcyLjIyJzogJzQ5LjAuMjYyMycsXG4gICcyLjIxJzogJzQ2LjAuMjQ5MCcsXG4gICcyLjIwJzogJzQzLjAuMjM1NycsXG4gICcyLjE5JzogJzQzLjAuMjM1NycsXG4gICcyLjE4JzogJzQzLjAuMjM1NycsXG4gICcyLjE3JzogJzQyLjAuMjMxMScsXG4gICcyLjE2JzogJzQyLjAuMjMxMScsXG4gICcyLjE1JzogJzQwLjAuMjIxNCcsXG4gICcyLjE0JzogJzM5LjAuMjE3MScsXG4gICcyLjEzJzogJzM4LjAuMjEyNScsXG4gICcyLjEyJzogJzM2LjAuMTk4NScsXG4gICcyLjExJzogJzM2LjAuMTk4NScsXG4gICcyLjEwJzogJzMzLjAuMTc1MScsXG4gICcyLjknOiAnMzEuMC4xNjUwJyxcbiAgJzIuOCc6ICczMC4wLjE1NzMnLFxuICAnMi43JzogJzMwLjAuMTU3MycsXG4gICcyLjYnOiAnMjkuMC4xNTQ1JyxcbiAgJzIuNSc6ICcyOS4wLjE1NDUnLFxuICAnMi40JzogJzI5LjAuMTU0NScsXG4gICcyLjMnOiAnMjguMC4xNTAwJyxcbiAgJzIuMic6ICcyNy4wLjE0NTMnLFxuICAnMi4xJzogJzI3LjAuMTQ1MycsXG4gICcyLjAnOiAnMjcuMC4xNDUzJyxcbn07XG5jb25zdCBDSFJPTUVfQlVORExFX0lEID0gJ2NvbS5hbmRyb2lkLmNocm9tZSc7XG5jb25zdCBXRUJWSUVXX1NIRUxMX0JVTkRMRV9JRCA9ICdvcmcuY2hyb21pdW0ud2Vidmlld19zaGVsbCc7XG5jb25zdCBXRUJWSUVXX0JVTkRMRV9JRFMgPSBbXG4gICdjb20uZ29vZ2xlLmFuZHJvaWQud2VidmlldycsXG4gICdjb20uYW5kcm9pZC53ZWJ2aWV3Jyxcbl07XG5jb25zdCBDSFJPTUVEUklWRVJfVFVUT1JJQUwgPSAnaHR0cHM6Ly9naXRodWIuY29tL2FwcGl1bS9hcHBpdW0vYmxvYi9tYXN0ZXIvZG9jcy9lbi93cml0aW5nLXJ1bm5pbmctYXBwaXVtL3dlYi9jaHJvbWVkcml2ZXIubWQnO1xuXG5jb25zdCBDRF9WRVIgPSBwcm9jZXNzLmVudi5ucG1fY29uZmlnX2Nocm9tZWRyaXZlcl92ZXJzaW9uIHx8XG4gICAgICAgICAgICAgICBwcm9jZXNzLmVudi5DSFJPTUVEUklWRVJfVkVSU0lPTiB8fFxuICAgICAgICAgICAgICAgZ2V0TW9zdFJlY2VudENocm9tZWRyaXZlcigpO1xuXG5jb25zdCBDRF9WRVJTSU9OX1RJTUVPVVQgPSA1MDAwO1xuXG5mdW5jdGlvbiBnZXRNb3N0UmVjZW50Q2hyb21lZHJpdmVyIChtYXBwaW5nID0gQ0hST01FRFJJVkVSX0NIUk9NRV9NQVBQSU5HKSB7XG4gIGlmIChfLmlzRW1wdHkobWFwcGluZykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBnZXQgbW9zdCByZWNlbnQgQ2hyb21lZHJpdmVyIGZyb20gZW1wdHkgbWFwcGluZycpO1xuICB9XG4gIHJldHVybiBfLmxhc3QoXy5rZXlzKG1hcHBpbmcpLnNvcnQoY29tcGFyZVZlcnNpb25zKSk7XG59XG5cbmNsYXNzIENocm9tZWRyaXZlciBleHRlbmRzIGV2ZW50cy5FdmVudEVtaXR0ZXIge1xuICBjb25zdHJ1Y3RvciAoYXJncyA9IHt9KSB7XG4gICAgc3VwZXIoKTtcblxuICAgIGNvbnN0IHtcbiAgICAgIGhvc3QgPSBERUZBVUxUX0hPU1QsXG4gICAgICBwb3J0ID0gREVGQVVMVF9QT1JULFxuICAgICAgdXNlU3lzdGVtRXhlY3V0YWJsZSA9IGZhbHNlLFxuICAgICAgZXhlY3V0YWJsZSxcbiAgICAgIGV4ZWN1dGFibGVEaXIgPSBnZXRDaHJvbWVkcml2ZXJEaXIoKSxcbiAgICAgIGJ1bmRsZUlkLFxuICAgICAgbWFwcGluZ1BhdGgsXG4gICAgICBjbWRBcmdzLFxuICAgICAgYWRiLFxuICAgICAgdmVyYm9zZSxcbiAgICAgIGxvZ1BhdGgsXG4gICAgICBkaXNhYmxlQnVpbGRDaGVjayxcbiAgICAgIGlzQXV0b2Rvd25sb2FkRW5hYmxlZCA9IGZhbHNlLFxuICAgIH0gPSBhcmdzO1xuXG4gICAgdGhpcy5wcm94eUhvc3QgPSBob3N0O1xuICAgIHRoaXMucHJveHlQb3J0ID0gcG9ydDtcbiAgICB0aGlzLmFkYiA9IGFkYjtcbiAgICB0aGlzLmNtZEFyZ3MgPSBjbWRBcmdzO1xuICAgIHRoaXMucHJvYyA9IG51bGw7XG4gICAgdGhpcy51c2VTeXN0ZW1FeGVjdXRhYmxlID0gdXNlU3lzdGVtRXhlY3V0YWJsZTtcbiAgICB0aGlzLmNocm9tZWRyaXZlciA9IGV4ZWN1dGFibGU7XG4gICAgdGhpcy5leGVjdXRhYmxlRGlyID0gZXhlY3V0YWJsZURpcjtcbiAgICB0aGlzLm1hcHBpbmdQYXRoID0gbWFwcGluZ1BhdGg7XG4gICAgdGhpcy5idW5kbGVJZCA9IGJ1bmRsZUlkO1xuICAgIHRoaXMuZXhlY3V0YWJsZVZlcmlmaWVkID0gZmFsc2U7XG4gICAgdGhpcy5zdGF0ZSA9IENocm9tZWRyaXZlci5TVEFURV9TVE9QUEVEO1xuICAgIHRoaXMuandwcm94eSA9IG5ldyBKV1Byb3h5KHtzZXJ2ZXI6IHRoaXMucHJveHlIb3N0LCBwb3J0OiB0aGlzLnByb3h5UG9ydH0pO1xuICAgIHRoaXMudmVyYm9zZSA9IHZlcmJvc2U7XG4gICAgdGhpcy5sb2dQYXRoID0gbG9nUGF0aDtcbiAgICB0aGlzLmRpc2FibGVCdWlsZENoZWNrID0gISFkaXNhYmxlQnVpbGRDaGVjaztcbiAgICB0aGlzLnN0b3JhZ2VDbGllbnQgPSBpc0F1dG9kb3dubG9hZEVuYWJsZWRcbiAgICAgID8gbmV3IENocm9tZWRyaXZlclN0b3JhZ2VDbGllbnQoeyBjaHJvbWVkcml2ZXJEaXI6IHRoaXMuZXhlY3V0YWJsZURpciB9KVxuICAgICAgOiBudWxsO1xuICAgIHRoaXMuY2FwYWJpbGl0aWVzID0ge307XG4gICAgdGhpcy5kZXNpcmVkUHJvdG9jb2wgPSBQUk9UT0NPTFMuTUpTT05XUDtcbiAgfVxuXG4gIGFzeW5jIGdldE1hcHBpbmcgKCkge1xuICAgIGxldCBtYXBwaW5nID0gQ0hST01FRFJJVkVSX0NIUk9NRV9NQVBQSU5HO1xuICAgIGlmICh0aGlzLm1hcHBpbmdQYXRoKSB7XG4gICAgICBsb2cuZGVidWcoYEF0dGVtcHRpbmcgdG8gdXNlIENocm9tZWRyaXZlci1DaHJvbWUgbWFwcGluZyBmcm9tICcke3RoaXMubWFwcGluZ1BhdGh9J2ApO1xuICAgICAgaWYgKCFhd2FpdCBmcy5leGlzdHModGhpcy5tYXBwaW5nUGF0aCkpIHtcbiAgICAgICAgbG9nLndhcm4oYE5vIGZpbGUgZm91bmQgYXQgJyR7dGhpcy5tYXBwaW5nUGF0aH0nLiBVc2luZyBkZWZhdWx0IG1hcHBpbmdgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbWFwcGluZyA9IEpTT04ucGFyc2UoYXdhaXQgZnMucmVhZEZpbGUodGhpcy5tYXBwaW5nUGF0aCkpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBsb2cuZXJyb3IoYEVycm9yIHBhcnNpbmcgbWFwcGluZyBmcm9tICcke3RoaXMubWFwcGluZ1BhdGh9JzogJHtlcnIubWVzc2FnZX1gKTtcbiAgICAgICAgICBsb2cud2FybignVXNpbmcgZGVmYXVsdCBtYXBwaW5nJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBtYWtlIHN1cmUgdGhhdCB0aGUgdmFsdWVzIGZvciBtaW5pbXVtIGNocm9tZSB2ZXJzaW9uIGFyZSBzZW12ZXIgY29tcGxpYW50XG4gICAgZm9yIChjb25zdCBbY2RWZXJzaW9uLCBjaHJvbWVWZXJzaW9uXSBvZiBfLnRvUGFpcnMobWFwcGluZykpIHtcbiAgICAgIG1hcHBpbmdbY2RWZXJzaW9uXSA9IHNlbXZlci5jb2VyY2UoY2hyb21lVmVyc2lvbik7XG4gICAgfVxuICAgIHJldHVybiBtYXBwaW5nO1xuICB9XG5cbiAgYXN5bmMgZ2V0Q2hyb21lZHJpdmVycyAobWFwcGluZykge1xuICAgIC8vIGdvIHRocm91Z2ggdGhlIHZlcnNpb25zIGF2YWlsYWJsZVxuICAgIGNvbnN0IGV4ZWN1dGFibGVzID0gYXdhaXQgZnMuZ2xvYihgJHt0aGlzLmV4ZWN1dGFibGVEaXJ9LypgKTtcbiAgICBsb2cuZGVidWcoYEZvdW5kICR7ZXhlY3V0YWJsZXMubGVuZ3RofSBleGVjdXRhYmxlJHtleGVjdXRhYmxlcy5sZW5ndGggPT09IDEgPyAnJyA6ICdzJ30gYCArXG4gICAgICBgaW4gJyR7dGhpcy5leGVjdXRhYmxlRGlyfSdgKTtcbiAgICBjb25zdCBjZHMgPSAoYXdhaXQgYXN5bmNtYXAoZXhlY3V0YWJsZXMsIGFzeW5jIGZ1bmN0aW9uIG1hcENocm9tZWRyaXZlciAoZXhlY3V0YWJsZSkge1xuICAgICAgY29uc3QgbG9nRXJyb3IgPSAoe21lc3NhZ2UsIHN0ZG91dCA9IG51bGwsIHN0ZGVyciA9IG51bGx9KSA9PiB7XG4gICAgICAgIGxldCBlcnJNc2cgPSBgQ2Fubm90IHJldHJpZXZlIHZlcnNpb24gbnVtYmVyIGZyb20gJyR7cGF0aC5iYXNlbmFtZShleGVjdXRhYmxlKX0nIENocm9tZWRyaXZlciBiaW5hcnkuIGAgK1xuICAgICAgICAgIGBNYWtlIHN1cmUgaXQgcmV0dXJucyBhIHZhbGlkIHZlcnNpb24gc3RyaW5nIGluIHJlc3BvbnNlIHRvICctLXZlcnNpb24nIGNvbW1hbmQgbGluZSBhcmd1bWVudC4gJHttZXNzYWdlfWA7XG4gICAgICAgIGlmIChzdGRvdXQpIHtcbiAgICAgICAgICBlcnJNc2cgKz0gYFxcblN0ZG91dDogJHtzdGRvdXR9YDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RkZXJyKSB7XG4gICAgICAgICAgZXJyTXNnICs9IGBcXG5TdGRlcnI6ICR7c3RkZXJyfWA7XG4gICAgICAgIH1cbiAgICAgICAgbG9nLndhcm4oZXJyTXNnKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9O1xuXG4gICAgICBsZXQgc3Rkb3V0O1xuICAgICAgbGV0IHN0ZGVycjtcbiAgICAgIHRyeSB7XG4gICAgICAgICh7c3Rkb3V0LCBzdGRlcnJ9ID0gYXdhaXQgZXhlYyhleGVjdXRhYmxlLCBbJy0tdmVyc2lvbiddLCB7XG4gICAgICAgICAgdGltZW91dDogQ0RfVkVSU0lPTl9USU1FT1VULFxuICAgICAgICB9KSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgaWYgKCEoZXJyLm1lc3NhZ2UgfHwgJycpLmluY2x1ZGVzKCd0aW1lZCBvdXQnKSAmJiAhKGVyci5zdGRvdXQgfHwgJycpLmluY2x1ZGVzKCdTdGFydGluZyBDaHJvbWVEcml2ZXInKSkge1xuICAgICAgICAgIHJldHVybiBsb2dFcnJvcihlcnIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgdGhpcyBoYXMgdGltZWQgb3V0LCBpdCBoYXMgYWN0dWFsbHkgc3RhcnRlZCBDaHJvbWVkcml2ZXIsXG4gICAgICAgIC8vIGluIHdoaWNoIGNhc2UgdGhlcmUgd2lsbCBhbHNvIGJlIHRoZSB2ZXJzaW9uIHN0cmluZyBpbiB0aGUgb3V0cHV0XG4gICAgICAgIHN0ZG91dCA9IGVyci5zdGRvdXQ7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG1hdGNoID0gL0Nocm9tZURyaXZlclxccytcXCg/dj8oW1xcZC5dKylcXCk/L2kuZXhlYyhzdGRvdXQpOyAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL3pwajV3QS8xXG4gICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIHJldHVybiBsb2dFcnJvcih7bWVzc2FnZTogJ0Nhbm5vdCBwYXJzZSB0aGUgdmVyc2lvbiBzdHJpbmcnLCBzdGRvdXQsIHN0ZGVycn0pO1xuICAgICAgfVxuICAgICAgbGV0IHZlcnNpb24gPSBtYXRjaFsxXTtcbiAgICAgIGNvbnN0IGNvZXJjZWRWZXJzaW9uID0gc2VtdmVyLmNvZXJjZSh2ZXJzaW9uKTtcbiAgICAgIGlmIChjb2VyY2VkVmVyc2lvbikge1xuICAgICAgICAvLyBiZWZvcmUgMjAxOS0wMy0wNiB2ZXJzaW9ucyB3ZXJlIG9mIHRoZSBmb3JtIG1ham9yLm1pbm9yXG4gICAgICAgIGlmIChjb2VyY2VkVmVyc2lvbi5tYWpvciA8IE5FV19DRF9WRVJTSU9OX0ZPUk1BVF9NQUpPUl9WRVJTSU9OKSB7XG4gICAgICAgICAgdmVyc2lvbiA9IGAke2NvZXJjZWRWZXJzaW9uLm1ham9yfS4ke2NvZXJjZWRWZXJzaW9uLm1pbm9yfWA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGV4ZWN1dGFibGUsXG4gICAgICAgIHZlcnNpb24sXG4gICAgICAgIG1pbkNocm9tZVZlcnNpb246IG1hcHBpbmdbdmVyc2lvbl0sXG4gICAgICB9O1xuICAgIH0pKVxuICAgICAgLmZpbHRlcigoY2QpID0+ICEhY2QpXG4gICAgICAuc29ydCgoYSwgYikgPT4gY29tcGFyZVZlcnNpb25zKGIudmVyc2lvbiwgYS52ZXJzaW9uKSk7XG4gICAgaWYgKF8uaXNFbXB0eShjZHMpKSB7XG4gICAgICBsb2cuaW5mbyhgTm8gQ2hyb21lZHJpdmVycyB3ZXJlIGZvdW5kIGluICcke3RoaXMuZXhlY3V0YWJsZURpcn0nYCk7XG4gICAgICByZXR1cm4gY2RzO1xuICAgIH1cbiAgICBsb2cuZGVidWcoYFRoZSBmb2xsb3dpbmcgQ2hyb21lZHJpdmVyIGV4ZWN1dGFibGVzIHdlcmUgZm91bmQ6YCk7XG4gICAgZm9yIChjb25zdCBjZCBvZiBjZHMpIHtcbiAgICAgIGxvZy5kZWJ1ZyhgICAgICcke2NkLmV4ZWN1dGFibGV9JyAodmVyc2lvbiAnJHtjZC52ZXJzaW9ufScsIG1pbmltdW0gQ2hyb21lIHZlcnNpb24gJyR7Y2QubWluQ2hyb21lVmVyc2lvbiA/IGNkLm1pbkNocm9tZVZlcnNpb24gOiAnVW5rbm93bid9JylgKTtcbiAgICB9XG4gICAgcmV0dXJuIGNkcztcbiAgfVxuXG4gIGFzeW5jIGdldENocm9tZVZlcnNpb24gKCkge1xuICAgIGxldCBjaHJvbWVWZXJzaW9uO1xuXG4gICAgLy8gaW4gY2FzZSBvZiBXZWJWaWV3IEJyb3dzZXIgVGVzdGVyLCBzaW1wbHkgdHJ5IHRvIGZpbmQgdGhlIHVuZGVybHlpbmcgd2Vidmlld1xuICAgIGlmICh0aGlzLmJ1bmRsZUlkID09PSBXRUJWSUVXX1NIRUxMX0JVTkRMRV9JRCkge1xuICAgICAgZm9yIChjb25zdCBidW5kbGVJZCBvZiBXRUJWSUVXX0JVTkRMRV9JRFMpIHtcbiAgICAgICAgY2hyb21lVmVyc2lvbiA9IGF3YWl0IGdldENocm9tZVZlcnNpb24odGhpcy5hZGIsIGJ1bmRsZUlkKTtcbiAgICAgICAgaWYgKGNocm9tZVZlcnNpb24pIHtcbiAgICAgICAgICB0aGlzLmJ1bmRsZUlkID0gYnVuZGxlSWQ7XG4gICAgICAgICAgcmV0dXJuIHNlbXZlci5jb2VyY2UoY2hyb21lVmVyc2lvbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8vIG9uIEFuZHJvaWQgNy05IHdlYnZpZXdzIGFyZSBiYWNrZWQgYnkgdGhlIG1haW4gQ2hyb21lLCBub3QgdGhlIHN5c3RlbSB3ZWJ2aWV3XG4gICAgaWYgKHRoaXMuYWRiKSB7XG4gICAgICBjb25zdCBhcGlMZXZlbCA9IGF3YWl0IHRoaXMuYWRiLmdldEFwaUxldmVsKCk7XG4gICAgICBpZiAoYXBpTGV2ZWwgPj0gMjQgJiYgYXBpTGV2ZWwgPD0gMjgpIHtcbiAgICAgICAgdGhpcy5idW5kbGVJZCA9IENIUk9NRV9CVU5ETEVfSUQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gdHJ5IG91dCB3ZWJ2aWV3cyB3aGVuIG5vIGJ1bmRsZSBpZCBpcyBzZW50IGluXG4gICAgaWYgKCF0aGlzLmJ1bmRsZUlkKSB7XG4gICAgICAvLyBkZWZhdWx0IHRvIHRoZSBnZW5lcmljIENocm9tZSBidW5kbGVcbiAgICAgIHRoaXMuYnVuZGxlSWQgPSBDSFJPTUVfQlVORExFX0lEO1xuXG4gICAgICAvLyB3ZSBoYXZlIGEgd2VidmlldyBvZiBzb21lIHNvcnQsIHNvIHRyeSB0byBmaW5kIHRoZSBidW5kbGUgdmVyc2lvblxuICAgICAgZm9yIChjb25zdCBidW5kbGVJZCBvZiBXRUJWSUVXX0JVTkRMRV9JRFMpIHtcbiAgICAgICAgY2hyb21lVmVyc2lvbiA9IGF3YWl0IGdldENocm9tZVZlcnNpb24odGhpcy5hZGIsIGJ1bmRsZUlkKTtcbiAgICAgICAgaWYgKGNocm9tZVZlcnNpb24pIHtcbiAgICAgICAgICB0aGlzLmJ1bmRsZUlkID0gYnVuZGxlSWQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBpZiB3ZSBkbyBub3QgaGF2ZSBhIGNocm9tZSB2ZXJzaW9uLCBpdCBtdXN0IG5vdCBiZSBhIHdlYnZpZXdcbiAgICBpZiAoIWNocm9tZVZlcnNpb24pIHtcbiAgICAgIGNocm9tZVZlcnNpb24gPSBhd2FpdCBnZXRDaHJvbWVWZXJzaW9uKHRoaXMuYWRiLCB0aGlzLmJ1bmRsZUlkKTtcbiAgICB9XG5cbiAgICAvLyBtYWtlIHN1cmUgaXQgaXMgc2VtdmVyLCBzbyBsYXRlciBjaGVja3Mgd29uJ3QgZmFpbFxuICAgIHJldHVybiBjaHJvbWVWZXJzaW9uID8gc2VtdmVyLmNvZXJjZShjaHJvbWVWZXJzaW9uKSA6IG51bGw7XG4gIH1cblxuICBhc3luYyBnZXRDb21wYXRpYmxlQ2hyb21lZHJpdmVyICgpIHtcbiAgICBpZiAoIXRoaXMuYWRiKSB7XG4gICAgICByZXR1cm4gYXdhaXQgZ2V0Q2hyb21lZHJpdmVyQmluYXJ5UGF0aCgpO1xuICAgIH1cblxuICAgIGNvbnN0IG1hcHBpbmcgPSBhd2FpdCB0aGlzLmdldE1hcHBpbmcoKTtcbiAgICBsZXQgZGlkU3RvcmFnZVN5bmMgPSBmYWxzZTtcbiAgICBjb25zdCBzeW5jQ2hyb21lZHJpdmVycyA9IGFzeW5jIChjaHJvbWVWZXJzaW9uKSA9PiB7XG4gICAgICBkaWRTdG9yYWdlU3luYyA9IHRydWU7XG4gICAgICBjb25zdCByZXRyaWV2ZWRNYXBwaW5nID0gYXdhaXQgdGhpcy5zdG9yYWdlQ2xpZW50LnJldHJpZXZlTWFwcGluZygpO1xuICAgICAgbG9nLmRlYnVnKCdHb3QgY2hyb21lZHJpdmVycyBtYXBwaW5nIGZyb20gdGhlIHN0b3JhZ2U6ICcgK1xuICAgICAgICBKU09OLnN0cmluZ2lmeShyZXRyaWV2ZWRNYXBwaW5nLCBudWxsLCAyKSk7XG4gICAgICBjb25zdCBkcml2ZXJLZXlzID0gYXdhaXQgdGhpcy5zdG9yYWdlQ2xpZW50LnN5bmNEcml2ZXJzKHtcbiAgICAgICAgbWluQnJvd3NlclZlcnNpb246IGNocm9tZVZlcnNpb24ubWFqb3IsXG4gICAgICB9KTtcbiAgICAgIGlmIChfLmlzRW1wdHkoZHJpdmVyS2V5cykpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgY29uc3Qgc3luY2hyb25pemVkRHJpdmVyc01hcHBpbmcgPSBkcml2ZXJLZXlzLnJlZHVjZSgoYWNjLCB4KSA9PiB7XG4gICAgICAgIGNvbnN0IHt2ZXJzaW9uLCBtaW5Ccm93c2VyVmVyc2lvbn0gPSByZXRyaWV2ZWRNYXBwaW5nW3hdO1xuICAgICAgICBhY2NbdmVyc2lvbl0gPSBtaW5Ccm93c2VyVmVyc2lvbjtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH0sIHt9KTtcbiAgICAgIE9iamVjdC5hc3NpZ24obWFwcGluZywgc3luY2hyb25pemVkRHJpdmVyc01hcHBpbmcpO1xuICAgICAgbGV0IHNob3VsZFVwZGF0ZUdsb2JhbE1hcHBpbmcgPSB0cnVlO1xuICAgICAgaWYgKGF3YWl0IGZzLmV4aXN0cyh0aGlzLm1hcHBpbmdQYXRoKSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGF3YWl0IGZzLndyaXRlRmlsZSh0aGlzLm1hcHBpbmdQYXRoLCBKU09OLnN0cmluZ2lmeShtYXBwaW5nLCBudWxsLCAyKSwgJ3V0ZjgnKTtcbiAgICAgICAgICBzaG91bGRVcGRhdGVHbG9iYWxNYXBwaW5nID0gZmFsc2U7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBsb2cud2FybihgQ2Fubm90IHN0b3JlIHRoZSB1cGRhdGVkIGNocm9tZWRyaXZlcnMgbWFwcGluZyBpbnRvICcke3RoaXMubWFwcGluZ1BhdGh9Jy4gYCArXG4gICAgICAgICAgICBgVGhpcyBtYXkgcmVkdWNlIHRoZSBwZXJmb3JtYW5jZSBvZiBmdXJ0aGVyIGV4ZWN1dGlvbnMuIE9yaWdpbmFsIGVycm9yOiAke2UubWVzc2FnZX1gKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHNob3VsZFVwZGF0ZUdsb2JhbE1hcHBpbmcpIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihDSFJPTUVEUklWRVJfQ0hST01FX01BUFBJTkcsIG1hcHBpbmcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcblxuICAgIGRvIHtcbiAgICAgIGNvbnN0IGNkcyA9IGF3YWl0IHRoaXMuZ2V0Q2hyb21lZHJpdmVycyhtYXBwaW5nKTtcblxuICAgICAgaWYgKHRoaXMuZGlzYWJsZUJ1aWxkQ2hlY2spIHtcbiAgICAgICAgaWYgKF8uaXNFbXB0eShjZHMpKSB7XG4gICAgICAgICAgbG9nLmVycm9yQW5kVGhyb3coYFRoZXJlIG11c3QgYmUgYXQgbGVhc3Qgb25lIENocm9tZWRyaXZlciBleGVjdXRhYmxlIGF2YWlsYWJsZSBmb3IgdXNlIGlmIGAgK1xuICAgICAgICAgICAgYCdjaHJvbWVkcml2ZXJEaXNhYmxlQnVpbGRDaGVjaycgY2FwYWJpbGl0eSBpcyBzZXQgdG8gJ3RydWUnYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qge3ZlcnNpb24sIGV4ZWN1dGFibGV9ID0gY2RzWzBdO1xuICAgICAgICBsb2cud2FybihgQ2hyb21lIGJ1aWxkIGNoZWNrIGRpc2FibGVkLiBVc2luZyBtb3N0IHJlY2VudCBDaHJvbWVkcml2ZXIgdmVyc2lvbiAoJHt2ZXJzaW9ufSwgYXQgJyR7ZXhlY3V0YWJsZX0nKWApO1xuICAgICAgICBsb2cud2FybihgSWYgdGhpcyBpcyB3cm9uZywgc2V0ICdjaHJvbWVkcml2ZXJEaXNhYmxlQnVpbGRDaGVjaycgY2FwYWJpbGl0eSB0byAnZmFsc2UnYCk7XG4gICAgICAgIHJldHVybiBleGVjdXRhYmxlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBjaHJvbWVWZXJzaW9uID0gYXdhaXQgdGhpcy5nZXRDaHJvbWVWZXJzaW9uKCk7XG4gICAgICBpZiAoIWNocm9tZVZlcnNpb24pIHtcbiAgICAgICAgLy8gdW5hYmxlIHRvIGdldCB0aGUgY2hyb21lIHZlcnNpb25cbiAgICAgICAgaWYgKF8uaXNFbXB0eShjZHMpKSB7XG4gICAgICAgICAgbG9nLmVycm9yQW5kVGhyb3coYFRoZXJlIG11c3QgYmUgYXQgbGVhc3Qgb25lIENocm9tZWRyaXZlciBleGVjdXRhYmxlIGF2YWlsYWJsZSBmb3IgdXNlIGlmIGAgK1xuICAgICAgICAgICAgYHRoZSBjdXJyZW50IENocm9tZSB2ZXJzaW9uIGNhbm5vdCBiZSBkZXRlcm1pbmVkYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qge3ZlcnNpb24sIGV4ZWN1dGFibGV9ID0gY2RzWzBdO1xuICAgICAgICBsb2cud2FybihgVW5hYmxlIHRvIGRpc2NvdmVyIENocm9tZSB2ZXJzaW9uLiBVc2luZyBDaHJvbWVkcml2ZXIgJHt2ZXJzaW9ufSBhdCAnJHtleGVjdXRhYmxlfSdgKTtcbiAgICAgICAgcmV0dXJuIGV4ZWN1dGFibGU7XG4gICAgICB9XG5cbiAgICAgIGxvZy5kZWJ1ZyhgRm91bmQgQ2hyb21lIGJ1bmRsZSAnJHt0aGlzLmJ1bmRsZUlkfScgdmVyc2lvbiAnJHtjaHJvbWVWZXJzaW9ufSdgKTtcblxuICAgICAgY29uc3QgYXV0b2Rvd25sb2FkTXNnID0gdGhpcy5zdG9yYWdlQ2xpZW50ICYmIGRpZFN0b3JhZ2VTeW5jXG4gICAgICAgID8gJydcbiAgICAgICAgOiAnLiBZb3UgY291bGQgYWxzbyB0cnkgdG8gZW5hYmxlIGF1dG9tYXRlZCBjaHJvbWVkcml2ZXJzIGRvd25sb2FkIHNlcnZlciBmZWF0dXJlJztcbiAgICAgIGlmIChfLmlzRW1wdHkobWFwcGluZykgfHwgc2VtdmVyLmd0KGNocm9tZVZlcnNpb24sIF8udmFsdWVzKG1hcHBpbmcpWzBdKSkge1xuICAgICAgICBpZiAodGhpcy5zdG9yYWdlQ2xpZW50ICYmICFkaWRTdG9yYWdlU3luYykge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoYXdhaXQgc3luY0Nocm9tZWRyaXZlcnMoY2hyb21lVmVyc2lvbikpIHtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgbG9nLndhcm4oZS5zdGFjayk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIHRoaXMgaXMgYSBjaHJvbWUgYWJvdmUgdGhlIGxhdGVzdCB2ZXJzaW9uIHdlIGtub3cgYWJvdXQsXG4gICAgICAgIC8vIGFuZCB3ZSBoYXZlIGEgY2hyb21lZHJpdmVyIHRoYXQgaXMgYmV5b25kIHdoYXQgd2Uga25vdyxcbiAgICAgICAgLy8gc28gdXNlZSB0aGUgbW9zdCByZWNlbnQgY2hyb21lZHJpdmVyIHRoYXQgd2UgZm91bmRcbiAgICAgICAgaWYgKCFfLmlzRW1wdHkoY2RzKSAmJiAhY2RzWzBdLm1pbkNocm9tZVZlcnNpb24pIHtcbiAgICAgICAgICBjb25zdCB7dmVyc2lvbiwgZXhlY3V0YWJsZX0gPSBjZHNbMF07XG4gICAgICAgICAgbG9nLndhcm4oYE5vIGtub3duIENocm9tZWRyaXZlciBhdmFpbGFibGUgdG8gYXV0b21hdGUgQ2hyb21lIHZlcnNpb24gJyR7Y2hyb21lVmVyc2lvbn0nYCk7XG4gICAgICAgICAgbG9nLndhcm4oYFVzaW5nIENocm9tZWRyaXZlciB2ZXJzaW9uICcke3ZlcnNpb259Jywgd2hpY2ggaGFzIG5vdCBiZWVuIHRlc3RlZCB3aXRoIEFwcGl1bWAgK1xuICAgICAgICAgICAgYXV0b2Rvd25sb2FkTXNnKTtcbiAgICAgICAgICByZXR1cm4gZXhlY3V0YWJsZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCB3b3JraW5nQ2RzID0gY2RzLmZpbHRlcigoY2QpID0+IHtcbiAgICAgICAgY29uc3QgdmVyc2lvbk9iaiA9IHNlbXZlci5jb2VyY2UoY2QubWluQ2hyb21lVmVyc2lvbik7XG4gICAgICAgIHJldHVybiB2ZXJzaW9uT2JqICYmIGNocm9tZVZlcnNpb24ubWFqb3IgPT09IHZlcnNpb25PYmoubWFqb3I7XG4gICAgICB9KTtcbiAgICAgIGlmIChfLmlzRW1wdHkod29ya2luZ0NkcykpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RvcmFnZUNsaWVudCAmJiAhZGlkU3RvcmFnZVN5bmMpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKGF3YWl0IHN5bmNDaHJvbWVkcml2ZXJzKGNocm9tZVZlcnNpb24pKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGxvZy53YXJuKGUuc3RhY2spO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsb2cuZXJyb3JBbmRUaHJvdyhgTm8gQ2hyb21lZHJpdmVyIGZvdW5kIHRoYXQgY2FuIGF1dG9tYXRlIENocm9tZSAnJHtjaHJvbWVWZXJzaW9ufScuIGAgK1xuICAgICAgICAgIGBTZWUgJHtDSFJPTUVEUklWRVJfVFVUT1JJQUx9IGZvciBtb3JlIGRldGFpbHNgICsgYXV0b2Rvd25sb2FkTXNnKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgYmluUGF0aCA9IHdvcmtpbmdDZHNbMF0uZXhlY3V0YWJsZTtcbiAgICAgIGxvZy5kZWJ1ZyhgRm91bmQgJHt3b3JraW5nQ2RzLmxlbmd0aH0gQ2hyb21lZHJpdmVyIGV4ZWN1dGFibGUke3dvcmtpbmdDZHMubGVuZ3RoID09PSAxID8gJycgOiAncyd9IGAgK1xuICAgICAgICBgY2FwYWJsZSBvZiBhdXRvbWF0aW5nIENocm9tZSAnJHtjaHJvbWVWZXJzaW9ufScuXFxuQ2hvb3NpbmcgdGhlIG1vc3QgcmVjZW50LCAnJHtiaW5QYXRofScuYCk7XG4gICAgICBsb2cuZGVidWcoJ0lmIGEgc3BlY2lmaWMgdmVyc2lvbiBpcyByZXF1aXJlZCwgc3BlY2lmeSBpdCB3aXRoIHRoZSBgY2hyb21lZHJpdmVyRXhlY3V0YWJsZWAnICtcbiAgICAgICAgJ2Rlc2lyZWQgY2FwYWJpbGl0eS4nKTtcbiAgICAgIHJldHVybiBiaW5QYXRoO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdGFudC1jb25kaXRpb25cbiAgICB9IHdoaWxlICh0cnVlKTtcbiAgfVxuXG4gIGFzeW5jIGluaXRDaHJvbWVkcml2ZXJQYXRoICgpIHtcbiAgICBpZiAodGhpcy5leGVjdXRhYmxlVmVyaWZpZWQpIHJldHVybjsgLy9lc2xpbnQtZGlzYWJsZS1saW5lIGN1cmx5XG5cbiAgICAvLyB0aGUgZXhlY3V0YWJsZSBtaWdodCBiZSBzZXQgKGlmIHBhc3NlZCBpbilcbiAgICAvLyBvciB3ZSBtaWdodCB3YW50IHRvIHVzZSB0aGUgYmFzaWMgb25lIGluc3RhbGxlZCB3aXRoIHRoaXMgZHJpdmVyXG4gICAgLy8gb3Igd2Ugd2FudCB0byBmaWd1cmUgb3V0IHRoZSBiZXN0IG9uZVxuICAgIGlmICghdGhpcy5jaHJvbWVkcml2ZXIpIHtcbiAgICAgIHRoaXMuY2hyb21lZHJpdmVyID0gdGhpcy51c2VTeXN0ZW1FeGVjdXRhYmxlXG4gICAgICAgID8gYXdhaXQgZ2V0Q2hyb21lZHJpdmVyQmluYXJ5UGF0aCgpXG4gICAgICAgIDogYXdhaXQgdGhpcy5nZXRDb21wYXRpYmxlQ2hyb21lZHJpdmVyKCk7XG4gICAgfVxuXG4gICAgaWYgKCFhd2FpdCBmcy5leGlzdHModGhpcy5jaHJvbWVkcml2ZXIpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFRyeWluZyB0byB1c2UgYSBjaHJvbWVkcml2ZXIgYmluYXJ5IGF0IHRoZSBwYXRoIGAgK1xuICAgICAgICAgICAgICAgICAgICAgIGAke3RoaXMuY2hyb21lZHJpdmVyfSwgYnV0IGl0IGRvZXNuJ3QgZXhpc3QhYCk7XG4gICAgfVxuICAgIHRoaXMuZXhlY3V0YWJsZVZlcmlmaWVkID0gdHJ1ZTtcbiAgICBsb2cuaW5mbyhgU2V0IGNocm9tZWRyaXZlciBiaW5hcnkgYXM6ICR7dGhpcy5jaHJvbWVkcml2ZXJ9YCk7XG4gIH1cblxuICBzeW5jUHJvdG9jb2wgKGNkVmVyc2lvbiA9IG51bGwpIHtcbiAgICBjb25zdCBjb2VyY2VkVmVyc2lvbiA9IHNlbXZlci5jb2VyY2UoY2RWZXJzaW9uKTtcbiAgICBpZiAoIWNvZXJjZWRWZXJzaW9uIHx8IGNvZXJjZWRWZXJzaW9uLm1ham9yIDwgTUlOX0NEX1ZFUlNJT05fV0lUSF9XM0NfU1VQUE9SVCkge1xuICAgICAgbG9nLmRlYnVnKGBDaHJvbWVkcml2ZXIgdi4gJHtjZFZlcnNpb259IGRvZXMgbm90IGZ1bGx5IHN1cHBvcnQgJHtQUk9UT0NPTFMuVzNDfSBwcm90b2NvbC4gYCArXG4gICAgICAgIGBEZWZhdWx0aW5nIHRvICR7UFJPVE9DT0xTLk1KU09OV1B9YCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGNocm9tZU9wdGlvbnMgPSBnZXRDYXBWYWx1ZSh0aGlzLmNhcGFiaWxpdGllcywgJ2Nocm9tZU9wdGlvbnMnLCB7fSk7XG4gICAgaWYgKGNocm9tZU9wdGlvbnMudzNjID09PSBmYWxzZSkge1xuICAgICAgbG9nLmluZm8oYENocm9tZWRyaXZlciB2LiAke2NkVmVyc2lvbn0gc3VwcG9ydHMgJHtQUk9UT0NPTFMuVzNDfSBwcm90b2NvbCwgYCArXG4gICAgICAgIGBidXQgJHtQUk9UT0NPTFMuTUpTT05XUH0gb25lIGhhcyBiZWVuIGV4cGxpY2l0bHkgcmVxdWVzdGVkYCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuZGVzaXJlZFByb3RvY29sID0gUFJPVE9DT0xTLlczQztcbiAgICAvLyBnaXZlbiBjYXBzIG1pZ2h0IG5vdCBiZSBwcm9wZXJseSBwcmVmaXhlZFxuICAgIC8vIHNvIHdlIHRyeSB0byBmaXggdGhlbSBpbiBvcmRlciB0byBwcm9wZXJseSBpbml0XG4gICAgLy8gdGhlIG5ldyBXM0Mgc2Vzc2lvblxuICAgIHRoaXMuY2FwYWJpbGl0aWVzID0gdG9XM2NDYXBOYW1lcyh0aGlzLmNhcGFiaWxpdGllcyk7XG4gIH1cblxuICBhc3luYyBzdGFydCAoY2FwcywgZW1pdFN0YXJ0aW5nU3RhdGUgPSB0cnVlKSB7XG4gICAgdGhpcy5jYXBhYmlsaXRpZXMgPSBfLmNsb25lRGVlcChjYXBzKTtcblxuICAgIC8vIHNldCB0aGUgbG9nZ2luZyBwcmVmZXJlbmNlcyB0byBBTEwgdGhlIGNvbnNvbGUgbG9nc1xuICAgIHRoaXMuY2FwYWJpbGl0aWVzLmxvZ2dpbmdQcmVmcyA9IF8uY2xvbmVEZWVwKGdldENhcFZhbHVlKGNhcHMsICdsb2dnaW5nUHJlZnMnLCB7fSkpO1xuICAgIGlmIChfLmlzRW1wdHkodGhpcy5jYXBhYmlsaXRpZXMubG9nZ2luZ1ByZWZzLmJyb3dzZXIpKSB7XG4gICAgICB0aGlzLmNhcGFiaWxpdGllcy5sb2dnaW5nUHJlZnMuYnJvd3NlciA9ICdBTEwnO1xuICAgIH1cblxuICAgIGlmIChlbWl0U3RhcnRpbmdTdGF0ZSkge1xuICAgICAgdGhpcy5jaGFuZ2VTdGF0ZShDaHJvbWVkcml2ZXIuU1RBVEVfU1RBUlRJTkcpO1xuICAgIH1cblxuICAgIGNvbnN0IGFyZ3MgPSBbJy0tdXJsLWJhc2U9d2QvaHViJywgYC0tcG9ydD0ke3RoaXMucHJveHlQb3J0fWBdO1xuICAgIGlmICh0aGlzLmFkYiAmJiB0aGlzLmFkYi5hZGJQb3J0KSB7XG4gICAgICBhcmdzLnB1c2goYC0tYWRiLXBvcnQ9JHt0aGlzLmFkYi5hZGJQb3J0fWApO1xuICAgIH1cbiAgICBpZiAoXy5pc0FycmF5KHRoaXMuY21kQXJncykpIHtcbiAgICAgIGFyZ3MucHVzaCguLi50aGlzLmNtZEFyZ3MpO1xuICAgIH1cbiAgICBpZiAodGhpcy5sb2dQYXRoKSB7XG4gICAgICBhcmdzLnB1c2goYC0tbG9nLXBhdGg9JHt0aGlzLmxvZ1BhdGh9YCk7XG4gICAgfVxuICAgIGlmICh0aGlzLmRpc2FibGVCdWlsZENoZWNrKSB7XG4gICAgICBhcmdzLnB1c2goJy0tZGlzYWJsZS1idWlsZC1jaGVjaycpO1xuICAgIH1cbiAgICBhcmdzLnB1c2goJy0tdmVyYm9zZScpO1xuICAgIC8vIHdoYXQgYXJlIHRoZSBwcm9jZXNzIHN0ZG91dC9zdGRlcnIgY29uZGl0aW9ucyB3aGVyZWluIHdlIGtub3cgdGhhdFxuICAgIC8vIHRoZSBwcm9jZXNzIGhhcyBzdGFydGVkIHRvIG91ciBzYXRpc2ZhY3Rpb24/XG4gICAgY29uc3Qgc3RhcnREZXRlY3RvciA9IChzdGRvdXQpID0+IHtcbiAgICAgIHJldHVybiBzdGRvdXQuaW5kZXhPZignU3RhcnRpbmcgJykgPT09IDA7XG4gICAgfTtcblxuICAgIGxldCBwcm9jZXNzSXNBbGl2ZSA9IGZhbHNlO1xuICAgIGxldCB3ZWJ2aWV3VmVyc2lvbjtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy5pbml0Q2hyb21lZHJpdmVyUGF0aCgpO1xuICAgICAgYXdhaXQgdGhpcy5raWxsQWxsKCk7XG5cbiAgICAgIC8vIHNldCB1cCBvdXIgc3VicHJvY2VzcyBvYmplY3RcbiAgICAgIHRoaXMucHJvYyA9IG5ldyBTdWJQcm9jZXNzKHRoaXMuY2hyb21lZHJpdmVyLCBhcmdzKTtcbiAgICAgIHByb2Nlc3NJc0FsaXZlID0gdHJ1ZTtcblxuICAgICAgLy8gaGFuZGxlIGxvZyBvdXRwdXRcbiAgICAgIHRoaXMucHJvYy5vbignb3V0cHV0JywgKHN0ZG91dCwgc3RkZXJyKSA9PiB7XG4gICAgICAgIC8vIGlmIHRoZSBjZCBvdXRwdXQgaXMgbm90IHByaW50ZWQsIGZpbmQgdGhlIGNocm9tZSB2ZXJzaW9uIGFuZCBwcmludFxuICAgICAgICAvLyB3aWxsIGdldCBhIHJlc3BvbnNlIGxpa2VcbiAgICAgICAgLy8gICBEZXZUb29scyByZXNwb25zZToge1xuICAgICAgICAvLyAgICAgIFwiQW5kcm9pZC1QYWNrYWdlXCI6IFwiaW8uYXBwaXVtLnNhbXBsZWFwcFwiLFxuICAgICAgICAvLyAgICAgIFwiQnJvd3NlclwiOiBcIkNocm9tZS81NS4wLjI4ODMuOTFcIixcbiAgICAgICAgLy8gICAgICBcIlByb3RvY29sLVZlcnNpb25cIjogXCIxLjJcIixcbiAgICAgICAgLy8gICAgICBcIlVzZXItQWdlbnRcIjogXCIuLi5cIixcbiAgICAgICAgLy8gICAgICBcIldlYktpdC1WZXJzaW9uXCI6IFwiNTM3LjM2XCJcbiAgICAgICAgLy8gICB9XG4gICAgICAgIGNvbnN0IG91dCA9IHN0ZG91dCArIHN0ZGVycjtcbiAgICAgICAgbGV0IG1hdGNoID0gL1wiQnJvd3NlclwiOiBcIiguKilcIi8uZXhlYyhvdXQpO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICB3ZWJ2aWV3VmVyc2lvbiA9IG1hdGNoWzFdO1xuICAgICAgICAgIGxvZy5kZWJ1ZyhgV2VidmlldyB2ZXJzaW9uOiAnJHt3ZWJ2aWV3VmVyc2lvbn0nYCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBhbHNvIHByaW50IGNocm9tZWRyaXZlciB2ZXJzaW9uIHRvIGxvZ3NcbiAgICAgICAgLy8gd2lsbCBvdXRwdXQgc29tZXRoaW5nIGxpa2VcbiAgICAgICAgLy8gIFN0YXJ0aW5nIENocm9tZURyaXZlciAyLjMzLjUwNjEwNiAoOGEwNmMzOWM0NTgyZmJmYmFiNjk2NmRiYjFjMzhhOTE3M2JmYjFhMikgb24gcG9ydCA5NTE1XG4gICAgICAgIG1hdGNoID0gL1N0YXJ0aW5nIENocm9tZURyaXZlciAoWy5cXGRdKykvLmV4ZWMob3V0KTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgbG9nLmRlYnVnKGBDaHJvbWVkcml2ZXIgdmVyc2lvbjogJyR7bWF0Y2hbMV19J2ApO1xuICAgICAgICAgIHRoaXMuc3luY1Byb3RvY29sKG1hdGNoWzFdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGdpdmUgdGhlIG91dHB1dCBpZiBpdCBpcyByZXF1ZXN0ZWRcbiAgICAgICAgaWYgKHRoaXMudmVyYm9zZSkge1xuICAgICAgICAgIGZvciAobGV0IGxpbmUgb2YgKHN0ZG91dCB8fCAnJykudHJpbSgpLnNwbGl0KCdcXG4nKSkge1xuICAgICAgICAgICAgaWYgKCFsaW5lLnRyaW0oKS5sZW5ndGgpIGNvbnRpbnVlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGN1cmx5XG4gICAgICAgICAgICBsb2cuZGVidWcoYFtTVERPVVRdICR7bGluZX1gKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yIChsZXQgbGluZSBvZiAoc3RkZXJyIHx8ICcnKS50cmltKCkuc3BsaXQoJ1xcbicpKSB7XG4gICAgICAgICAgICBpZiAoIWxpbmUudHJpbSgpLmxlbmd0aCkgY29udGludWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY3VybHlcbiAgICAgICAgICAgIGxvZy5lcnJvcihgW1NUREVSUl0gJHtsaW5lfWApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIC8vIGhhbmRsZSBvdXQtb2YtYm91bmQgZXhpdCBieSBzaW1wbHkgZW1pdHRpbmcgYSBzdG9wcGVkIHN0YXRlXG4gICAgICB0aGlzLnByb2Mub24oJ2V4aXQnLCAoY29kZSwgc2lnbmFsKSA9PiB7XG4gICAgICAgIHByb2Nlc3NJc0FsaXZlID0gZmFsc2U7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlICE9PSBDaHJvbWVkcml2ZXIuU1RBVEVfU1RPUFBFRCAmJlxuICAgICAgICAgICAgdGhpcy5zdGF0ZSAhPT0gQ2hyb21lZHJpdmVyLlNUQVRFX1NUT1BQSU5HICYmXG4gICAgICAgICAgICB0aGlzLnN0YXRlICE9PSBDaHJvbWVkcml2ZXIuU1RBVEVfUkVTVEFSVElORykge1xuICAgICAgICAgIGxldCBtc2cgPSBgQ2hyb21lZHJpdmVyIGV4aXRlZCB1bmV4cGVjdGVkbHkgd2l0aCBjb2RlICR7Y29kZX0sIGAgK1xuICAgICAgICAgICAgICAgICAgICBgc2lnbmFsICR7c2lnbmFsfWA7XG4gICAgICAgICAgbG9nLmVycm9yKG1zZyk7XG4gICAgICAgICAgdGhpcy5jaGFuZ2VTdGF0ZShDaHJvbWVkcml2ZXIuU1RBVEVfU1RPUFBFRCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgbG9nLmluZm8oYFNwYXduaW5nIGNocm9tZWRyaXZlciB3aXRoOiAke3RoaXMuY2hyb21lZHJpdmVyfSBgICtcbiAgICAgICAgICAgICAgIGAke2FyZ3Muam9pbignICcpfWApO1xuICAgICAgLy8gc3RhcnQgc3VicHJvYyBhbmQgd2FpdCBmb3Igc3RhcnREZXRlY3RvclxuICAgICAgYXdhaXQgdGhpcy5wcm9jLnN0YXJ0KHN0YXJ0RGV0ZWN0b3IpO1xuICAgICAgYXdhaXQgdGhpcy53YWl0Rm9yT25saW5lKCk7XG4gICAgICBhd2FpdCB0aGlzLnN0YXJ0U2Vzc2lvbigpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRoaXMuZW1pdChDaHJvbWVkcml2ZXIuRVZFTlRfRVJST1IsIGUpO1xuICAgICAgLy8ganVzdCBiZWNhdXNlIHdlIGhhZCBhbiBlcnJvciBkb2Vzbid0IG1lYW4gdGhlIGNocm9tZWRyaXZlciBwcm9jZXNzXG4gICAgICAvLyBmaW5pc2hlZDsgd2Ugc2hvdWxkIGNsZWFuIHVwIGlmIG5lY2Vzc2FyeVxuICAgICAgaWYgKHByb2Nlc3NJc0FsaXZlKSB7XG4gICAgICAgIGF3YWl0IHRoaXMucHJvYy5zdG9wKCk7XG4gICAgICB9XG5cbiAgICAgIGxldCBtZXNzYWdlID0gJyc7XG4gICAgICAvLyBvZnRlbiB0aGUgdXNlcidzIENocm9tZSB2ZXJzaW9uIGlzIHRvbyBsb3cgZm9yIHRoZSB2ZXJzaW9uIG9mIENocm9tZWRyaXZlclxuICAgICAgaWYgKGUubWVzc2FnZS5pbmNsdWRlcygnQ2hyb21lIHZlcnNpb24gbXVzdCBiZScpKSB7XG4gICAgICAgIG1lc3NhZ2UgKz0gJ1VuYWJsZSB0byBhdXRvbWF0ZSBDaHJvbWUgdmVyc2lvbiBiZWNhdXNlIGl0IGlzIHRvbyBvbGQgZm9yIHRoaXMgdmVyc2lvbiBvZiBDaHJvbWVkcml2ZXIuXFxuJztcbiAgICAgICAgaWYgKHdlYnZpZXdWZXJzaW9uKSB7XG4gICAgICAgICAgbWVzc2FnZSArPSBgQ2hyb21lIHZlcnNpb24gb24gdGhlIGRldmljZTogJHt3ZWJ2aWV3VmVyc2lvbn1cXG5gO1xuICAgICAgICB9XG4gICAgICAgIG1lc3NhZ2UgKz0gYFZpc2l0ICcke0NIUk9NRURSSVZFUl9UVVRPUklBTH0nIHRvIHRyb3VibGVzaG9vdCB0aGUgcHJvYmxlbS5cXG5gO1xuICAgICAgfVxuXG4gICAgICBtZXNzYWdlICs9IGUubWVzc2FnZTtcbiAgICAgIGxvZy5lcnJvckFuZFRocm93KG1lc3NhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHNlc3Npb25JZCAoKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUgIT09IENocm9tZWRyaXZlci5TVEFURV9PTkxJTkUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmp3cHJveHkuc2Vzc2lvbklkO1xuICB9XG5cbiAgYXN5bmMgcmVzdGFydCAoKSB7XG4gICAgbG9nLmluZm8oJ1Jlc3RhcnRpbmcgY2hyb21lZHJpdmVyJyk7XG4gICAgaWYgKHRoaXMuc3RhdGUgIT09IENocm9tZWRyaXZlci5TVEFURV9PTkxJTkUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbid0IHJlc3RhcnQgd2hlbiB3ZSdyZSBub3Qgb25saW5lXCIpO1xuICAgIH1cbiAgICB0aGlzLmNoYW5nZVN0YXRlKENocm9tZWRyaXZlci5TVEFURV9SRVNUQVJUSU5HKTtcbiAgICBhd2FpdCB0aGlzLnN0b3AoZmFsc2UpO1xuICAgIGF3YWl0IHRoaXMuc3RhcnQodGhpcy5jYXBhYmlsaXRpZXMsIGZhbHNlKTtcbiAgfVxuXG4gIGFzeW5jIHdhaXRGb3JPbmxpbmUgKCkge1xuICAgIC8vIHdlIG5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgQ0QgaGFzbid0IGNyYXNoZWRcbiAgICBsZXQgY2hyb21lZHJpdmVyU3RvcHBlZCA9IGZhbHNlO1xuICAgIGF3YWl0IHJldHJ5SW50ZXJ2YWwoMjAsIDIwMCwgYXN5bmMgKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuc3RhdGUgPT09IENocm9tZWRyaXZlci5TVEFURV9TVE9QUEVEKSB7XG4gICAgICAgIC8vIHdlIGFyZSBlaXRoZXIgc3RvcHBlZCBvciBzdG9wcGluZywgc28gc29tZXRoaW5nIHdlbnQgd3JvbmdcbiAgICAgICAgY2hyb21lZHJpdmVyU3RvcHBlZCA9IHRydWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGF3YWl0IHRoaXMuZ2V0U3RhdHVzKCk7XG4gICAgfSk7XG4gICAgaWYgKGNocm9tZWRyaXZlclN0b3BwZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2hyb21lRHJpdmVyIGNyYXNoZWQgZHVyaW5nIHN0YXJ0dXAuJyk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2V0U3RhdHVzICgpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5qd3Byb3h5LmNvbW1hbmQoJy9zdGF0dXMnLCAnR0VUJyk7XG4gIH1cblxuICBhc3luYyBzdGFydFNlc3Npb24gKCkge1xuICAgIGNvbnN0IHNlc3Npb25DYXBzID0gdGhpcy5kZXNpcmVkUHJvdG9jb2wgPT09IFBST1RPQ09MUy5XM0NcbiAgICAgID8ge2NhcGFiaWxpdGllczoge2Fsd2F5c01hdGNoOiB0aGlzLmNhcGFiaWxpdGllc319XG4gICAgICA6IHtkZXNpcmVkQ2FwYWJpbGl0aWVzOiB0aGlzLmNhcGFiaWxpdGllc307XG4gICAgbG9nLmluZm8oYFN0YXJ0aW5nICR7dGhpcy5kZXNpcmVkUHJvdG9jb2x9IENocm9tZWRyaXZlciBzZXNzaW9uIHdpdGggY2FwYWJpbGl0aWVzOiBgICtcbiAgICAgIEpTT04uc3RyaW5naWZ5KHNlc3Npb25DYXBzLCBudWxsLCAyKSk7XG4gICAgLy8gcmV0cnkgc2Vzc2lvbiBzdGFydCA0IHRpbWVzLCBzb21ldGltZXMgdGhpcyBmYWlscyBkdWUgdG8gYWRiXG4gICAgYXdhaXQgcmV0cnlJbnRlcnZhbCg0LCAyMDAsIGFzeW5jICgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IHRoaXMuandwcm94eS5jb21tYW5kKCcvc2Vzc2lvbicsICdQT1NUJywgc2Vzc2lvbkNhcHMpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGxvZy53YXJuKGBGYWlsZWQgdG8gc3RhcnQgQ2hyb21lZHJpdmVyIHNlc3Npb246ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLmNoYW5nZVN0YXRlKENocm9tZWRyaXZlci5TVEFURV9PTkxJTkUpO1xuICB9XG5cbiAgYXN5bmMgc3RvcCAoZW1pdFN0YXRlcyA9IHRydWUpIHtcbiAgICBpZiAoZW1pdFN0YXRlcykge1xuICAgICAgdGhpcy5jaGFuZ2VTdGF0ZShDaHJvbWVkcml2ZXIuU1RBVEVfU1RPUFBJTkcpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy5qd3Byb3h5LmNvbW1hbmQoJycsICdERUxFVEUnKTtcbiAgICAgIGF3YWl0IHRoaXMucHJvYy5zdG9wKCdTSUdURVJNJywgMjAwMDApO1xuICAgICAgaWYgKGVtaXRTdGF0ZXMpIHtcbiAgICAgICAgdGhpcy5jaGFuZ2VTdGF0ZShDaHJvbWVkcml2ZXIuU1RBVEVfU1RPUFBFRCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgbG9nLmVycm9yKGUpO1xuICAgIH1cbiAgfVxuXG4gIGNoYW5nZVN0YXRlIChzdGF0ZSkge1xuICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgICBsb2cuZGVidWcoYENoYW5nZWQgc3RhdGUgdG8gJyR7c3RhdGV9J2ApO1xuICAgIHRoaXMuZW1pdChDaHJvbWVkcml2ZXIuRVZFTlRfQ0hBTkdFRCwge3N0YXRlfSk7XG4gIH1cblxuICBhc3luYyBzZW5kQ29tbWFuZCAodXJsLCBtZXRob2QsIGJvZHkpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5qd3Byb3h5LmNvbW1hbmQodXJsLCBtZXRob2QsIGJvZHkpO1xuICB9XG5cbiAgYXN5bmMgcHJveHlSZXEgKHJlcSwgcmVzKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuandwcm94eS5wcm94eVJlcVJlcyhyZXEsIHJlcyk7XG4gIH1cblxuICBhc3luYyBraWxsQWxsICgpIHtcbiAgICBsZXQgY21kID0gc3lzdGVtLmlzV2luZG93cygpXG4gICAgICA/IGB3bWljIHByb2Nlc3Mgd2hlcmUgXCJjb21tYW5kbGluZSBsaWtlICclY2hyb21lZHJpdmVyLmV4ZSUtLXBvcnQ9JHt0aGlzLnByb3h5UG9ydH0lJ1wiIGRlbGV0ZWBcbiAgICAgIDogYHBraWxsIC0xNSAtZiBcIiR7dGhpcy5jaHJvbWVkcml2ZXJ9LiotLXBvcnQ9JHt0aGlzLnByb3h5UG9ydH1cImA7XG4gICAgbG9nLmRlYnVnKGBLaWxsaW5nIGFueSBvbGQgY2hyb21lZHJpdmVycywgcnVubmluZzogJHtjbWR9YCk7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IChCLnByb21pc2lmeShjcC5leGVjKSkoY21kKTtcbiAgICAgIGxvZy5kZWJ1ZygnU3VjY2Vzc2Z1bGx5IGNsZWFuZWQgdXAgb2xkIGNocm9tZWRyaXZlcnMnKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGxvZy53YXJuKCdObyBvbGQgY2hyb21lZHJpdmVycyBzZWVtIHRvIGV4aXN0Jyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYWRiKSB7XG4gICAgICBsb2cuZGVidWcoYENsZWFuaW5nIGFueSBvbGQgYWRiIGZvcndhcmRlZCBwb3J0IHNvY2tldCBjb25uZWN0aW9uc2ApO1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm9yIChsZXQgY29ubiBvZiBhd2FpdCB0aGlzLmFkYi5nZXRGb3J3YXJkTGlzdCgpKSB7XG4gICAgICAgICAgLy8gY2hyb21lZHJpdmVyIHdpbGwgYXNrIEFEQiB0byBmb3J3YXJkIGEgcG9ydCBsaWtlIFwiZGV2aWNlSWQgdGNwOnBvcnQgbG9jYWxhYnN0cmFjdDp3ZWJ2aWV3X2RldnRvb2xzX3JlbW90ZV9wb3J0XCJcbiAgICAgICAgICBpZiAoY29ubi5pbmRleE9mKCd3ZWJ2aWV3X2RldnRvb2xzJykgIT09IC0xKSB7XG4gICAgICAgICAgICBsZXQgcGFyYW1zID0gY29ubi5zcGxpdCgvXFxzKy8pO1xuICAgICAgICAgICAgaWYgKHBhcmFtcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgIGF3YWl0IHRoaXMuYWRiLnJlbW92ZVBvcnRGb3J3YXJkKHBhcmFtc1sxXS5yZXBsYWNlKC9bXFxEXSovLCAnJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGxvZy53YXJuKGBVbmFibGUgdG8gY2xlYW4gZm9yd2FyZGVkIHBvcnRzLiBFcnJvcjogJyR7ZXJyLm1lc3NhZ2V9Jy4gQ29udGludWluZy5gKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBhc3luYyBoYXNXb3JraW5nV2VidmlldyAoKSB7XG4gICAgLy8gc29tZXRpbWVzIGNocm9tZWRyaXZlciBzdG9wcyBhdXRvbWF0aW5nIHdlYnZpZXdzLiB0aGlzIG1ldGhvZCBydW5zIGFcbiAgICAvLyBzaW1wbGUgY29tbWFuZCB0byBkZXRlcm1pbmUgb3VyIHN0YXRlLCBhbmQgcmVzcG9uZHMgYWNjb3JkaW5nbHlcbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy5qd3Byb3h5LmNvbW1hbmQoJy91cmwnLCAnR0VUJyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59XG5cbkNocm9tZWRyaXZlci5FVkVOVF9FUlJPUiA9ICdjaHJvbWVkcml2ZXJfZXJyb3InO1xuQ2hyb21lZHJpdmVyLkVWRU5UX0NIQU5HRUQgPSAnc3RhdGVDaGFuZ2VkJztcbkNocm9tZWRyaXZlci5TVEFURV9TVE9QUEVEID0gJ3N0b3BwZWQnO1xuQ2hyb21lZHJpdmVyLlNUQVRFX1NUQVJUSU5HID0gJ3N0YXJ0aW5nJztcbkNocm9tZWRyaXZlci5TVEFURV9PTkxJTkUgPSAnb25saW5lJztcbkNocm9tZWRyaXZlci5TVEFURV9TVE9QUElORyA9ICdzdG9wcGluZyc7XG5DaHJvbWVkcml2ZXIuU1RBVEVfUkVTVEFSVElORyA9ICdyZXN0YXJ0aW5nJztcblxuZXhwb3J0IHtcbiAgQ2hyb21lZHJpdmVyLCBDSFJPTUVEUklWRVJfQ0hST01FX01BUFBJTkcsIGdldE1vc3RSZWNlbnRDaHJvbWVkcml2ZXIsIENEX1ZFUixcbn07XG5leHBvcnQgZGVmYXVsdCBDaHJvbWVkcml2ZXI7XG4iXSwiZmlsZSI6ImxpYi9jaHJvbWVkcml2ZXIuanMiLCJzb3VyY2VSb290IjoiLi4vLi4ifQ==
