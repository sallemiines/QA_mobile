"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.update = update;
exports.updateSettings = updateSettings;
exports.updateLocationSettings = updateLocationSettings;
exports.setReduceMotion = setReduceMotion;
exports.setDarkMode = setDarkMode;
exports.updateSafariUserSettings = updateSafariUserSettings;
exports.updateSafariGlobalSettings = updateSafariGlobalSettings;
exports.updateLocale = updateLocale;
exports.read = read;
exports.readSettings = readSettings;
exports.stub = stub;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _path = _interopRequireDefault(require("path"));

var _logger = _interopRequireDefault(require("./logger"));

var _semver = _interopRequireDefault(require("semver"));

var _bluebird = _interopRequireDefault(require("bluebird"));

async function plistPaths(sim, identifier) {
  let paths = [];
  let simDirectory = sim.getDir();

  switch (identifier) {
    case 'webInspector':
      paths.push(_path.default.resolve(simDirectory, 'Library', 'Preferences', 'com.apple.webInspector.plist'));
      break;

    case 'mobileSafari':
      paths.push(_path.default.resolve((await sim.getAppDir('com.apple.mobilesafari')), 'Library', 'Preferences', 'com.apple.mobilesafari.plist'));
      break;

    case 'globalMobileSafari':
      paths.push(_path.default.resolve(simDirectory, 'Library', 'Preferences', 'com.apple.mobilesafari.plist'));
      break;

    case 'webUI':
      paths.push(_path.default.resolve(simDirectory, 'Library', 'Preferences', 'com.apple.WebUI.plist'));
      break;

    case 'webFoundation':
      paths.push(_path.default.resolve(simDirectory, 'Library', 'Preferences', 'com.apple.WebFoundation.plist'));
      break;

    case 'preferences':
      paths.push(_path.default.resolve(simDirectory, 'Library', 'Preferences', 'com.apple.Preferences.plist'));
      break;

    case 'locationServices':
      paths.push(_path.default.resolve(simDirectory, 'Library', 'Preferences', 'com.apple.locationd.plist'));
      break;

    case 'locationClients':
      paths.push(_path.default.resolve(simDirectory, 'Library', 'Caches', 'locationd', 'clients.plist'));
      break;

    case 'locationCache':
      paths.push(_path.default.resolve(simDirectory, 'Library', 'Caches', 'locationd', 'cache.plist'));
      paths.push(_path.default.resolve(simDirectory, 'Library', 'Preferences', 'com.apple.locationd.plist'));
      break;

    case 'userSettings':
      if (_semver.default.lt(_semver.default.coerce(sim.xcodeVersion.versionString), _semver.default.coerce('7.3'))) {
        paths.push(_path.default.resolve(simDirectory, 'Library', 'ConfigurationProfiles', 'UserSettings.plist'));
        paths.push(_path.default.resolve(simDirectory, 'Library', 'ConfigurationProfiles', 'EffectiveUserSettings.plist'));
        paths.push(_path.default.resolve(simDirectory, 'Library', 'ConfigurationProfiles', 'PublicInfo', 'PublicEffectiveUserSettings.plist'));
      } else {
        paths.push(_path.default.resolve(simDirectory, 'Library', 'UserConfigurationProfiles', 'UserSettings.plist'));
        paths.push(_path.default.resolve(simDirectory, 'Library', 'UserConfigurationProfiles', 'EffectiveUserSettings.plist'));
        paths.push(_path.default.resolve(simDirectory, 'Library', 'UserConfigurationProfiles', 'PublicInfo', 'PublicEffectiveUserSettings.plist'));
      }

      break;

    case 'effectiveUserSettings':
      paths.push(_path.default.resolve(simDirectory, 'Library', 'ConfigurationProfiles', 'EffectiveUserSettings.plist'));
      paths.push(_path.default.resolve(simDirectory, 'Library', 'ConfigurationProfiles', 'PublicInfo', 'PublicEffectiveUserSettings.plist'));
      break;

    case 'accessibilitySettings':
      paths.push(_path.default.resolve(simDirectory, 'Library', 'Preferences', 'com.apple.Accessibility.plist'));
      break;

    case 'uiStyleSettings':
      paths.push(_path.default.resolve(simDirectory, 'Library', 'Preferences', 'com.apple.uikitservices.userInterfaceStyleMode.plist'));
      break;
  }

  return paths;
}

async function updateSettings(sim, plist, updates) {
  return await _bluebird.default.reduce((await plistPaths(sim, plist)), async function reducer(updated, path) {
    return (await update(path, updates)) || updated;
  }, false);
}

async function update(pathToPlist, updates) {
  const currentSettings = await read(pathToPlist);
  const newSettings = Object.assign({}, currentSettings, updates);

  if (_lodash.default.isEqual(currentSettings, newSettings)) {
    return false;
  }

  await _appiumSupport.plist.updatePlistFile(pathToPlist, newSettings, true, false);
  return true;
}

async function readSettings(sim, plist) {
  let settings = {};

  for (let path of await plistPaths(sim, plist)) {
    settings[path] = await read(path);
  }

  return settings;
}

async function read(pathToPlist) {
  return await _appiumSupport.plist.parsePlistFile(pathToPlist, false);
}

async function updateLocationSettings(sim, bundleId, authorized) {
  const newCachePrefs = {
    LastFenceActivityTimestamp: 412122103.232983,
    CleanShutdown: true
  };
  let updated = await updateSettings(sim, 'locationCache', {
    [bundleId]: newCachePrefs
  });
  const newClientPrefs = {
    BundleId: bundleId,
    Authorized: !!authorized,
    Whitelisted: false
  };

  for (const file of await plistPaths(sim, 'locationClients')) {
    _logger.default.debug(`Updating location client file: ${file}`);

    let updates = {};
    const plist = await read(file);
    const weirdLocKey = 'com.apple.locationd.bundle-/System/Library/' + 'PrivateFrameworks/AOSNotification.framework';

    if (!_lodash.default.has(plist, weirdLocKey)) {
      updates[weirdLocKey] = {
        BundlePath: '/System/Library/PrivateFrameworks/AOSNotification.framework',
        Whitelisted: false,
        Executable: '',
        Registered: ''
      };
    }

    const baseSetting = _lodash.default.has(plist, bundleId) ? plist[bundleId] : {};
    updates[bundleId] = _lodash.default.defaults(newClientPrefs, baseSetting);
    updates[bundleId].Executable = updates[bundleId].Executable || '';
    updates[bundleId].Registered = updates[bundleId].Registered || '';
    updated = (await update(file, updates)) || updated;
  }

  return updated;
}

async function setReduceMotion(sim, reduceMotion = true) {
  _logger.default.debug(`Updating reduce motion. Setting to ${reduceMotion}.`);

  const paths = await plistPaths(sim, 'accessibilitySettings');

  for (const file of paths) {
    await update(file, {
      ReduceMotionEnabled: reduceMotion ? 1 : 0
    });
  }
}

async function setDarkMode(sim, isEnabled = true) {
  _logger.default.debug(`Setting dark mode ${isEnabled ? 'on' : 'off'}`);

  const paths = await plistPaths(sim, 'uiStyleSettings');

  for (const file of paths) {
    await update(file, {
      UserInterfaceStyleMode: isEnabled ? 2 : 1
    });
  }
}

async function updateSafariGlobalSettings(sim, settingSet) {
  _logger.default.debug('Updating Safari global settings');

  let updated = false;

  for (const [file, safariSettingSet] of _lodash.default.toPairs((await readSettings(sim, 'globalMobileSafari')))) {
    let newSettings = {};

    for (const [key, value] of _lodash.default.toPairs(settingSet)) {
      if (safariSettingSet[key] !== value) {
        newSettings[key] = value;
      }
    }

    if (_lodash.default.isEmpty(newSettings)) {
      continue;
    }

    updated = (await update(file, newSettings)) || updated;
  }

  return updated;
}

async function updateSafariUserSettings(sim, settingSet) {
  _logger.default.debug('Updating Safari user settings');

  let newUserSettings = {};

  if (_lodash.default.has(settingSet, 'WebKitJavaScriptEnabled')) {
    newUserSettings.safariAllowJavaScript = settingSet.WebKitJavaScriptEnabled;
  }

  if (_lodash.default.has(settingSet, 'WebKitJavaScriptCanOpenWindowsAutomatically')) {
    newUserSettings.safariAllowPopups = settingSet.WebKitJavaScriptCanOpenWindowsAutomatically;
  }

  if (_lodash.default.has(settingSet, 'WarnAboutFraudulentWebsites')) {
    newUserSettings.safariForceFraudWarning = !settingSet.WarnAboutFraudulentWebsites;
  }

  if (_lodash.default.isEmpty(newUserSettings)) {
    return false;
  }

  let updated = false;

  for (const [file, userSettingSet] of _lodash.default.toPairs((await readSettings(sim, 'userSettings')))) {
    if (!_lodash.default.has(userSettingSet, 'restrictedBool')) {
      userSettingSet.restrictedBool = {};
    }

    for (let [key, value] of _lodash.default.toPairs(newUserSettings)) {
      userSettingSet.restrictedBool[key] = {
        value
      };
    }

    updated = (await update(file, userSettingSet)) || updated;
  }

  return updated;
}

async function updateLocale(sim, language, locale, calendarFormat) {
  let globalPrefs = _path.default.resolve(sim.getDir(), 'Library', 'Preferences', '.GlobalPreferences.plist');

  let data = await read(globalPrefs);
  let updates = {};

  if (language) {
    _logger.default.debug(`New language: ${language}`);

    let supportedLangs = data.AppleLanguages || [];

    if (supportedLangs.indexOf(language) !== 0) {
      updates.AppleLanguages = [language].concat(_lodash.default.without(supportedLangs, language));
    }
  }

  if (locale || calendarFormat) {
    let calSplit = '@calendar=';
    let curLocaleAndCal = data.AppleLocale || language || 'en';
    let split = curLocaleAndCal.split(calSplit);
    let curLoc = split[0];

    if (calendarFormat || split[1]) {
      calendarFormat = `${calSplit}${calendarFormat || split[1] || ''}`;
    }

    calendarFormat = calendarFormat || '';
    let newLocaleAndCal = locale ? locale : curLoc;

    if (calendarFormat) {
      newLocaleAndCal = `${newLocaleAndCal}${calendarFormat}`;
    }

    if (newLocaleAndCal !== curLocaleAndCal) {
      _logger.default.debug(`New locale: ${newLocaleAndCal}`);

      updates.AppleLocale = newLocaleAndCal;
    }
  }

  if (_lodash.default.size(updates) === 0) {
    _logger.default.debug('No locale updates necessary.');

    return false;
  }

  _logger.default.debug('Writing new locale plist data');

  await update(globalPrefs, updates);
  return true;
}

async function stub() {
  return await plistPaths;
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
