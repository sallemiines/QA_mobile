"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.TEST_APK_PKG = exports.REQUIRED_PARAMS = exports.EspressoRunner = void 0;

require("source-map-support/register");

var _appiumBaseDriver = require("appium-base-driver");

var _asyncbox = require("asyncbox");

var _logger = _interopRequireDefault(require("./logger"));

var _serverBuilder = _interopRequireDefault(require("./server-builder"));

var _path = _interopRequireDefault(require("path"));

var _appiumSupport = require("appium-support");

var _package = require("../../package.json");

var _requestPromise = _interopRequireDefault(require("request-promise"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _lodash = _interopRequireDefault(require("lodash"));

var _utils = require("./utils");

const TEST_SERVER_ROOT = _path.default.resolve(__dirname, '..', '..', 'espresso-server');

const TEST_MANIFEST_PATH = _path.default.resolve(TEST_SERVER_ROOT, 'AndroidManifest-test.xml');

const TEST_APK_PKG = 'io.appium.espressoserver.test';
exports.TEST_APK_PKG = TEST_APK_PKG;
const REQUIRED_PARAMS = ['adb', 'tmpDir', 'host', 'systemPort', 'devicePort', 'appPackage', 'forceEspressoRebuild'];
exports.REQUIRED_PARAMS = REQUIRED_PARAMS;
const ESPRESSO_SERVER_LAUNCH_TIMEOUT = 30000;
const TARGET_PACKAGE_CONTAINER = '/data/local/tmp/espresso.apppackage';

class EspressoRunner {
  constructor(opts = {}) {
    for (let req of REQUIRED_PARAMS) {
      if (!opts || !_appiumSupport.util.hasValue(opts[req])) {
        throw new Error(`Option '${req}' is required!`);
      }

      this[req] = opts[req];
    }

    this.jwproxy = new _appiumBaseDriver.JWProxy({
      server: this.host,
      port: this.systemPort,
      base: '',
      keepAlive: true
    });
    this.proxyReqRes = this.jwproxy.proxyReqRes.bind(this.jwproxy);
    this.modServerPath = _path.default.resolve(this.tmpDir, `${TEST_APK_PKG}_${_package.version}_${this.appPackage}.apk`);
    this.showGradleLog = opts.showGradleLog;
    this.espressoBuildConfig = opts.espressoBuildConfig;
    this.serverLaunchTimeout = opts.serverLaunchTimeout || ESPRESSO_SERVER_LAUNCH_TIMEOUT;
    this.androidInstallTimeout = opts.androidInstallTimeout;
  }

  async isAppPackageChanged() {
    if (!(await this.adb.fileExists(TARGET_PACKAGE_CONTAINER))) {
      _logger.default.debug('The previous target application package is unknown');

      return true;
    }

    const previousAppPackage = (await this.adb.shell(['cat', TARGET_PACKAGE_CONTAINER])).trim();

    _logger.default.debug(`The previous target application package was '${previousAppPackage}'. ` + `The current package is '${this.appPackage}'`);

    return previousAppPackage !== this.appPackage;
  }

  async installServer() {
    const appState = await this.adb.getApplicationInstallState(this.modServerPath, TEST_APK_PKG);
    const shouldUninstallApp = [this.adb.APP_INSTALL_STATE.OLDER_VERSION_INSTALLED, this.adb.APP_INSTALL_STATE.NEWER_VERSION_INSTALLED].includes(appState);
    const shouldInstallApp = shouldUninstallApp || [this.adb.APP_INSTALL_STATE.NOT_INSTALLED].includes(appState);

    if (shouldUninstallApp) {
      _logger.default.info(`Uninstalling Espresso Test Server apk from the target device (pkg: '${TEST_APK_PKG}')`);

      try {
        await this.adb.uninstallApk(TEST_APK_PKG);
      } catch (err) {
        _logger.default.warn(`Error uninstalling '${TEST_APK_PKG}': ${err.message}`);
      }
    }

    if (shouldInstallApp) {
      _logger.default.info(`Installing Espresso Test Server apk from the target device (path: '${this.modServerPath}')`);

      try {
        await this.adb.install(this.modServerPath, {
          replace: false,
          timeout: this.androidInstallTimeout
        });

        _logger.default.info(`Installed Espresso Test Server apk '${this.modServerPath}' (pkg: '${TEST_APK_PKG}')`);
      } catch (err) {
        _logger.default.errorAndThrow(`Cannot install '${this.modServerPath}' because of '${err.message}'`);
      }
    }
  }

  async installTestApk() {
    let rebuild = this.forceEspressoRebuild;

    if (rebuild) {
      _logger.default.debug(`'forceEspressoRebuild' capability is enabled`);
    } else if (await this.isAppPackageChanged()) {
      _logger.default.info(`Forcing Espresso server rebuild because of changed application package`);

      rebuild = true;
    }

    if (rebuild && (await _appiumSupport.fs.exists(this.modServerPath))) {
      _logger.default.debug(`Deleting the obsolete Espresso server package '${this.modServerPath}'`);

      await _appiumSupport.fs.unlink(this.modServerPath);
    }

    if (!(await _appiumSupport.fs.exists(this.modServerPath))) {
      await this.buildNewModServer();
    }

    const isSigned = await this.adb.checkApkCert(this.modServerPath, TEST_APK_PKG);

    if (!isSigned) {
      await this.adb.sign(this.modServerPath);
    }

    if ((rebuild || !isSigned) && (await this.adb.uninstallApk(TEST_APK_PKG))) {
      _logger.default.info('Uninstalled the obsolete Espresso server package from the device under test');
    }

    await this.installServer();
  }

  async buildNewModServer() {
    let buildConfiguration = {};

    if (this.espressoBuildConfig) {
      _logger.default.info(`Using build configuration JSON from: '${this.espressoBuildConfig}'`);

      try {
        buildConfiguration = JSON.parse((await _appiumSupport.fs.readFile(this.espressoBuildConfig, 'utf8')));
      } catch (e) {
        _logger.default.error('Failed to parse build configuration JSON', e);

        throw e;
      }
    }

    _logger.default.info('Building espresso server');

    const serverPath = _path.default.resolve(this.tmpDir, 'espresso-server');

    _logger.default.debug(`build dir: ${serverPath}`);

    await _appiumSupport.fs.rimraf(serverPath);
    await (0, _appiumSupport.mkdirp)(serverPath);

    _logger.default.debug(`Copying espresso server template from (${TEST_SERVER_ROOT} to ${serverPath})`);

    await (0, _utils.copyGradleProjectRecursively)(TEST_SERVER_ROOT, serverPath);
    await new _serverBuilder.default({
      serverPath,
      buildConfiguration,
      showGradleLog: this.showGradleLog
    }).build();

    const apkPath = _path.default.resolve(serverPath, 'app', 'build', 'outputs', 'apk', 'androidTest', 'debug', 'app-debug-androidTest.apk');

    _logger.default.info(`Repackaging espresso server for: '${this.appPackage}'`);

    const packageTmpDir = _path.default.resolve(this.tmpDir, this.appPackage);

    const newManifestPath = _path.default.resolve(this.tmpDir, 'AndroidManifest.xml');

    await _appiumSupport.fs.rimraf(newManifestPath);

    _logger.default.info(`Creating new manifest: '${newManifestPath}'`);

    await (0, _appiumSupport.mkdirp)(packageTmpDir);
    await _appiumSupport.fs.copyFile(TEST_MANIFEST_PATH, newManifestPath);
    await this.adb.compileManifest(newManifestPath, TEST_APK_PKG, this.appPackage);
    await this.adb.insertManifest(newManifestPath, apkPath, this.modServerPath);

    _logger.default.info(`Repackaged espresso server ready: '${this.modServerPath}'`);
  }

  async cleanupSessionLeftovers() {
    _logger.default.debug('Performing cleanup of automation leftovers');

    try {
      const {
        value
      } = await _requestPromise.default.get({
        url: `http://${this.host}:${this.systemPort}/sessions`,
        timeout: 500,
        json: true
      });
      const activeSessionIds = value.map(sess => sess.id);

      if (activeSessionIds.length) {
        _logger.default.debug(`The following obsolete sessions are still running: ${JSON.stringify(activeSessionIds)}`);

        _logger.default.debug('Cleaning up the obsolete sessions');

        await _bluebird.default.all(activeSessionIds.map(id => _requestPromise.default.delete({
          url: `http://${this.host}:${this.systemPort}/session/${id}`
        })));
        await _bluebird.default.delay(1000);
      } else {
        _logger.default.debug('No obsolete sessions have been detected');
      }
    } catch (e) {
      _logger.default.debug(`No obsolete sessions have been detected (${e.message})`);
    }
  }

  async startSession(caps) {
    await this.cleanupSessionLeftovers();
    const cmd = ['shell', 'am', 'instrument', '-w', '-e', 'debug', process.env.ESPRESSO_JAVA_DEBUG === 'true' ? 'true' : 'false', `${TEST_APK_PKG}/androidx.test.runner.AndroidJUnitRunner`];

    _logger.default.info(`Starting Espresso Server v${_package.version} with cmd: adb ${cmd.join(' ')}`);

    let hasSocketError = false;
    this.instProcess = this.adb.createSubProcess(cmd);
    this.instProcess.on('exit', (code, signal) => {
      _logger.default.info(`Instrumentation process exited with code ${code} from signal ${signal}`);
    });
    this.instProcess.on('die', (code, signal) => {
      _logger.default.error(`Instrumentation process died with code ${code} and signal ${signal}`);
    });
    this.instProcess.on('stream-line', line => {
      if (_lodash.default.isEmpty(line.trim())) {
        return;
      }

      _logger.default.debug(`[Instrumentation] ${line.trim()}`);

      if (line.toLowerCase().includes('java.net.socketexception')) {
        hasSocketError = true;
      }
    });
    await this.instProcess.start((stdout, stderr) => {
      const out = stdout.trim() || stderr.trim();

      if (out.includes('io.appium.espressoserver.EspressoServerRunnerTest:')) {
        return true;
      }

      if (out.toLowerCase().includes('exception')) {
        throw new Error(out);
      }
    }, this.serverLaunchTimeout);

    _logger.default.info('Waiting for Espresso to be online...');

    try {
      await (0, _asyncbox.retryInterval)(20, 1000, async () => {
        await this.jwproxy.command('/status', 'GET');
      });
    } catch (e) {
      if (hasSocketError) {
        _logger.default.errorAndThrow(`Timed out waiting for Espresso Server to start due to Socket exception. Espresso Server requires the 'INTERNET' permission to be set in the Android manifest for the app-under-test (<uses-permission android:name="android.permission.INTERNET" />)`);
      } else {
        _logger.default.errorAndThrow(`Timed out waiting for Espresso Server to start. Original error: ${e.message}`);
      }
    }

    await this.jwproxy.command('/session', 'POST', {
      capabilities: {
        firstMatch: [caps],
        alwaysMatch: {}
      }
    });
    await this.recordTargetAppPackage();
  }

  async recordTargetAppPackage() {
    await this.adb.shell([`echo "${this.appPackage}" > "${TARGET_PACKAGE_CONTAINER}"`]);

    _logger.default.info(`Recorded the target application package '${this.appPackage}' to ${TARGET_PACKAGE_CONTAINER}`);
  }

  async deleteSession() {
    _logger.default.debug('Deleting Espresso server session');

    try {
      await this.jwproxy.command('/', 'DELETE');
    } catch (err) {
      _logger.default.warn(`Did not get confirmation Espresso deleteSession worked; ` + `Error was: ${err}`);
    }

    if (this.instProcess && this.instProcess.isRunning) {
      await this.instProcess.stop();
    }
  }

}

exports.EspressoRunner = EspressoRunner;
var _default = EspressoRunner;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
