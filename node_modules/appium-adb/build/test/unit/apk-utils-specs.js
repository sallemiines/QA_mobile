'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _this = this;

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _teen_process = require('teen_process');

var teen_process = _interopRequireWildcard(_teen_process);

var _appiumSupport = require('appium-support');

var _ = require('../..');

var _2 = _interopRequireDefault(_);

var _appiumTestSupport = require('appium-test-support');

_chai2['default'].use(_chaiAsPromised2['default']);
var should = _chai2['default'].should(),
    pkg = 'com.example.android.contactmanager',
    uri = 'content://contacts/people/1',
    act = '.ContactManager',
    startAppOptions = { stopApp: true, action: 'action', category: 'cat',
  flags: 'flags', pkg: 'pkg', activity: 'act',
  optionalIntentArguments: '-x options -y option argument -z option arg with spaces' },
    cmd = ['am', 'start', '-W', '-n', 'pkg/act', '-S', '-a', 'action', '-c', 'cat', '-f', 'flags', '-x', 'options', '-y', 'option', 'argument', '-z', 'option', 'arg with spaces'],
    language = 'en',
    country = 'US',
    locale = 'en-US';

describe('Apk-utils', function () {
  var adb = new _2['default']();
  describe('isAppInstalled', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    it('should parse correctly and return true', function callee$2$0() {
      var pkg;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            pkg = 'dummy.package';

            mocks.adb.expects('shell').once().withExactArgs(['pm', 'list', 'packages', pkg]).returns('package:' + pkg);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(adb.isAppInstalled(pkg));

          case 4:
            context$3$0.sent.should.be['true'];

            mocks.adb.verify();

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should parse correctly and return false', function callee$2$0() {
      var pkg;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            pkg = 'dummy.package';

            mocks.adb.expects('shell').once().withExactArgs(['pm', 'list', 'packages', pkg]).returns("");
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(adb.isAppInstalled(pkg));

          case 4:
            context$3$0.sent.should.be['false'];

            mocks.adb.verify();

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('getFocusedPackageAndActivity', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    it('should parse correctly and return package and activity', function callee$2$0() {
      var _ref, appPackage, appActivity;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('shell').once().withExactArgs(['dumpsys', 'window', 'windows']).returns('mFocusedApp=AppWindowToken{38600b56 token=Token{9ea1171 ' + ('ActivityRecord{2 u ' + pkg + '/' + act + ' t181}}}'));

            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.getFocusedPackageAndActivity());

          case 3:
            _ref = context$3$0.sent;
            appPackage = _ref.appPackage;
            appActivity = _ref.appActivity;

            appPackage.should.equal(pkg);
            appActivity.should.equal(act);
            mocks.adb.verify();

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should parse correctly and return package and activity when a comma is present', function callee$2$0() {
      var _ref2, appPackage, appActivity;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('shell').once().withExactArgs(['dumpsys', 'window', 'windows']).returns('mFocusedApp=AppWindowToken{20fe217e token=Token{21878739 ' + ('ActivityRecord{16425300 u0 ' + pkg + '/' + act + ', isShadow:false t10}}}'));

            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.getFocusedPackageAndActivity());

          case 3:
            _ref2 = context$3$0.sent;
            appPackage = _ref2.appPackage;
            appActivity = _ref2.appActivity;

            appPackage.should.equal(pkg);
            appActivity.should.equal(act);
            mocks.adb.verify();

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should parse correctly and return null', function callee$2$0() {
      var _ref3, appPackage, appActivity;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('shell').once().withExactArgs(['dumpsys', 'window', 'windows']).returns('mFocusedApp=null');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.getFocusedPackageAndActivity());

          case 3:
            _ref3 = context$3$0.sent;
            appPackage = _ref3.appPackage;
            appActivity = _ref3.appActivity;

            should.not.exist(appPackage);
            should.not.exist(appActivity);
            mocks.adb.verify();

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('waitForActivityOrNot', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    it('should call shell once and should return', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('shell').once().withExactArgs(['dumpsys', 'window', 'windows']).returns('mFocusedApp=AppWindowToken{38600b56 token=Token{9ea1171 ' + ('ActivityRecord{2 u ' + pkg + '/' + act + ' t181}}}'));

            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.waitForActivityOrNot(pkg, act, false));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should call shell multiple times and return', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('shell').onCall(0).returns('mFocusedApp=AppWindowToken{38600b56 token=Token{9ea1171 ' + 'ActivityRecord{2c7c4318 u0 foo/bar t181}}}');
            mocks.adb.expects('shell').returns('mFocusedApp=AppWindowToken{38600b56 token=Token{9ea1171 ' + 'ActivityRecord{2c7c4318 u0 com.example.android.contactmanager/.ContactManager t181}}}');

            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(adb.waitForActivityOrNot(pkg, act, false));

          case 4:
            mocks.adb.verify();

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should call shell once return for not', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('shell').once().withExactArgs(['dumpsys', 'window', 'windows']).returns('mFocusedApp=AppWindowToken{38600b56 token=Token{9ea1171 ' + 'ActivityRecord{c 0 foo/bar t181}}}');

            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.waitForActivityOrNot(pkg, act, true));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should call shell multiple times and return for not', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('shell').onCall(0).returns('mFocusedApp=AppWindowToken{38600b56 token=Token{9ea1171 ' + ('ActivityRecord{2 u ' + pkg + '/' + act + ' t181}}}'));
            mocks.adb.expects('shell').returns('mFocusedApp=AppWindowToken{38600b56 token=Token{9ea1171 ' + 'ActivityRecord{2c7c4318 u0 foo/bar t181}}}');
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(adb.waitForActivityOrNot(pkg, act, true));

          case 4:
            mocks.adb.verify();

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should be able to get first of a comma-separated list of activities', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('shell').once().withExactArgs(['dumpsys', 'window', 'windows']).returns('mFocusedApp=AppWindowToken{38600b56 token=Token{9ea1171 ' + ('ActivityRecord{2 u ' + pkg + '/.ContactManager t181}}}'));

            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.waitForActivityOrNot(pkg, '.ContactManager, .OtherManager', false));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should be able to get second of a comma-separated list of activities', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('shell').once().withExactArgs(['dumpsys', 'window', 'windows']).returns('mFocusedApp=AppWindowToken{38600b56 token=Token{9ea1171 ' + ('ActivityRecord{2 u ' + pkg + '/.OtherManager t181}}}'));

            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.waitForActivityOrNot(pkg, '.ContactManager, .OtherManager', false));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should fail if no activity in a comma-separated list is available', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('shell').atLeast(1).withExactArgs(['dumpsys', 'window', 'windows']).returns('mFocusedApp=AppWindowToken{38600b56 token=Token{9ea1171 ' + ('ActivityRecord{2 u ' + pkg + '/' + act + ' t181}}}'));

            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.waitForActivityOrNot(pkg, '.SuperManager, .OtherManager', false, 1000).should.eventually.be.rejected);

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should be able to match activities if waitActivity is a wildcard', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('shell').once().withExactArgs(['dumpsys', 'window', 'windows']).returns('mFocusedApp=AppWindowToken{38600b56 token=Token{9ea1171 ' + ('ActivityRecord{2 u ' + pkg + '/.ContactManager t181}}}'));

            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.waitForActivityOrNot(pkg, '*', false));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should be able to match activities if waitActivity is shortened and contains a whildcard', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('shell').once().withExactArgs(['dumpsys', 'window', 'windows']).returns('mFocusedApp=AppWindowToken{38600b56 token=Token{9ea1171 ' + ('ActivityRecord{2 u ' + pkg + '/.ContactManager t181}}}'));

            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.waitForActivityOrNot(pkg, '.*Manager', false));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should be able to match activities if waitActivity contains a wildcard alternative to activity', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('shell').once().withExactArgs(['dumpsys', 'window', 'windows']).returns('mFocusedApp=AppWindowToken{38600b56 token=Token{9ea1171 ' + ('ActivityRecord{2 u ' + pkg + '/.ContactManager t181}}}'));

            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.waitForActivityOrNot(pkg, pkg + '.*', false));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should be able to match activities if waitActivity contains a wildcard on head', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('shell').once().withExactArgs(['dumpsys', 'window', 'windows']).returns('mFocusedApp=AppWindowToken{38600b56 token=Token{9ea1171 ' + ('ActivityRecord{2 u ' + pkg + '/.ContactManager t181}}}'));

            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.waitForActivityOrNot(pkg, '*.contactmanager.ContactManager', false));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should be able to match activities if waitActivity contains a wildcard across a pkg name and an activity name', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('shell').once().withExactArgs(['dumpsys', 'window', 'windows']).returns('mFocusedApp=AppWindowToken{38600b56 token=Token{9ea1171 ' + ('ActivityRecord{2 u ' + pkg + '/.ContactManager t181}}}'));

            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.waitForActivityOrNot(pkg, 'com.*Manager', false));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should be able to match activities if waitActivity contains wildcards in both a pkg name and an activity name', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('shell').once().withExactArgs(['dumpsys', 'window', 'windows']).returns('mFocusedApp=AppWindowToken{38600b56 token=Token{9ea1171 ' + ('ActivityRecord{2 u ' + pkg + '/.ContactManager t181}}}'));

            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.waitForActivityOrNot(pkg, 'com.*.contactmanager.*Manager', false));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should fail if activity not to match from regexp activities', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('shell').atLeast(1).withExactArgs(['dumpsys', 'window', 'windows']).returns('mFocusedApp=AppWindowToken{38600b56 token=Token{9ea1171 ' + 'ActivityRecord{2 u com.example.android.supermanager/.SuperManager t181}}}');

            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.waitForActivityOrNot('com.example.android.supermanager', pkg + '.*', false, 1000).should.eventually.be.rejected);

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should be able to get an activity that is an inner class', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('shell').once().withExactArgs(['dumpsys', 'window', 'windows']).returns('mFocusedApp=AppWindowToken{38600b56 token=Token{9ea1171 ' + ('ActivityRecord{2 u ' + pkg + '/.Settings$AppDrawOverlaySettingsActivity t181}}}'));

            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.waitForActivityOrNot(pkg, '.Settings$AppDrawOverlaySettingsActivity', false));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should be able to get first activity from first package in a comma-separated list of packages + activities', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('shell').once().withExactArgs(['dumpsys', 'window', 'windows']).returns('mFocusedApp=AppWindowToken{38600b56 token=Token{9ea1171 ' + 'ActivityRecord{2 u com.android.settings/.ContactManager t181}}}');

            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.waitForActivityOrNot('com.android.settings,com.example.android.supermanager', '.ContactManager,.OtherManager', false));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should be able to get first activity from second package in a comma-separated list of packages + activities', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('shell').once().withExactArgs(['dumpsys', 'window', 'windows']).returns('mFocusedApp=AppWindowToken{38600b56 token=Token{9ea1171 ' + 'ActivityRecord{2 u com.example.android.supermanager/.ContactManager t181}}}');

            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.waitForActivityOrNot('com.android.settings,com.example.android.supermanager', '.ContactManager,.OtherManager', false));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should be able to get second activity from first package in a comma-separated list of packages + activities', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('shell').once().withExactArgs(['dumpsys', 'window', 'windows']).returns('mFocusedApp=AppWindowToken{38600b56 token=Token{9ea1171 ' + 'ActivityRecord{2 u com.android.settings/.OtherManager t181}}}');

            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.waitForActivityOrNot('com.android.settings,com.example.android.supermanager', '.ContactManager,.OtherManager', false));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should be able to get second activity from second package in a comma-separated list of packages', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('shell').once().withExactArgs(['dumpsys', 'window', 'windows']).returns('mFocusedApp=AppWindowToken{38600b56 token=Token{9ea1171 ' + 'ActivityRecord{2 u com.example.android.supermanager/.OtherManager t181}}}');

            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.waitForActivityOrNot('com.android.settings,com.example.android.supermanager', '.ContactManager,.OtherManager', false));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should fail to get activity when focused activity matches none of the provided list of packages', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('shell').atLeast(1).withExactArgs(['dumpsys', 'window', 'windows']).returns('mFocusedApp=AppWindowToken{38600b56 token=Token{9ea1171 ' + 'ActivityRecord{2 u com.otherpackage/.ContactManager t181}}}');

            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.waitForActivityOrNot('com.android.settings,com.example.android.supermanager', '.ContactManager, .OtherManager', false, 1000).should.eventually.be.rejected);

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('waitForActivity', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    it('should call waitForActivityOrNot with correct arguments', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('waitForActivityOrNot').once().withExactArgs(pkg, act, false, 20000).returns('');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.waitForActivity(pkg, act));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('waitForNotActivity', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    it('should call waitForActivityOrNot with correct arguments', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('waitForActivityOrNot').once().withExactArgs(pkg, act, true, 20000).returns('');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.waitForNotActivity(pkg, act));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('uninstallApk', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    it('should call forceStop and adbExec with correct arguments', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('isAppInstalled').once().withExactArgs(pkg).returns(true);
            mocks.adb.expects('forceStop').once().withExactArgs(pkg).returns('');
            mocks.adb.expects('adbExec').once().withExactArgs(['uninstall', pkg], { timeout: 20000 }).returns('Success');
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(adb.uninstallApk(pkg));

          case 5:
            context$3$0.sent.should.be['true'];

            mocks.adb.verify();

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should not call forceStop and adbExec if app not installed', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('isAppInstalled').once().withExactArgs(pkg).returns(false);
            mocks.adb.expects('forceStop').never();
            mocks.adb.expects('adbExec').never();
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(adb.uninstallApk(pkg));

          case 5:
            context$3$0.sent.should.be['false'];

            mocks.adb.verify();

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('installFromDevicePath', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    it('should call forceStop and adbExec with correct arguments', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('shell').once().withExactArgs(['pm', 'install', '-r', 'foo'], {}).returns('');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.installFromDevicePath('foo'));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('install', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    it('should call forceStop and adbExec with correct arguments', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('adbExec').once().withExactArgs(['install', '-r', 'foo'], { timeout: 60000 }).returns('');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.install('foo'));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should call forceStop and adbExec with correct arguments when not replacing', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('adbExec').once().withExactArgs(['install', 'foo'], { timeout: 60000 }).returns('');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.install('foo', false));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('startUri', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    it('should fail if uri or pkg are not provided', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(adb.startUri().should.eventually.be.rejectedWith(/arguments are required/));

          case 2:
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(adb.startUri('foo').should.eventually.be.rejectedWith(/arguments are required/));

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should build a call to a VIEW intent with the uri', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('shell').once().withExactArgs(['am', 'start', '-W', '-a', 'android.intent.action.VIEW', '-d', uri, pkg]);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.startUri(uri, pkg));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('startApp', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    it('should call getApiLevel and shell with correct arguments', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('getApiLevel').once().withExactArgs().returns('17');
            mocks.adb.expects('shell').once().withExactArgs(cmd).returns('');
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(adb.startApp(startAppOptions));

          case 4:
            mocks.adb.verify();

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should call getApiLevel and shell with correct arguments', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('getApiLevel').twice().returns('17');
            mocks.adb.expects('shell').onCall(0).returns('Error: Activity class foo does not exist');
            mocks.adb.expects('shell').returns('');
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(adb.startApp(startAppOptions));

          case 5:
            mocks.adb.verify();

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should call getApiLevel and shell with correct arguments when activity is inner class', function callee$2$0() {
      var startAppOptionsWithInnerClass, cmdWithInnerClass;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            startAppOptionsWithInnerClass = { pkg: 'pkg', activity: 'act$InnerAct' }, cmdWithInnerClass = ['am', 'start', '-W', '-n', 'pkg/act\\$InnerAct', '-S'];

            mocks.adb.expects('getApiLevel').once().withExactArgs().returns('17');
            mocks.adb.expects('shell').once().withExactArgs(cmdWithInnerClass).returns('');
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(adb.startApp(startAppOptionsWithInnerClass));

          case 5:
            mocks.adb.verify();

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('getDeviceLanguage', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    it('should call shell one time with correct args and return language when API < 23', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects("getApiLevel").returns(18);
            mocks.adb.expects("shell").once().withExactArgs(['getprop', 'persist.sys.language']).returns(language);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(adb.getDeviceLanguage());

          case 4:
            context$3$0.t0 = language;
            context$3$0.sent.should.equal(context$3$0.t0);

            mocks.adb.verify();

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should call shell two times with correct args and return language when API < 23', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects("getApiLevel").returns(18);
            mocks.adb.expects("shell").once().withExactArgs(['getprop', 'persist.sys.language']).returns('');
            mocks.adb.expects("shell").once().withExactArgs(['getprop', 'ro.product.locale.language']).returns(language);
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(adb.getDeviceLanguage());

          case 5:
            context$3$0.t0 = language;
            context$3$0.sent.should.equal(context$3$0.t0);

            mocks.adb.verify();

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should call shell one time with correct args and return language when API = 23', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects("getApiLevel").returns(23);
            mocks.adb.expects("shell").once().withExactArgs(['getprop', 'persist.sys.locale']).returns(locale);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(adb.getDeviceLanguage());

          case 4:
            context$3$0.t0 = language;
            context$3$0.sent.should.equal(context$3$0.t0);

            mocks.adb.verify();

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should call shell two times with correct args and return language when API = 23', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects("getApiLevel").returns(23);
            mocks.adb.expects("shell").once().withExactArgs(['getprop', 'persist.sys.locale']).returns('');
            mocks.adb.expects("shell").once().withExactArgs(['getprop', 'ro.product.locale']).returns(locale);
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(adb.getDeviceLanguage());

          case 5:
            context$3$0.t0 = language;
            context$3$0.sent.should.equal(context$3$0.t0);

            mocks.adb.verify();

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('setDeviceLanguage', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    it('should call shell one time with correct args when API < 23', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects("getApiLevel").once().returns(21);
            mocks.adb.expects("shell").once().withExactArgs(['setprop', 'persist.sys.language', language]).returns("");
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(adb.setDeviceLanguage(language));

          case 4:
            mocks.adb.verify();

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('getDeviceCountry', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    it('should call shell one time with correct args and return country', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects("shell").once().withExactArgs(['getprop', 'persist.sys.country']).returns(country);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.getDeviceCountry());

          case 3:
            context$3$0.t0 = country;
            context$3$0.sent.should.equal(context$3$0.t0);

            mocks.adb.verify();

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should call shell two times with correct args and return country', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects("shell").once().withExactArgs(['getprop', 'persist.sys.country']).returns('');
            mocks.adb.expects("shell").once().withExactArgs(['getprop', 'ro.product.locale.region']).returns(country);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(adb.getDeviceCountry());

          case 4:
            context$3$0.t0 = country;
            context$3$0.sent.should.equal(context$3$0.t0);

            mocks.adb.verify();

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('setDeviceCountry', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    it('should call shell one time with correct args', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects("getApiLevel").once().returns(21);
            mocks.adb.expects("shell").once().withExactArgs(['setprop', 'persist.sys.country', country]).returns("");
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(adb.setDeviceCountry(country));

          case 4:
            mocks.adb.verify();

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('getDeviceLocale', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    it('should call shell one time with correct args and return locale', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects("shell").once().withExactArgs(['getprop', 'persist.sys.locale']).returns(locale);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.getDeviceLocale());

          case 3:
            context$3$0.t0 = locale;
            context$3$0.sent.should.equal(context$3$0.t0);

            mocks.adb.verify();

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should call shell two times with correct args and return locale', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects("shell").once().withExactArgs(['getprop', 'persist.sys.locale']).returns('');
            mocks.adb.expects("shell").once().withExactArgs(['getprop', 'ro.product.locale']).returns(locale);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(adb.getDeviceLocale());

          case 4:
            context$3$0.t0 = locale;
            context$3$0.sent.should.equal(context$3$0.t0);

            mocks.adb.verify();

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('setDeviceLocale', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    it('should call shell one time with correct args', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects("getApiLevel").once().returns(21);
            mocks.adb.expects("shell").once().withExactArgs(['setprop', 'persist.sys.locale', locale]).returns("");
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(adb.setDeviceLocale(locale));

          case 4:
            mocks.adb.verify();

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('getApkInfo', (0, _appiumTestSupport.withMocks)({ adb: adb, teen_process: teen_process, fs: _appiumSupport.fs }, function (mocks) {
    it('should properly parse apk info', function callee$2$0() {
      var result, _arr, _i, _arr$_i, _name, value;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.fs.expects('exists').once().returns(true);
            mocks.adb.expects('initAapt').once().returns(true);
            mocks.teen_process.expects('exec').once().returns({ stdout: 'package: name=\'io.appium.settings\' versionCode=\'2\' versionName=\'1.1\' platformBuildVersionName=\'6.0-2166767\'\n      sdkVersion:\'17\'\n      targetSdkVersion:\'23\'\n      uses-permission: name=\'android.permission.INTERNET\'\n      uses-permission: name=\'android.permission.CHANGE_NETWORK_STATE\'\n      uses-permission: name=\'android.permission.ACCESS_NETWORK_STATE\'\n      uses-permission: name=\'android.permission.READ_PHONE_STATE\'\n      uses-permission: name=\'android.permission.WRITE_SETTINGS\'\n      uses-permission: name=\'android.permission.CHANGE_WIFI_STATE\'\n      uses-permission: name=\'android.permission.ACCESS_WIFI_STATE\'\n      uses-permission: name=\'android.permission.ACCESS_FINE_LOCATION\'\n      uses-permission: name=\'android.permission.ACCESS_COARSE_LOCATION\'\n      uses-permission: name=\'android.permission.ACCESS_MOCK_LOCATION\'\n      application-label:\'Appium Settings\'\n      application-icon-120:\'res/drawable-ldpi-v4/ic_launcher.png\'\n      application-icon-160:\'res/drawable-mdpi-v4/ic_launcher.png\'\n      application-icon-240:\'res/drawable-hdpi-v4/ic_launcher.png\'\n      application-icon-320:\'res/drawable-xhdpi-v4/ic_launcher.png\'\n      application: label=\'Appium Settings\' icon=\'res/drawable-mdpi-v4/ic_launcher.png\'\n      application-debuggable\n      launchable-activity: name=\'io.appium.settings.Settings\'  label=\'Appium Settings\' icon=\'\'\n      feature-group: label=\'\'\n        uses-feature: name=\'android.hardware.wifi\'\n        uses-feature: name=\'android.hardware.location\'\n        uses-implied-feature: name=\'android.hardware.location\' reason=\'requested android.permission.ACCESS_COARSE_LOCATION permission, requested android.permission.ACCESS_FINE_LOCATION permission, and requested android.permission.ACCESS_MOCK_LOCATION permission\'\n        uses-feature: name=\'android.hardware.location.gps\'\n        uses-implied-feature: name=\'android.hardware.location.gps\' reason=\'requested android.permission.ACCESS_FINE_LOCATION permission\'\n        uses-feature: name=\'android.hardware.location.network\'\n        uses-implied-feature: name=\'android.hardware.location.network\' reason=\'requested android.permission.ACCESS_COARSE_LOCATION permission\'\n        uses-feature: name=\'android.hardware.touchscreen\'\n        uses-implied-feature: name=\'android.hardware.touchscreen\' reason=\'default feature for all apps\'\n      main\n      other-receivers\n      other-services\n      supports-screens: \'small\' \'normal\' \'large\' \'xlarge\'\n      supports-any-density: \'true\'\n      locales: \'--_--\'\n      densities: \'120\' \'160\' \'240\' \'320\'' });
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(adb.getApkInfo('/some/folder/path.apk'));

          case 5:
            result = context$3$0.sent;
            _arr = [['name', 'io.appium.settings'], ['versionCode', 2], ['versionName', '1.1']];

            for (_i = 0; _i < _arr.length; _i++) {
              _arr$_i = _slicedToArray(_arr[_i], 2);
              _name = _arr$_i[0];
              value = _arr$_i[1];

              result.should.have.property(_name, value);
            }

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('getPackageInfo', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    it('should properly parse installed package info', function callee$2$0() {
      var result, _arr2, _i2, _arr2$_i2, _name2, value;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('shell').once().returns('Packages:\n      Package [com.example.testapp.first] (2036fd1):\n        userId=10225\n        pkg=Package{42e7a36 com.example.testapp.first}\n        codePath=/data/app/com.example.testapp.first-1\n        resourcePath=/data/app/com.example.testapp.first-1\n        legacyNativeLibraryDir=/data/app/com.example.testapp.first-1/lib\n        primaryCpuAbi=null\n        secondaryCpuAbi=null\n        versionCode=1 minSdk=21 targetSdk=24\n        versionName=1.0\n        splits=[base]\n        apkSigningVersion=1\n        applicationInfo=ApplicationInfo{29cb2a4 com.example.testapp.first}\n        flags=[ HAS_CODE ALLOW_CLEAR_USER_DATA ALLOW_BACKUP ]\n        privateFlags=[ RESIZEABLE_ACTIVITIES ]\n        dataDir=/data/user/0/com.example.testapp.first\n        supportsScreens=[small, medium, large, xlarge, resizeable, anyDensity]\n        timeStamp=2016-11-03 01:12:08\n        firstInstallTime=2016-11-03 01:12:09\n        lastUpdateTime=2016-11-03 01:12:09\n        signatures=PackageSignatures{9fe380d [53ea108d]}\n        installPermissionsFixed=true installStatus=1\n        pkgFlags=[ HAS_CODE ALLOW_CLEAR_USER_DATA ALLOW_BACKUP ]\n        User 0: ceDataInode=474317 installed=true hidden=false suspended=false stopped=true notLaunched=true enabled=0\n          runtime permissions:');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.getPackageInfo('com.example.testapp.first'));

          case 3:
            result = context$3$0.sent;
            _arr2 = [['name', 'com.example.testapp.first'], ['versionCode', 1], ['versionName', '1.0']];

            for (_i2 = 0; _i2 < _arr2.length; _i2++) {
              _arr2$_i2 = _slicedToArray(_arr2[_i2], 2);
              _name2 = _arr2$_i2[0];
              value = _arr2$_i2[1];

              result.should.have.property(_name2, value);
            }

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('installOrUpgrade', (0, _appiumTestSupport.withMocks)({ adb: adb }, function (mocks) {
    var pkgId = 'io.appium.settings';
    var apkPath = '/path/to/my.apk';

    it('should execute install if the package is not present', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('getApkInfo').withExactArgs(apkPath).once().returns({
              name: pkgId
            });
            mocks.adb.expects('isAppInstalled').withExactArgs(pkgId).once().returns(false);
            mocks.adb.expects('install').withArgs(apkPath, false).once().returns(true);
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(adb.installOrUpgrade(apkPath));

          case 5:
            mocks.adb.verify();

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should return if the same package version is already installed', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('getApkInfo').withExactArgs(apkPath).once().returns({
              versionCode: 1
            });
            mocks.adb.expects('getPackageInfo').once().returns({
              versionCode: 1
            });
            mocks.adb.expects('isAppInstalled').withExactArgs(pkgId).once().returns(true);
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(adb.installOrUpgrade(apkPath, pkgId));

          case 5:
            mocks.adb.verify();

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should return if newer package version is already installed', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('getApkInfo').withExactArgs(apkPath).once().returns({
              name: pkgId,
              versionCode: 1
            });
            mocks.adb.expects('getPackageInfo').once().returns({
              versionCode: 2
            });
            mocks.adb.expects('isAppInstalled').withExactArgs(pkgId).once().returns(true);
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(adb.installOrUpgrade(apkPath));

          case 5:
            mocks.adb.verify();

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should not throw an error if apk version code cannot be read', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('getApkInfo').withExactArgs(apkPath).once().returns({
              name: pkgId
            });
            mocks.adb.expects('getPackageInfo').once().returns({
              versionCode: 2
            });
            mocks.adb.expects('isAppInstalled').withExactArgs(pkgId).once().returns(true);
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(adb.installOrUpgrade(apkPath));

          case 5:
            mocks.adb.verify();

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should not throw an error if pkg version code cannot be read', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('getApkInfo').withExactArgs(apkPath).once().returns({
              name: pkgId,
              versionCode: 1
            });
            mocks.adb.expects('getPackageInfo').once().returns({});
            mocks.adb.expects('isAppInstalled').withExactArgs(pkgId).once().returns(true);
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(adb.installOrUpgrade(apkPath));

          case 5:
            mocks.adb.verify();

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should not throw an error if pkg id cannot be read', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('getApkInfo').withExactArgs(apkPath).once().returns({});
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(adb.installOrUpgrade(apkPath));

          case 3:
            mocks.adb.verify();

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should perform upgrade if older package version is installed', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('getApkInfo').withExactArgs(apkPath).once().returns({
              name: pkgId,
              versionCode: 2
            });
            mocks.adb.expects('getPackageInfo').once().returns({
              versionCode: 1
            });
            mocks.adb.expects('isAppInstalled').withExactArgs(pkgId).once().returns(true);
            mocks.adb.expects('install').withArgs(apkPath, true).once().returns(true);
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(adb.installOrUpgrade(apkPath));

          case 6:
            mocks.adb.verify();

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    it('should throw an exception if upgrade and reinstall fail', function callee$2$0() {
      var isExceptionThrown;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('getApkInfo').withExactArgs(apkPath).once().returns({
              name: pkgId,
              versionCode: 2
            });
            mocks.adb.expects('getPackageInfo').once().returns({
              versionCode: 1
            });
            mocks.adb.expects('isAppInstalled').withExactArgs(pkgId).once().returns(true);
            mocks.adb.expects('uninstallApk').withExactArgs(pkgId).once().returns(true);
            mocks.adb.expects('install').withArgs(apkPath).twice().throws();
            isExceptionThrown = false;
            context$3$0.prev = 6;
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(adb.installOrUpgrade(apkPath));

          case 9:
            context$3$0.next = 14;
            break;

          case 11:
            context$3$0.prev = 11;
            context$3$0.t0 = context$3$0['catch'](6);

            isExceptionThrown = true;

          case 14:
            isExceptionThrown.should.be['true'];
            mocks.adb.verify();

          case 16:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this, [[6, 11]]);
    });
    it('should throw an exception if upgrade and uninstall fail', function callee$2$0() {
      var isExceptionThrown;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            mocks.adb.expects('getApkInfo').withExactArgs(apkPath).once().returns({
              name: pkgId,
              versionCode: 2
            });
            mocks.adb.expects('getPackageInfo').once().returns({
              versionCode: 1
            });
            mocks.adb.expects('isAppInstalled').withExactArgs(pkgId).once().returns(true);
            mocks.adb.expects('uninstallApk').withExactArgs(pkgId).once().returns(false);
            mocks.adb.expects('install').withArgs(apkPath, true).once().throws();
            isExceptionThrown = false;
            context$3$0.prev = 6;
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(adb.installOrUpgrade(apkPath));

          case 9:
            context$3$0.next = 14;
            break;

          case 11:
            context$3$0.prev = 11;
            context$3$0.t0 = context$3$0['catch'](6);

            isExceptionThrown = true;

          case 14:
            isExceptionThrown.should.be['true'];
            mocks.adb.verify();

          case 16:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this, [[6, 11]]);
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
