'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _this = this;

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _ = require('../..');

var _2 = _interopRequireDefault(_);

var _teen_process = require('teen_process');

var teen_process = _interopRequireWildcard(_teen_process);

var _appiumTestSupport = require('appium-test-support');

_chai2['default'].use(_chaiAsPromised2['default']);

describe('android-manifest', function () {
  var adb = new _2['default']();
  describe('processFromManifest', (0, _appiumTestSupport.withMocks)({ adb: adb, teen_process: teen_process }, function (mocks) {
    it('should correctly parse process from manifest', function callee$2$0() {
      var localApk, dummyProcess;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            adb.binaries.aapt = 'dummy_aapt';
            localApk = 'dummyAPK', dummyProcess = 'dummyProcess';

            mocks.adb.expects("initAapt").once().withExactArgs().returns('');
            mocks.teen_process.expects("exec").once().withExactArgs('dummy_aapt', ['dump', 'xmltree', localApk, 'AndroidManifest.xml']).returns({ stdout: ' E: application (line=234)\n                          A: android:process(0x01010011)="' + dummyProcess + '"' });
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(adb.processFromManifest(localApk));

          case 6:
            context$3$0.t0 = dummyProcess;
            context$3$0.sent.should.equal(context$3$0.t0);

            mocks.adb.verify();

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('packageAndLaunchActivityFromManifest', (0, _appiumTestSupport.withMocks)({ adb: adb, teen_process: teen_process }, function (mocks) {
    it('should correctly parse package and activity from manifest', function callee$2$0() {
      var localApk, dummyPackageName, dummyActivityName, _ref, apkPackage, apkActivity;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            adb.binaries.aapt = 'dummy_aapt';
            localApk = 'dummyAPK', dummyPackageName = 'package', dummyActivityName = 'activity';

            mocks.adb.expects("initAapt").once().withExactArgs().returns('');
            mocks.teen_process.expects("exec").once().withExactArgs('dummy_aapt', ['dump', 'badging', localApk]).returns({ stdout: ' package: name=\'' + dummyPackageName + '\'\n                            launchable-activity: name=\'' + dummyActivityName + '\'' });
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(adb.packageAndLaunchActivityFromManifest(localApk));

          case 6:
            _ref = context$3$0.sent;
            apkPackage = _ref.apkPackage;
            apkActivity = _ref.apkActivity;

            apkPackage.should.equal(dummyPackageName);
            apkActivity.should.equal(dummyActivityName);
            mocks.adb.verify();

          case 12:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('hasInternetPermissionFromManifest', (0, _appiumTestSupport.withMocks)({ adb: adb, teen_process: teen_process }, function (mocks) {
    it('should correctly parse internet permission from manifest', function callee$2$0() {
      var localApk;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            adb.binaries.aapt = 'dummy_aapt';
            localApk = 'dummyAPK';

            mocks.adb.expects("initAapt").once().withExactArgs().returns('');
            mocks.teen_process.expects("exec").once().withExactArgs('dummy_aapt', ['dump', 'badging', localApk]).returns({ stdout: ' uses-permission:.*\'android.permission.INTERNET\'' });
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(adb.hasInternetPermissionFromManifest(localApk));

          case 6:
            context$3$0.sent.should.be['true'];

            mocks.adb.verify();

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }));
  describe('compileManifest', function () {
    it('should throw an error if no ANDROID_HOME set', function callee$2$0() {
      var oldAndroidHome;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            oldAndroidHome = process.env.ANDROID_HOME;

            delete process.env.ANDROID_HOME;

            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(adb.compileManifest().should.eventually.be.rejectedWith(/ANDROID_HOME environment variable was not exported/));

          case 4:

            process.env.ANDROID_HOME = oldAndroidHome;

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
