'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _loggerJs = require('../logger.js');

var _loggerJs2 = _interopRequireDefault(_loggerJs);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var PHONE_NUMBER_PATTERN = /^[\+]?[(]?[0-9]*[)]?[-\s\.]?[0-9]*[-\s\.]?[0-9]{2,}$/im;

var emuMethods = {};
emuMethods.POWER_AC_STATES = {
  POWER_AC_ON: 'on',
  POWER_AC_OFF: 'off'
};
emuMethods.GSM_CALL_ACTIONS = {
  GSM_CALL: 'call',
  GSM_ACCEPT: 'accept',
  GSM_CANCEL: 'cancel',
  GSM_HOLD: 'hold'
};
emuMethods.GSM_VOICE_STATES = {
  GSM_VOICE_UNREGISTERED: 'unregistered',
  GSM_VOICE_HOME: 'home',
  GSM_VOICE_ROAMING: 'roaming',
  GSM_VOICE_SEARCHING: 'searching',
  GSM_VOICE_DENIED: 'denied',
  GSM_VOICE_OFF: 'off',
  GSM_VOICE_ON: 'on'
};
emuMethods.GSM_SIGNAL_STRENGTHS = [0, 1, 2, 3, 4];

emuMethods.NETWORK_SPEED = {
  GSM: 'gsm', // GSM/CSD (up: 14.4, down: 14.4).
  SCSD: 'scsd', // HSCSD (up: 14.4, down: 57.6).
  GPRS: 'gprs', // GPRS (up: 28.8, down: 57.6).
  EDGE: 'edge', // EDGE/EGPRS (up: 473.6, down: 473.6).
  UMTS: 'umts', // UMTS/3G (up: 384.0, down: 384.0).
  HSDPA: 'hsdpa', // HSDPA (up: 5760.0, down: 13,980.0).
  LTE: 'lte', // LTE (up: 58,000, down: 173,000).
  EVDO: 'evdo', // EVDO (up: 75,000, down: 280,000).
  FULL: 'full' // No limit, the default (up: 0.0, down: 0.0).
};

/**
 * Check the emulator state.
 *
 * @return {boolean} True if Emulator is visible to adb.
 */
emuMethods.isEmulatorConnected = function callee$0$0() {
  var emulators;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.getConnectedEmulators());

      case 2:
        emulators = context$1$0.sent;
        return context$1$0.abrupt('return', !!_lodash2['default'].find(emulators, function (x) {
          return x && x.udid === _this.curDeviceId;
        }));

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Verify the emulator is connected.
 *
 * @throws {error} If Emulator is not visible to adb.
 */
emuMethods.verifyEmulatorConnected = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.isEmulatorConnected());

      case 2:
        if (context$1$0.sent) {
          context$1$0.next = 4;
          break;
        }

        _loggerJs2['default'].errorAndThrow('The emulator "' + this.curDeviceId + '" was unexpectedly disconnected');

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Emulate fingerprint touch event on the connected emulator.
 *
 * @param {string} fingerprintId - The ID of the fingerprint.
 */
emuMethods.fingerprint = function callee$0$0(fingerprintId) {
  var level;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!fingerprintId) {
          _loggerJs2['default'].errorAndThrow('Fingerprint id parameter must be defined');
        }
        // the method used only works for API level 23 and above
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.getApiLevel());

      case 3:
        level = context$1$0.sent;

        if (parseInt(level, 10) < 23) {
          _loggerJs2['default'].errorAndThrow('Device API Level must be >= 23. Current Api level \'' + level + '\'');
        }
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.adbExecEmu(['finger', 'touch', fingerprintId]));

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Change the display orientation on the connected emulator.
 * The orientation is changed (PI/2 is added) every time
 * this method is called.
 */
emuMethods.rotate = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.adbExecEmu(['rotate']));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Emulate power state change on the connected emulator.
 *
 * @param {string} state ['on'] - Either 'on' or 'off'.
 */
emuMethods.powerAC = function callee$0$0() {
  var state = arguments.length <= 0 || arguments[0] === undefined ? 'on' : arguments[0];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (_lodash2['default'].values(emuMethods.POWER_AC_STATES).indexOf(state) === -1) {
          _loggerJs2['default'].errorAndThrow('Wrong power AC state sent \'' + state + '\'. Supported values: ' + _lodash2['default'].values(emuMethods.POWER_AC_STATES) + ']');
        }
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.adbExecEmu(['power', 'ac', state]));

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Emulate power capacity change on the connected emulator.
 *
 * @param {string|number} percent [100] - Percentage value in range [0, 100].
 */
emuMethods.powerCapacity = function callee$0$0() {
  var percent = arguments.length <= 0 || arguments[0] === undefined ? 100 : arguments[0];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        percent = parseInt(percent, 10);
        if (isNaN(percent) || percent < 0 || percent > 100) {
          _loggerJs2['default'].errorAndThrow('The percentage value should be valid integer between 0 and 100');
        }
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.adbExecEmu(['power', 'capacity', percent]));

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Emulate power off event on the connected emulator.
 */
emuMethods.powerOFF = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.powerAC(emuMethods.POWER_AC_STATES.POWER_AC_OFF));

      case 2:
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.powerCapacity(0));

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Emulate send SMS event on the connected emulator.
 *
 * @param {string|number} phoneNumber - The phone number of message sender.
 * @param {string} message [''] - The message content.
 * @throws {error} If phone number has invalid format.
 */
emuMethods.sendSMS = function callee$0$0(phoneNumber) {
  var message = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        message = message.trim();
        if (message === "") {
          _loggerJs2['default'].errorAndThrow('Sending an SMS requires a message');
        }
        phoneNumber = ('' + phoneNumber).replace(/\s*/, "");
        if (!PHONE_NUMBER_PATTERN.test(phoneNumber)) {
          _loggerJs2['default'].errorAndThrow('Invalid sendSMS phoneNumber param ' + phoneNumber);
        }
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(this.adbExecEmu(['sms', 'send', phoneNumber, message]));

      case 6:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Emulate GSM call event on the connected emulator.
 *
 * @param {string|number} phoneNumber - The phone number of the caller.
 * @param {string} action [''] - One of available GSM call actions.
 * @throws {error} If phone number has invalid format.
 * @throws {error} If _action_ value is invalid.
 */
emuMethods.gsmCall = function callee$0$0(phoneNumber) {
  var action = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (_lodash2['default'].values(emuMethods.GSM_CALL_ACTIONS).indexOf(action) === -1) {
          _loggerJs2['default'].errorAndThrow('Invalid gsm action param ' + action + '. Supported values: ' + _lodash2['default'].values(emuMethods.GSM_CALL_ACTIONS));
        }
        phoneNumber = ('' + phoneNumber).replace(/\s*/, "");
        if (!PHONE_NUMBER_PATTERN.test(phoneNumber)) {
          _loggerJs2['default'].errorAndThrow('Invalid gsmCall phoneNumber param ' + phoneNumber);
        }
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.adbExecEmu(['gsm', action, phoneNumber]));

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Emulate GSM signal strength change event on the connected emulator.
 *
 * @param {string|number} strength [4] - A number in range [0, 4];
 * @throws {error} If _strength_ value is invalid.
 */
emuMethods.gsmSignal = function callee$0$0() {
  var strength = arguments.length <= 0 || arguments[0] === undefined ? 4 : arguments[0];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        strength = parseInt(strength, 10);
        if (emuMethods.GSM_SIGNAL_STRENGTHS.indexOf(strength) === -1) {
          _loggerJs2['default'].errorAndThrow('Invalid signal strength param ' + strength + '. Supported values: ' + _lodash2['default'].values(emuMethods.GSM_SIGNAL_STRENGTHS));
        }
        _loggerJs2['default'].info('gsm signal-profile <strength> changes the reported strength on next (15s) update.');
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.adbExecEmu(['gsm', 'signal-profile', strength]));

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Emulate GSM voice event on the connected emulator.
 *
 * @param {string} state ['on'] - Either 'on' or 'off'.
 * @throws {error} If _state_ value is invalid.
 */
emuMethods.gsmVoice = function callee$0$0() {
  var state = arguments.length <= 0 || arguments[0] === undefined ? 'on' : arguments[0];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        // gsm voice <state> allows you to change the state of your GPRS connection
        if (_lodash2['default'].values(emuMethods.GSM_VOICE_STATES).indexOf(state) === -1) {
          _loggerJs2['default'].errorAndThrow('Invalid gsm voice state param ' + state + '. Supported values: ' + _lodash2['default'].values(emuMethods.GSM_VOICE_STATES));
        }
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.adbExecEmu(['gsm', 'voice', state]));

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

/**
 * Emulate network speed change event on the connected emulator.
 *
 * @param {string} speed ['full'] - One of possible NETWORK_SPEED values.
 * @throws {error} If _speed_ value is invalid.
 */
emuMethods.networkSpeed = function callee$0$0() {
  var speed = arguments.length <= 0 || arguments[0] === undefined ? 'full' : arguments[0];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        // network speed <speed> allows you to set the network speed emulation.
        if (_lodash2['default'].values(emuMethods.NETWORK_SPEED).indexOf(speed) === -1) {
          _loggerJs2['default'].errorAndThrow('Invalid network speed param ' + speed + '. Supported values: ' + _lodash2['default'].values(emuMethods.NETWORK_SPEED));
        }
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.adbExecEmu(['network', 'speed', speed]));

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

exports['default'] = emuMethods;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,
